//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/functions/Functions.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxFunctionsFunctions")
#ifdef RESTRICT_RxFunctionsFunctions
#define INCLUDE_ALL_RxFunctionsFunctions 0
#else
#define INCLUDE_ALL_RxFunctionsFunctions 1
#endif
#undef RESTRICT_RxFunctionsFunctions

#if !defined (RxFunctionsFunctions_) && (INCLUDE_ALL_RxFunctionsFunctions || defined(INCLUDE_RxFunctionsFunctions))
#define RxFunctionsFunctions_

@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsAction2;
@protocol RxFunctionsAction3;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc1;
@protocol RxFunctionsFunc2;
@protocol RxFunctionsFunc3;
@protocol RxFunctionsFunc4;
@protocol RxFunctionsFunc5;
@protocol RxFunctionsFunc6;
@protocol RxFunctionsFunc7;
@protocol RxFunctionsFunc8;
@protocol RxFunctionsFunc9;
@protocol RxFunctionsFuncN;

@interface RxFunctionsFunctions : NSObject

#pragma mark Public

/*!
 @brief Converts an <code>Action0</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Action0</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromActionWithRxFunctionsAction0:(id<RxFunctionsAction0>)f;

/*!
 @brief Converts an <code>Action1</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Action1</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromActionWithRxFunctionsAction1:(id<RxFunctionsAction1>)f;

/*!
 @brief Converts an <code>Action2</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Action2</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromActionWithRxFunctionsAction2:(id<RxFunctionsAction2>)f;

/*!
 @brief Converts an <code>Action3</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Action3</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromActionWithRxFunctionsAction3:(id<RxFunctionsAction3>)f;

/*!
 @brief Converts a <code>Func0</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func0</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)f;

/*!
 @brief Converts a <code>Func1</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func1</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)f;

/*!
 @brief Converts a <code>Func2</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func2</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)f;

/*!
 @brief Converts a <code>Func3</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func3</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc3:(id<RxFunctionsFunc3>)f;

/*!
 @brief Converts a <code>Func4</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func4</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc4:(id<RxFunctionsFunc4>)f;

/*!
 @brief Converts a <code>Func5</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func5</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc5:(id<RxFunctionsFunc5>)f;

/*!
 @brief Converts a <code>Func6</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func6</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc6:(id<RxFunctionsFunc6>)f;

/*!
 @brief Converts a <code>Func7</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func7</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc7:(id<RxFunctionsFunc7>)f;

/*!
 @brief Converts a <code>Func8</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func8</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc8:(id<RxFunctionsFunc8>)f;

/*!
 @brief Converts a <code>Func9</code> to a <code>FuncN</code> to allow heterogeneous handling of functions with different arities.
 @param f
 the <code>Func9</code> to convert
 @return a <code>FuncN</code> representation of <code>f</code>
 */
+ (id<RxFunctionsFuncN>)fromFuncWithRxFunctionsFunc9:(id<RxFunctionsFunc9>)f;

@end

J2OBJC_EMPTY_STATIC_INIT(RxFunctionsFunctions)

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc0_(id<RxFunctionsFunc0> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc1_(id<RxFunctionsFunc1> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc2_(id<RxFunctionsFunc2> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc3_(id<RxFunctionsFunc3> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc4_(id<RxFunctionsFunc4> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc5_(id<RxFunctionsFunc5> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc6_(id<RxFunctionsFunc6> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc7_(id<RxFunctionsFunc7> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc8_(id<RxFunctionsFunc8> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromFuncWithRxFunctionsFunc9_(id<RxFunctionsFunc9> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromActionWithRxFunctionsAction0_(id<RxFunctionsAction0> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromActionWithRxFunctionsAction1_(id<RxFunctionsAction1> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromActionWithRxFunctionsAction2_(id<RxFunctionsAction2> f);

FOUNDATION_EXPORT id<RxFunctionsFuncN> RxFunctionsFunctions_fromActionWithRxFunctionsAction3_(id<RxFunctionsAction3> f);

J2OBJC_TYPE_LITERAL_HEADER(RxFunctionsFunctions)

#endif

#pragma pop_macro("INCLUDE_ALL_RxFunctionsFunctions")
