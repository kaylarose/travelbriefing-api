//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Scheduler.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/subscriptions/MultipleAssignmentSubscription.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface RxScheduler_Worker_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxScheduler_Worker *this$0_;
  jlong count_;
  jlong lastNowNanos_;
  jlong startInNanos_;
  jlong val$firstNowNanos_;
  jlong val$firstStartInNanos_;
  RxSubscriptionsMultipleAssignmentSubscription *val$mas_;
  id<RxFunctionsAction0> val$action_;
  jlong val$periodInNanos_;
}

- (void)call;

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)outer$
                                  withLong:(jlong)capture$0
                                  withLong:(jlong)capture$1
withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3
                                  withLong:(jlong)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(RxScheduler_Worker_$1)

J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, this$0_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, val$mas_, RxSubscriptionsMultipleAssignmentSubscription *)
J2OBJC_FIELD_SETTER(RxScheduler_Worker_$1, val$action_, id<RxFunctionsAction0>)

__attribute__((unused)) static void RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker_$1 *self, RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4);

__attribute__((unused)) static RxScheduler_Worker_$1 *new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxScheduler_Worker_$1 *create_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4);

J2OBJC_TYPE_LITERAL_HEADER(RxScheduler_Worker_$1)

J2OBJC_INITIALIZED_DEFN(RxScheduler)

jlong RxScheduler_CLOCK_DRIFT_TOLERANCE_NANOS;

@implementation RxScheduler

+ (jlong)CLOCK_DRIFT_TOLERANCE_NANOS {
  return RxScheduler_CLOCK_DRIFT_TOLERANCE_NANOS;
}

- (RxScheduler_Worker *)createWorker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)now {
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWorker", "LRxScheduler_Worker;", 0x401, -1, -1, -1, -1, -1, -1 },
    { "now", "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CLOCK_DRIFT_TOLERANCE_NANOS", "J", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &RxScheduler_CLOCK_DRIFT_TOLERANCE_NANOS, "LRxScheduler_Worker;" };
  static const J2ObjcClassInfo _RxScheduler = { "Scheduler", "rx", ptrTable, methods, fields, 7, 0x401, 3, 1, -1, 1, -1, -1, -1 };
  return &_RxScheduler;
}

+ (void)initialize {
  if (self == [RxScheduler class]) {
    {
      RxScheduler_CLOCK_DRIFT_TOLERANCE_NANOS = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES))) toNanosWithLong:[((JavaLangLong *) nil_chk(JavaLangLong_getLongWithNSString_withLong_(@"rx.scheduler.drift-tolerance", 15))) longLongValue]];
    }
    J2OBJC_SET_INITIALIZED(RxScheduler)
  }
}

@end

void RxScheduler_init(RxScheduler *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler)

@implementation RxScheduler_Worker

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<RxSubscription>)schedulePeriodicallyWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                        withLong:(jlong)initialDelay
                                                        withLong:(jlong)period
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong periodInNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:period];
  jlong firstNowNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toNanosWithLong:[self now]];
  jlong firstStartInNanos = firstNowNanos + [unit toNanosWithLong:initialDelay];
  RxSubscriptionsMultipleAssignmentSubscription *mas = new_RxSubscriptionsMultipleAssignmentSubscription_init();
  id<RxFunctionsAction0> recursiveAction = new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(self, firstNowNanos, firstStartInNanos, mas, action, periodInNanos);
  RxSubscriptionsMultipleAssignmentSubscription *s = new_RxSubscriptionsMultipleAssignmentSubscription_init();
  [mas setWithRxSubscription:s];
  [s setWithRxSubscription:[self scheduleWithRxFunctionsAction0:recursiveAction withLong:initialDelay withJavaUtilConcurrentTimeUnit:unit]];
  return mas;
}

- (jlong)now {
  return JavaLangSystem_currentTimeMillis();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxScheduler_Worker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "scheduleWithRxFunctionsAction0:", "LRxSubscription;", 0x401, 0, 1, -1, -1, -1, -1 },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "LRxSubscription;", 0x401, 0, 2, -1, -1, -1, -1 },
    { "schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:", "LRxSubscription;", 0x1, 3, 4, -1, -1, -1, -1 },
    { "now", "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "schedulePeriodically", "LRxFunctionsAction0;JJLJavaUtilConcurrentTimeUnit;", "LRxScheduler;" };
  static const J2ObjcClassInfo _RxScheduler_Worker = { "Worker", "rx", ptrTable, methods, NULL, 7, 0x409, 5, 0, 5, -1, -1, -1, -1 };
  return &_RxScheduler_Worker;
}

@end

void RxScheduler_Worker_init(RxScheduler_Worker *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler_Worker)

@implementation RxScheduler_Worker_$1

- (void)call {
  if (![((RxSubscriptionsMultipleAssignmentSubscription *) nil_chk(val$mas_)) isUnsubscribed]) {
    [((id<RxFunctionsAction0>) nil_chk(val$action_)) call];
    jlong nextTick;
    jlong nowNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toNanosWithLong:[this$0_ now]];
    if (nowNanos + JreLoadStatic(RxScheduler, CLOCK_DRIFT_TOLERANCE_NANOS) < lastNowNanos_ || nowNanos >= lastNowNanos_ + val$periodInNanos_ + JreLoadStatic(RxScheduler, CLOCK_DRIFT_TOLERANCE_NANOS)) {
      nextTick = nowNanos + val$periodInNanos_;
      startInNanos_ = nextTick - (val$periodInNanos_ * (++count_));
    }
    else {
      nextTick = startInNanos_ + (++count_ * val$periodInNanos_);
    }
    lastNowNanos_ = nowNanos;
    jlong delay = nextTick - nowNanos;
    [val$mas_ setWithRxSubscription:[this$0_ scheduleWithRxFunctionsAction0:self withLong:delay withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)]];
  }
}

- (instancetype)initWithRxScheduler_Worker:(RxScheduler_Worker *)outer$
                                  withLong:(jlong)capture$0
                                  withLong:(jlong)capture$1
withRxSubscriptionsMultipleAssignmentSubscription:(RxSubscriptionsMultipleAssignmentSubscription *)capture$2
                    withRxFunctionsAction0:(id<RxFunctionsAction0>)capture$3
                                  withLong:(jlong)capture$4 {
  RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithRxScheduler_Worker:withLong:withLong:withRxSubscriptionsMultipleAssignmentSubscription:withRxFunctionsAction0:withLong:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastNowNanos_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startInNanos_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$firstNowNanos_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$firstStartInNanos_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$mas_", "LRxSubscriptionsMultipleAssignmentSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$periodInNanos_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler_Worker;JJLRxSubscriptionsMultipleAssignmentSubscription;LRxFunctionsAction0;J", "LRxScheduler_Worker;", "schedulePeriodicallyWithRxFunctionsAction0:withLong:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _RxScheduler_Worker_$1 = { "", "rx", ptrTable, methods, fields, 7, 0x8008, 2, 9, 1, -1, 2, -1, -1 };
  return &_RxScheduler_Worker_$1;
}

@end

void RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker_$1 *self, RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4) {
  self->this$0_ = outer$;
  self->val$firstNowNanos_ = capture$0;
  self->val$firstStartInNanos_ = capture$1;
  self->val$mas_ = capture$2;
  self->val$action_ = capture$3;
  self->val$periodInNanos_ = capture$4;
  NSObject_init(self);
  self->lastNowNanos_ = self->val$firstNowNanos_;
  self->startInNanos_ = self->val$firstStartInNanos_;
}

RxScheduler_Worker_$1 *new_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4) {
  J2OBJC_NEW_IMPL(RxScheduler_Worker_$1, initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}

RxScheduler_Worker_$1 *create_RxScheduler_Worker_$1_initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_(RxScheduler_Worker *outer$, jlong capture$0, jlong capture$1, RxSubscriptionsMultipleAssignmentSubscription *capture$2, id<RxFunctionsAction0> capture$3, jlong capture$4) {
  J2OBJC_CREATE_IMPL(RxScheduler_Worker_$1, initWithRxScheduler_Worker_withLong_withLong_withRxSubscriptionsMultipleAssignmentSubscription_withRxFunctionsAction0_withLong_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxScheduler_Worker_$1)
