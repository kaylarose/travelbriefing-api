//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observables/AsyncOnSubscribe.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservablesAsyncOnSubscribe")
#ifdef RESTRICT_RxObservablesAsyncOnSubscribe
#define INCLUDE_ALL_RxObservablesAsyncOnSubscribe 0
#else
#define INCLUDE_ALL_RxObservablesAsyncOnSubscribe 1
#endif
#undef RESTRICT_RxObservablesAsyncOnSubscribe

#if !defined (RxObservablesAsyncOnSubscribe_) && (INCLUDE_ALL_RxObservablesAsyncOnSubscribe || defined(INCLUDE_RxObservablesAsyncOnSubscribe))
#define RxObservablesAsyncOnSubscribe_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsAction2;
@protocol RxFunctionsAction3;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc3;
@protocol RxObserver;

/*!
 @brief A utility class to create <code>OnSubscribe<T></code> functions that respond correctly to back
 pressure requests from subscribers.
 This is an improvement over
 <code>Observable.create(OnSubscribe)</code> which does not provide
 any means of managing back pressure requests out-of-the-box. This variant of an OnSubscribe
 function allows for the asynchronous processing of requests.
 */
@interface RxObservablesAsyncOnSubscribe : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)init;

- (void)callWithId:(RxSubscriber *)actualSubscriber;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @return an AsyncOnSubscribe that emits data in a protocol compatible with back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createSingleStateWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                  withRxFunctionsAction3:(id<RxFunctionsAction3>)next;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 This overload creates a AsyncOnSubscribe without an explicit clean up step.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return an AsyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createSingleStateWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                  withRxFunctionsAction3:(id<RxFunctionsAction3>)next
                                                  withRxFunctionsAction1:(id<RxFunctionsAction1>)onUnsubscribe;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @return an AsyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createStatefulWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                 withRxFunctionsFunc3:(id<RxFunctionsFunc3>)next;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return an AsyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createStatefulWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                 withRxFunctionsFunc3:(id<RxFunctionsFunc3>)next
                                               withRxFunctionsAction1:(id<RxFunctionsAction1>)onUnsubscribe;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 This overload creates a "state-less" AsyncOnSubscribe which does not have an explicit state
 value. This should be used when the <code>next</code> function closes over it's state.
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @return an AsyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createStatelessWithRxFunctionsAction2:(id<RxFunctionsAction2>)next;

/*!
 @brief Generates a synchronous <code>AsyncOnSubscribe</code> that calls the provided <code>next</code>
 function to generate data to downstream subscribers.
 This overload creates a "state-less" AsyncOnSubscribe which does not have an explicit state
 value. This should be used when the <code>next</code> function closes over it's state.
 @param next
 produces data to the downstream subscriber (see
 <code>next(S, long, Observer)</code>)
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return an AsyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesAsyncOnSubscribe *)createStatelessWithRxFunctionsAction2:(id<RxFunctionsAction2>)next
                                                  withRxFunctionsAction0:(id<RxFunctionsAction0>)onUnsubscribe;

#pragma mark Protected

/*!
 @brief Executed once when subscribed to by a subscriber (via <code>call(Subscriber)</code>)
 to produce a state value.
 This value is passed into <code>next(S state, Observer <T> observer)</code>
  on the first iteration. Subsequent iterations of
 <code>next</code> will receive the state returned by the previous invocation of <code>next</code>.
 @return the initial state value
 */
- (id)generateState;

/*!
 @brief Called to produce data to the downstream subscribers.
 To emit data to a downstream subscriber
 call <code>observer.onNext(t)</code>. To signal an error condition call
 <code>observer.onError(throwable)</code> or throw an Exception. To signal the end of a data stream
 call <code>observer.onCompleted()</code>. Implementations of this method must follow the following
 rules.
 <ul>
 <li>Must not call <code>observer.onNext(t)</code> more than 1 time per invocation.</li>
 <li>Must not call <code>observer.onNext(t)</code> concurrently.</li>
 </ul>
 The value returned from an invocation of this method will be passed in as the <code>state</code>
 argument of the next invocation of this method.
 @param state
 the state value (from <code>generateState()</code> on the first invocation or the
 previous invocation of this method.
 @param requested
 the amount of data requested. An observable emitted to the observer should not
 exceed this amount.
 @param observer
 the observer of data emitted by
 @return the next iteration's state value
 */
- (id)nextWithId:(id)state
        withLong:(jlong)requested
  withRxObserver:(id<RxObserver>)observer;

/*!
 @brief Clean up behavior that is executed after the downstream subscriber's subscription is
 unsubscribed.
 This method will be invoked exactly once.
 @param state
 the last state value returned from <code>next(S, Long, Observer)</code> or
 <code>generateState()</code> at the time when a terminal event is emitted from
 <code>next(Object,long,Observer)</code> or unsubscribing.
 */
- (void)onUnsubscribeWithId:(id)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribe)

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction3_(id<RxFunctionsFunc0> generator, id<RxFunctionsAction3> next);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction3_withRxFunctionsAction1_(id<RxFunctionsFunc0> generator, id<RxFunctionsAction3> next, id<RxFunctionsAction1> onUnsubscribe);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_withRxFunctionsAction1_(id<RxFunctionsFunc0> generator, id<RxFunctionsFunc3> next, id<RxFunctionsAction1> onUnsubscribe);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc3_(id<RxFunctionsFunc0> generator, id<RxFunctionsFunc3> next);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_(id<RxFunctionsAction2> next);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe *RxObservablesAsyncOnSubscribe_createStatelessWithRxFunctionsAction2_withRxFunctionsAction0_(id<RxFunctionsAction2> next, id<RxFunctionsAction0> onUnsubscribe);

FOUNDATION_EXPORT void RxObservablesAsyncOnSubscribe_init(RxObservablesAsyncOnSubscribe *self);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribe)

#endif

#if !defined (RxObservablesAsyncOnSubscribe_AsyncOuterManager_) && (INCLUDE_ALL_RxObservablesAsyncOnSubscribe || defined(INCLUDE_RxObservablesAsyncOnSubscribe_AsyncOuterManager))
#define RxObservablesAsyncOnSubscribe_AsyncOuterManager_

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class RxObservable;
@class RxObservablesAsyncOnSubscribe;
@class RxObservablesAsyncOnSubscribe_UnicastSubject;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilList;

@interface RxObservablesAsyncOnSubscribe_AsyncOuterManager : NSObject < RxProducer, RxSubscription, RxObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *isUnsubscribed_;
  RxSubscriptionsCompositeSubscription *subscriptions_;
  jboolean emitting_;
  id<JavaUtilList> requests_;
  id<RxProducer> concatProducer_;
  jlong expectedDelivery_;
}

#pragma mark Public

- (instancetype)initWithRxObservablesAsyncOnSubscribe:(RxObservablesAsyncOnSubscribe *)parent
                                               withId:(id)initialState
     withRxObservablesAsyncOnSubscribe_UnicastSubject:(RxObservablesAsyncOnSubscribe_UnicastSubject *)merger;

- (jboolean)isUnsubscribed;

- (void)nextIterationWithLong:(jlong)requestCount;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxObservable *)t;

- (void)requestWithLong:(jlong)n;

/*!
 @brief Called when a source has produced less than its provision (completed prematurely); this will trigger the generation of another
 source that will hopefully emit the missing amount.
 @param n the missing amount to produce via a new source.
 */
- (void)requestRemainingWithLong:(jlong)n;

- (void)unsubscribe;

#pragma mark Package-Private

- (void)cleanup;

- (void)setConcatProducerWithRxProducer:(id<RxProducer>)p;

- (jboolean)tryEmitWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribe_AsyncOuterManager)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribe_AsyncOuterManager, isUnsubscribed_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribe_AsyncOuterManager, subscriptions_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribe_AsyncOuterManager, requests_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribe_AsyncOuterManager, concatProducer_, id<RxProducer>)

FOUNDATION_EXPORT void RxObservablesAsyncOnSubscribe_AsyncOuterManager_initWithRxObservablesAsyncOnSubscribe_withId_withRxObservablesAsyncOnSubscribe_UnicastSubject_(RxObservablesAsyncOnSubscribe_AsyncOuterManager *self, RxObservablesAsyncOnSubscribe *parent, id initialState, RxObservablesAsyncOnSubscribe_UnicastSubject *merger);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_AsyncOuterManager *new_RxObservablesAsyncOnSubscribe_AsyncOuterManager_initWithRxObservablesAsyncOnSubscribe_withId_withRxObservablesAsyncOnSubscribe_UnicastSubject_(RxObservablesAsyncOnSubscribe *parent, id initialState, RxObservablesAsyncOnSubscribe_UnicastSubject *merger) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_AsyncOuterManager *create_RxObservablesAsyncOnSubscribe_AsyncOuterManager_initWithRxObservablesAsyncOnSubscribe_withId_withRxObservablesAsyncOnSubscribe_UnicastSubject_(RxObservablesAsyncOnSubscribe *parent, id initialState, RxObservablesAsyncOnSubscribe_UnicastSubject *merger);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribe_AsyncOuterManager)

#endif

#if !defined (RxObservablesAsyncOnSubscribe_UnicastSubject_) && (INCLUDE_ALL_RxObservablesAsyncOnSubscribe || defined(INCLUDE_RxObservablesAsyncOnSubscribe_UnicastSubject))
#define RxObservablesAsyncOnSubscribe_UnicastSubject_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable 1
#include "rx/Observable.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@class RxObservablesAsyncOnSubscribe_UnicastSubject_State;

@interface RxObservablesAsyncOnSubscribe_UnicastSubject : RxObservable < RxObserver >

#pragma mark Public

+ (RxObservablesAsyncOnSubscribe_UnicastSubject *)create;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Protected

- (instancetype)initWithRxObservablesAsyncOnSubscribe_UnicastSubject_State:(RxObservablesAsyncOnSubscribe_UnicastSubject_State *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribe_UnicastSubject)

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_UnicastSubject *RxObservablesAsyncOnSubscribe_UnicastSubject_create();

FOUNDATION_EXPORT void RxObservablesAsyncOnSubscribe_UnicastSubject_initWithRxObservablesAsyncOnSubscribe_UnicastSubject_State_(RxObservablesAsyncOnSubscribe_UnicastSubject *self, RxObservablesAsyncOnSubscribe_UnicastSubject_State *state);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_UnicastSubject *new_RxObservablesAsyncOnSubscribe_UnicastSubject_initWithRxObservablesAsyncOnSubscribe_UnicastSubject_State_(RxObservablesAsyncOnSubscribe_UnicastSubject_State *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_UnicastSubject *create_RxObservablesAsyncOnSubscribe_UnicastSubject_initWithRxObservablesAsyncOnSubscribe_UnicastSubject_State_(RxObservablesAsyncOnSubscribe_UnicastSubject_State *state);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribe_UnicastSubject)

#endif

#if !defined (RxObservablesAsyncOnSubscribe_UnicastSubject_State_) && (INCLUDE_ALL_RxObservablesAsyncOnSubscribe || defined(INCLUDE_RxObservablesAsyncOnSubscribe_UnicastSubject_State))
#define RxObservablesAsyncOnSubscribe_UnicastSubject_State_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;

@interface RxObservablesAsyncOnSubscribe_UnicastSubject_State : NSObject < RxObservable_OnSubscribe > {
 @public
  RxSubscriber *subscriber_;
}

#pragma mark Public

- (void)callWithId:(RxSubscriber *)s;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesAsyncOnSubscribe_UnicastSubject_State)

J2OBJC_FIELD_SETTER(RxObservablesAsyncOnSubscribe_UnicastSubject_State, subscriber_, RxSubscriber *)

FOUNDATION_EXPORT void RxObservablesAsyncOnSubscribe_UnicastSubject_State_init(RxObservablesAsyncOnSubscribe_UnicastSubject_State *self);

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_UnicastSubject_State *new_RxObservablesAsyncOnSubscribe_UnicastSubject_State_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservablesAsyncOnSubscribe_UnicastSubject_State *create_RxObservablesAsyncOnSubscribe_UnicastSubject_State_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesAsyncOnSubscribe_UnicastSubject_State)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservablesAsyncOnSubscribe")
