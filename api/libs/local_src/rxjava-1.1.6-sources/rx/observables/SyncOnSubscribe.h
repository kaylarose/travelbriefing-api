//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observables/SyncOnSubscribe.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservablesSyncOnSubscribe")
#ifdef RESTRICT_RxObservablesSyncOnSubscribe
#define INCLUDE_ALL_RxObservablesSyncOnSubscribe 0
#else
#define INCLUDE_ALL_RxObservablesSyncOnSubscribe 1
#endif
#undef RESTRICT_RxObservablesSyncOnSubscribe

#if !defined (RxObservablesSyncOnSubscribe_) && (INCLUDE_ALL_RxObservablesSyncOnSubscribe || defined(INCLUDE_RxObservablesSyncOnSubscribe))
#define RxObservablesSyncOnSubscribe_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsAction2;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc2;
@protocol RxObserver;

/*!
 @brief A utility class to create <code>OnSubscribe<T></code> functions that respond correctly to back
 pressure requests from subscribers.
 This is an improvement over
 <code>Observable.create(OnSubscribe)</code> which does not provide
 any means of managing back pressure requests out-of-the-box.
 */
@interface RxObservablesSyncOnSubscribe : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)init;

- (void)callWithId:(RxSubscriber *)subscriber;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @return a SyncOnSubscribe that emits data in a protocol compatible with back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createSingleStateWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                 withRxFunctionsAction2:(id<RxFunctionsAction2>)next;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 This overload creates a SyncOnSubscribe without an explicit clean up step.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return a SyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createSingleStateWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                 withRxFunctionsAction2:(id<RxFunctionsAction2>)next
                                                 withRxFunctionsAction1:(id<RxFunctionsAction1>)onUnsubscribe;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @return a SyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createStatefulWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                withRxFunctionsFunc2:(id<RxFunctionsFunc2>)next;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 @param generator
 generates the initial state value (see <code>generateState()</code>)
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return a SyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createStatefulWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)generator
                                                withRxFunctionsFunc2:(id<RxFunctionsFunc2>)next
                                              withRxFunctionsAction1:(id<RxFunctionsAction1>)onUnsubscribe;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 This overload creates a "state-less" SyncOnSubscribe which does not have an explicit state
 value. This should be used when the <code>next</code> function closes over it's state.
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @return a SyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createStatelessWithRxFunctionsAction1:(id<RxFunctionsAction1>)next;

/*!
 @brief Generates a synchronous <code>SyncOnSubscribe</code> that calls the provided <code>next</code> function
 to generate data to downstream subscribers.
 This overload creates a "state-less" SyncOnSubscribe which does not have an explicit state
 value. This should be used when the <code>next</code> function closes over it's state.
 @param next
 produces data to the downstream subscriber (see <code>next(S, Subscriber)</code>
 )
 @param onUnsubscribe
 clean up behavior (see <code>onUnsubscribe(S)</code>)
 @return a SyncOnSubscribe that emits data downstream in a protocol compatible with
 back-pressure.
 */
+ (RxObservablesSyncOnSubscribe *)createStatelessWithRxFunctionsAction1:(id<RxFunctionsAction1>)next
                                                 withRxFunctionsAction0:(id<RxFunctionsAction0>)onUnsubscribe;

#pragma mark Protected

/*!
 @brief Executed once when subscribed to by a subscriber (via <code>call(Subscriber)</code>)
 to produce a state value.
 This value is passed into <code>next(S
 state, Observer <T> observer)</code>
  on the first iteration. Subsequent iterations of <code>next</code>
 will receive the state returned by the previous invocation of <code>next</code>.
 @return the initial state value
 */
- (id)generateState;

/*!
 @brief Called to produce data to the downstream subscribers.
 To emit data to a downstream subscriber
 call <code>observer.onNext(t)</code>. To signal an error condition call
 <code>observer.onError(throwable)</code> or throw an Exception. To signal the end of a data stream
 call <code>observer.onCompleted()</code>
 . Implementations of this method must follow the following rules.
 <ul>
 <li>Must not call <code>observer.onNext(t)</code> more than 1 time per invocation.</li>
 <li>Must not call <code>observer.onNext(t)</code> concurrently.</li>
 </ul>
 The value returned from an invocation of this method will be passed in as the <code>state</code>
 argument of the next invocation of this method.
 @param state
 the state value (from <code>generateState()</code> on the first invocation or the
 previous invocation of this method.
 @param observer
 the observer of data emitted by
 @return the next iteration's state value
 */
- (id)nextWithId:(id)state
  withRxObserver:(id<RxObserver>)observer;

/*!
 @brief Clean up behavior that is executed after the downstream subscriber's subscription is
 unsubscribed.
 This method will be invoked exactly once.
 @param state
 the last state value prior from <code>generateState()</code> or
 <code>next(S, Observer&lt;T&gt;)</code> before unsubscribe.
 */
- (void)onUnsubscribeWithId:(id)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesSyncOnSubscribe)

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction2_(id<RxFunctionsFunc0> generator, id<RxFunctionsAction2> next);

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createSingleStateWithRxFunctionsFunc0_withRxFunctionsAction2_withRxFunctionsAction1_(id<RxFunctionsFunc0> generator, id<RxFunctionsAction2> next, id<RxFunctionsAction1> onUnsubscribe);

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_withRxFunctionsAction1_(id<RxFunctionsFunc0> generator, id<RxFunctionsFunc2> next, id<RxFunctionsAction1> onUnsubscribe);

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createStatefulWithRxFunctionsFunc0_withRxFunctionsFunc2_(id<RxFunctionsFunc0> generator, id<RxFunctionsFunc2> next);

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_(id<RxFunctionsAction1> next);

FOUNDATION_EXPORT RxObservablesSyncOnSubscribe *RxObservablesSyncOnSubscribe_createStatelessWithRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> next, id<RxFunctionsAction0> onUnsubscribe);

FOUNDATION_EXPORT void RxObservablesSyncOnSubscribe_init(RxObservablesSyncOnSubscribe *self);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesSyncOnSubscribe)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservablesSyncOnSubscribe")
