//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observables/BlockingObservable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservablesBlockingObservable")
#ifdef RESTRICT_RxObservablesBlockingObservable
#define INCLUDE_ALL_RxObservablesBlockingObservable 0
#else
#define INCLUDE_ALL_RxObservablesBlockingObservable 1
#endif
#undef RESTRICT_RxObservablesBlockingObservable

#if !defined (RxObservablesBlockingObservable_) && (INCLUDE_ALL_RxObservablesBlockingObservable || defined(INCLUDE_RxObservablesBlockingObservable))
#define RxObservablesBlockingObservable_

@class RxObservable;
@class RxSubscriber;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentFuture;
@protocol JavaUtilIterator;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsFunc1;
@protocol RxObserver;

/*!
 @brief <code>BlockingObservable</code> is a variety of <code>Observable</code> that provides blocking operators.
 It can be
 useful for testing and demo purposes, but is generally inappropriate for production applications (if you
 think you need to use a <code>BlockingObservable</code> this is usually a sign that you should rethink your
 design).
 <p>
 You construct a <code>BlockingObservable</code> from an <code>Observable</code> with <code>from(Observable)</code> or
 <code>Observable.toBlocking()</code>.
 <p>
 The documentation for this interface makes use of a form of marble diagram that has been modified to
 illustrate blocking operators. The following legend explains these marble diagrams:
 <p>
 <img width="640" height="301" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.legend.png" alt="">
 - seealso: <a href="https://github.com/ReactiveX/RxJava/wiki/Blocking-Observable-Operators">RxJava wiki: Blocking
 *      Observable Operators</a>
 */
@interface RxObservablesBlockingObservable : NSObject

+ (id)ON_START;

+ (id)SET_PRODUCER;

+ (id)UNSUBSCRIBE;

#pragma mark Public

/*!
 @brief Returns the first item emitted by this <code>BlockingObservable</code>, or throws
 <code>NoSuchElementException</code> if it emits no items.
 @return the first item emitted by this <code>BlockingObservable</code>
 @throws NoSuchElementException
 if this <code>BlockingObservable</code> emits no items
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)first;

/*!
 @brief Returns the first item emitted by this <code>BlockingObservable</code> that matches a predicate, or throws
 <code>NoSuchElementException</code> if it emits no such item.
 @param predicate
 a predicate function to evaluate items emitted by this <code>BlockingObservable</code>
 @return the first item emitted by this <code>BlockingObservable</code> that matches the predicate
 @throws NoSuchElementException
 if this <code>BlockingObservable</code> emits no such items
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)firstWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Returns the first item emitted by this <code>BlockingObservable</code>, or a default value if it emits no
 items.
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no items
 @return the first item emitted by this <code>BlockingObservable</code>, or the default value if it emits no
 items
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)firstOrDefaultWithId:(id)defaultValue;

/*!
 @brief Returns the first item emitted by this <code>BlockingObservable</code> that matches a predicate, or a default
 value if it emits no such items.
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no matching items
 @param predicate
 a predicate function to evaluate items emitted by this <code>BlockingObservable</code>
 @return the first item emitted by this <code>BlockingObservable</code> that matches the predicate, or the
 default value if this <code>BlockingObservable</code> emits no matching items
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)firstOrDefaultWithId:(id)defaultValue
      withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Invokes a method on each item emitted by this <code>BlockingObservable</code> and blocks until the Observable
 completes.
 <p>
 <em>Note:</em> This will block even if the underlying Observable is asynchronous.
 <p>
 <img width="640" height="330" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.forEach.png" alt="">
 <p>
 This is similar to <code>Observable.subscribe(Subscriber)</code>, but it blocks. Because it blocks it does not
 need the <code>Subscriber.onCompleted()</code> or <code>Subscriber.onError(Throwable)</code> methods. If the
 underlying Observable terminates with an error, rather than calling <code>onError</code>, this method will
 throw an exception.
 <p>The difference between this method and <code>subscribe(Action1)</code> is that the <code>onNext</code> action
 is executed on the emission thread instead of the current thread.
 @param onNext
 the <code>Action1</code> to invoke for each item emitted by the <code>BlockingObservable</code>
 @throws RuntimeException
 if an error occurs
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX documentation: Subscribe</a>
 - seealso: #subscribe(Action1)
 */
- (void)forEachWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext;

/*!
 @brief Converts an <code>Observable</code> into a <code>BlockingObservable</code>.
 @param o
 the <code>Observable</code> you want to convert
 @return a <code>BlockingObservable</code> version of <code>o</code>
 */
+ (RxObservablesBlockingObservable *)fromWithRxObservable:(RxObservable *)o;

/*!
 @brief Returns an <code>Iterator</code> that iterates over all items emitted by this <code>BlockingObservable</code>.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.getIterator.png" alt="">
 @return an <code>Iterator</code> that can iterate over the items emitted by this <code>BlockingObservable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX documentation: To</a>
 */
- (id<JavaUtilIterator>)getIterator;

/*!
 @brief Returns the last item emitted by this <code>BlockingObservable</code>, or throws
 <code>NoSuchElementException</code> if this <code>BlockingObservable</code> emits no items.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.last.png" alt="">
 @return the last item emitted by this <code>BlockingObservable</code>
 @throws NoSuchElementException
 if this <code>BlockingObservable</code> emits no items
 - seealso: <a href="http://reactivex.io/documentation/operators/last.html">ReactiveX documentation: Last</a>
 */
- (id)last;

/*!
 @brief Returns the last item emitted by this <code>BlockingObservable</code> that matches a predicate, or throws
 <code>NoSuchElementException</code> if it emits no such items.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.last.p.png" alt="">
 @param predicate
 a predicate function to evaluate items emitted by the <code>BlockingObservable</code>
 @return the last item emitted by the <code>BlockingObservable</code> that matches the predicate
 @throws NoSuchElementException
 if this <code>BlockingObservable</code> emits no items
 - seealso: <a href="http://reactivex.io/documentation/operators/last.html">ReactiveX documentation: Last</a>
 */
- (id)lastWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Returns the last item emitted by this <code>BlockingObservable</code>, or a default value if it emits no
 items.
 <p>
 <img width="640" height="310" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.lastOrDefault.png" alt="">
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no items
 @return the last item emitted by the <code>BlockingObservable</code>, or the default value if it emits no
 items
 - seealso: <a href="http://reactivex.io/documentation/operators/last.html">ReactiveX documentation: Last</a>
 */
- (id)lastOrDefaultWithId:(id)defaultValue;

/*!
 @brief Returns the last item emitted by this <code>BlockingObservable</code> that matches a predicate, or a default
 value if it emits no such items.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.lastOrDefault.p.png" alt="">
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no matching items
 @param predicate
 a predicate function to evaluate items emitted by this <code>BlockingObservable</code>
 @return the last item emitted by this <code>BlockingObservable</code> that matches the predicate, or the
 default value if it emits no matching items
 - seealso: <a href="http://reactivex.io/documentation/operators/last.html">ReactiveX documentation: Last</a>
 */
- (id)lastOrDefaultWithId:(id)defaultValue
     withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Returns an <code>Iterable</code> that returns the latest item emitted by this <code>BlockingObservable</code>,
 waiting if necessary for one to become available.
 <p>
 If this <code>BlockingObservable</code> produces items faster than <code>Iterator.next</code> takes them,
 <code>onNext</code> events might be skipped, but <code>onError</code> or <code>onCompleted</code> events are not.
 <p>
 Note also that an <code>onNext</code> directly followed by <code>onCompleted</code> might hide the <code>onNext</code>
 event.
 @return an Iterable that always returns the latest item emitted by this <code>BlockingObservable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id<JavaLangIterable>)latest;

/*!
 @brief Returns an <code>Iterable</code> that always returns the item most recently emitted by this
 <code>BlockingObservable</code>.
 <p>
 <img width="640" height="490" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.mostRecent.png" alt="">
 @param initialValue
 the initial value that the <code>Iterable</code> sequence will yield if this
 <code>BlockingObservable</code> has not yet emitted an item
 @return an <code>Iterable</code> that on each iteration returns the item that this <code>BlockingObservable</code>
 has most recently emitted
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id<JavaLangIterable>)mostRecentWithId:(id)initialValue;

/*!
 @brief Returns an <code>Iterable</code> that blocks until this <code>BlockingObservable</code> emits another item, then
 returns that item.
 <p>
 <img width="640" height="490" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.next.png" alt="">
 @return an <code>Iterable</code> that blocks upon each iteration until this <code>BlockingObservable</code> emits
 a new item, whereupon the Iterable returns that item
 - seealso: <a href="http://reactivex.io/documentation/operators/takelast.html">ReactiveX documentation: TakeLast</a>
 */
- (id<JavaLangIterable>)next;

/*!
 @brief If this <code>BlockingObservable</code> completes after emitting a single item, return that item, otherwise
 throw a <code>NoSuchElementException</code>.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.single.png" alt="">
 @return the single item emitted by this <code>BlockingObservable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)single;

/*!
 @brief If this <code>BlockingObservable</code> completes after emitting a single item that matches a given predicate,
 return that item, otherwise throw a <code>NoSuchElementException</code>.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.single.p.png" alt="">
 @param predicate
 a predicate function to evaluate items emitted by this <code>BlockingObservable</code>
 @return the single item emitted by this <code>BlockingObservable</code> that matches the predicate
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)singleWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief If this <code>BlockingObservable</code> completes after emitting a single item, return that item; if it emits
 more than one item, throw an <code>IllegalArgumentException</code>; if it emits no items, return a default
 value.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.singleOrDefault.png" alt="">
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no items
 @return the single item emitted by this <code>BlockingObservable</code>, or the default value if it emits no
 items
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)singleOrDefaultWithId:(id)defaultValue;

/*!
 @brief If this <code>BlockingObservable</code> completes after emitting a single item that matches a predicate,
 return that item; if it emits more than one such item, throw an <code>IllegalArgumentException</code>; if it
 emits no items, return a default value.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.singleOrDefault.p.png" alt="">
 @param defaultValue
 a default value to return if this <code>BlockingObservable</code> emits no matching items
 @param predicate
 a predicate function to evaluate items emitted by this <code>BlockingObservable</code>
 @return the single item emitted by the <code>BlockingObservable</code> that matches the predicate, or the
 default value if no such items are emitted
 - seealso: <a href="http://reactivex.io/documentation/operators/first.html">ReactiveX documentation: First</a>
 */
- (id)singleOrDefaultWithId:(id)defaultValue
       withRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Runs the source observable to a terminal event, ignoring any values and rethrowing any exception.
 */
- (void)subscribe;

/*!
 @brief Subscribes to the source and calls the given action on the current thread and rethrows any exception wrapped
 into OnErrorNotImplementedException.
 <p>The difference between this method and <code>forEach(Action1)</code> is that the
 action is always executed on the current thread.
 @param onNext the callback action for each source value
 - seealso: #forEach(Action1)
 */
- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext;

/*!
 @brief Subscribes to the source and calls the given actions on the current thread.
 @param onNext the callback action for each source value
 @param onError the callback action for an error event
 */
- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                 withRxFunctionsAction1:(id<RxFunctionsAction1>)onError;

/*!
 @brief Subscribes to the source and calls the given actions on the current thread.
 @param onNext the callback action for each source value
 @param onError the callback action for an error event
 @param onCompleted the callback action for the completion event.
 */
- (void)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                 withRxFunctionsAction1:(id<RxFunctionsAction1>)onError
                 withRxFunctionsAction0:(id<RxFunctionsAction0>)onCompleted;

/*!
 @brief Subscribes to the source and calls back the Observer methods on the current thread.
 @param observer the observer to call event methods on
 */
- (void)subscribeWithRxObserver:(id<RxObserver>)observer;

/*!
 @brief Subscribes to the source and calls the Subscriber methods on the current thread.
 <p>
 The unsubscription and backpressure is composed through.
 @param subscriber the subscriber to forward events and calls to in the current thread
 */
- (void)subscribeWithRxSubscriber:(RxSubscriber *)subscriber;

/*!
 @brief Returns a <code>Future</code> representing the single value emitted by this <code>BlockingObservable</code>.
 <p>
 If <code>BlockingObservable</code> emits more than one item, <code>java.util.concurrent.Future</code> will receive an
 <code>java.lang.IllegalArgumentException</code>. If <code>BlockingObservable</code> is empty, <code>java.util.concurrent.Future</code>
 will receive an <code>java.util.NoSuchElementException</code>.
 <p>
 If the <code>BlockingObservable</code> may emit more than one item, use <code>Observable.toList().toBlocking().toFuture()</code>.
 <p>
 <img width="640" height="395" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.toFuture.png" alt="">
 @return a <code>Future</code> that expects a single item to be emitted by this <code>BlockingObservable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX documentation: To</a>
 */
- (id<JavaUtilConcurrentFuture>)toFuture;

/*!
 @brief Converts this <code>BlockingObservable</code> into an <code>Iterable</code>.
 <p>
 <img width="640" height="315" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.toIterable.png" alt="">
 @return an <code>Iterable</code> version of this <code>BlockingObservable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX documentation: To</a>
 */
- (id<JavaLangIterable>)toIterable;

@end

J2OBJC_STATIC_INIT(RxObservablesBlockingObservable)

/*!
 @brief Constant to indicate the onStart method should be called.
 */
inline id RxObservablesBlockingObservable_get_ON_START();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id RxObservablesBlockingObservable_ON_START;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObservablesBlockingObservable, ON_START, id)

/*!
 @brief Constant indicating the setProducer method should be called.
 */
inline id RxObservablesBlockingObservable_get_SET_PRODUCER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id RxObservablesBlockingObservable_SET_PRODUCER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObservablesBlockingObservable, SET_PRODUCER, id)

/*!
 @brief Indicates an unsubscription happened
 */
inline id RxObservablesBlockingObservable_get_UNSUBSCRIBE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id RxObservablesBlockingObservable_UNSUBSCRIBE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObservablesBlockingObservable, UNSUBSCRIBE, id)

FOUNDATION_EXPORT RxObservablesBlockingObservable *RxObservablesBlockingObservable_fromWithRxObservable_(RxObservable *o);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesBlockingObservable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservablesBlockingObservable")
