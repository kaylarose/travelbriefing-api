//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observables/GroupedObservable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObservablesGroupedObservable")
#ifdef RESTRICT_RxObservablesGroupedObservable
#define INCLUDE_ALL_RxObservablesGroupedObservable 0
#else
#define INCLUDE_ALL_RxObservablesGroupedObservable 1
#endif
#undef RESTRICT_RxObservablesGroupedObservable

#if !defined (RxObservablesGroupedObservable_) && (INCLUDE_ALL_RxObservablesGroupedObservable || defined(INCLUDE_RxObservablesGroupedObservable))
#define RxObservablesGroupedObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable 1
#include "rx/Observable.h"

@protocol RxObservable_OnSubscribe;

/*!
 @brief An <code>Observable</code> that has been grouped by key, the value of which can be obtained with <code>getKey()</code>.
 <p>
 <em>Note:</em> A <code>GroupedObservable</code> will cache the items it is to emit until such time as it
 is subscribed to. For this reason, in order to avoid memory leaks, you should not simply ignore those
 <code>GroupedObservable</code>s that do not concern you. Instead, you can signal to them that they
 may discard their buffers by applying an operator like <code>take</code><code>(0)</code> to them.
 - seealso: Observable#groupBy(Func1)
 - seealso: <a href="http://reactivex.io/documentation/operators/groupby.html">ReactiveX documentation: GroupBy</a>
 */
@interface RxObservablesGroupedObservable : RxObservable

#pragma mark Public

/*!
 @brief Returns an Observable that will execute the specified function when a <code>Subscriber</code> subscribes to
 it.
 <p>
 <img width="640" height="200" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/create.png" alt="">
 <p>
 Write the function you pass to <code>create</code> so that it behaves as an Observable: It should invoke the
 Subscriber's <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods appropriately.
 <p>
 A well-formed Observable must invoke either the Subscriber's <code>onCompleted</code> method exactly once or
 its <code>onError</code> method exactly once.
 <p>
 See <a href="http://go.microsoft.com/fwlink/?LinkID=205219">Rx Design Guidelines (PDF)</a> for detailed
 information.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>create</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param key the key value
 @param f
 a function that accepts an <code>Subscriber<T></code>, and invokes its <code>onNext</code>, <code>onError</code>, and <code>onCompleted</code> methods as appropriate
 @return a GroupedObservable that, when a <code>Subscriber</code> subscribes to it, will execute the specified
 function
 */
+ (RxObservablesGroupedObservable *)createWithId:(id)key
                    withRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)f;

/*!
 @brief Converts an <code>Observable</code> into a <code>GroupedObservable</code> with a particular key.
 @param key
 the key to identify the group of items emitted by this <code>GroupedObservable</code>
 @param o
 the <code>Observable</code> to convert
 @return a <code>GroupedObservable</code> representation of <code>o</code>, with key <code>key</code>
 */
+ (RxObservablesGroupedObservable *)fromWithId:(id)key
                              withRxObservable:(RxObservable *)o;

/*!
 @brief Returns the key that identifies the group of items emitted by this <code>GroupedObservable</code>
 @return the key that the items emitted by this <code>GroupedObservable</code> were grouped by
 */
- (id)getKey;

#pragma mark Protected

- (instancetype)initWithId:(id)key
withRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesGroupedObservable)

FOUNDATION_EXPORT RxObservablesGroupedObservable *RxObservablesGroupedObservable_fromWithId_withRxObservable_(id key, RxObservable *o);

FOUNDATION_EXPORT RxObservablesGroupedObservable *RxObservablesGroupedObservable_createWithId_withRxObservable_OnSubscribe_(id key, id<RxObservable_OnSubscribe> f);

FOUNDATION_EXPORT void RxObservablesGroupedObservable_initWithId_withRxObservable_OnSubscribe_(RxObservablesGroupedObservable *self, id key, id<RxObservable_OnSubscribe> onSubscribe);

FOUNDATION_EXPORT RxObservablesGroupedObservable *new_RxObservablesGroupedObservable_initWithId_withRxObservable_OnSubscribe_(id key, id<RxObservable_OnSubscribe> onSubscribe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObservablesGroupedObservable *create_RxObservablesGroupedObservable_initWithId_withRxObservable_OnSubscribe_(id key, id<RxObservable_OnSubscribe> onSubscribe);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesGroupedObservable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObservablesGroupedObservable")
