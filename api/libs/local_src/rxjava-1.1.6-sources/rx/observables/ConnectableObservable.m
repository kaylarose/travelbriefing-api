//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observables/ConnectableObservable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "rx/Observable.h"
#include "rx/Subscription.h"
#include "rx/functions/Action1.h"
#include "rx/functions/Actions.h"
#include "rx/internal/operators/OnSubscribeAutoConnect.h"
#include "rx/internal/operators/OnSubscribeRefCount.h"
#include "rx/observables/ConnectableObservable.h"

@interface RxObservablesConnectableObservable_$1 : NSObject < RxFunctionsAction1 > {
 @public
  IOSObjectArray *val$out_;
}

- (void)callWithId:(id<RxSubscription>)t1;

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObservablesConnectableObservable_$1)

J2OBJC_FIELD_SETTER(RxObservablesConnectableObservable_$1, val$out_, IOSObjectArray *)

__attribute__((unused)) static void RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(RxObservablesConnectableObservable_$1 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static RxObservablesConnectableObservable_$1 *new_RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObservablesConnectableObservable_$1 *create_RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(IOSObjectArray *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxObservablesConnectableObservable_$1)

@implementation RxObservablesConnectableObservable

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe {
  RxObservablesConnectableObservable_initWithRxObservable_OnSubscribe_(self, onSubscribe);
  return self;
}

- (id<RxSubscription>)connect {
  IOSObjectArray *out = [IOSObjectArray newArrayWithLength:1 type:RxSubscription_class_()];
  [self connectWithRxFunctionsAction1:new_RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(out)];
  return IOSObjectArray_Get(out, 0);
}

- (void)connectWithRxFunctionsAction1:(id<RxFunctionsAction1>)connection {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (RxObservable *)refCount {
  return RxObservable_createWithRxObservable_OnSubscribe_(new_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(self));
}

- (RxObservable *)autoConnect {
  return [self autoConnectWithInt:1];
}

- (RxObservable *)autoConnectWithInt:(jint)numberOfSubscribers {
  return [self autoConnectWithInt:numberOfSubscribers withRxFunctionsAction1:RxFunctionsActions_empty()];
}

- (RxObservable *)autoConnectWithInt:(jint)numberOfSubscribers
              withRxFunctionsAction1:(id<RxFunctionsAction1>)connection {
  if (numberOfSubscribers <= 0) {
    [self connectWithRxFunctionsAction1:connection];
    return self;
  }
  return RxObservable_createWithRxObservable_OnSubscribe_(new_RxInternalOperatorsOnSubscribeAutoConnect_initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_(self, numberOfSubscribers, connection));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservable_OnSubscribe:", NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { "connect", "LRxSubscription;", 0x11, -1, -1, -1, -1, -1, -1 },
    { "connectWithRxFunctionsAction1:", "V", 0x401, 2, 3, -1, 4, -1, -1 },
    { "refCount", "LRxObservable;", 0x1, -1, -1, -1, 5, -1, -1 },
    { "autoConnect", "LRxObservable;", 0x1, -1, -1, -1, 5, -1, -1 },
    { "autoConnectWithInt:", "LRxObservable;", 0x1, 6, 7, -1, 8, -1, -1 },
    { "autoConnectWithInt:withRxFunctionsAction1:", "LRxObservable;", 0x1, 6, 9, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable_OnSubscribe;", "(Lrx/Observable$OnSubscribe<TT;>;)V", "connect", "LRxFunctionsAction1;", "(Lrx/functions/Action1<-Lrx/Subscription;>;)V", "()Lrx/Observable<TT;>;", "autoConnect", "I", "(I)Lrx/Observable<TT;>;", "ILRxFunctionsAction1;", "(ILrx/functions/Action1<-Lrx/Subscription;>;)Lrx/Observable<TT;>;", "<T:Ljava/lang/Object;>Lrx/Observable<TT;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservable = { "ConnectableObservable", "rx.observables", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, 11, -1 };
  return &_RxObservablesConnectableObservable;
}

@end

void RxObservablesConnectableObservable_initWithRxObservable_OnSubscribe_(RxObservablesConnectableObservable *self, id<RxObservable_OnSubscribe> onSubscribe) {
  RxObservable_initWithRxObservable_OnSubscribe_(self, onSubscribe);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesConnectableObservable)

@implementation RxObservablesConnectableObservable_$1

- (void)callWithId:(id<RxSubscription>)t1 {
  (void) IOSObjectArray_Set(nil_chk(val$out_), 0, t1);
}

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)capture$0 {
  RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callWithId:", "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { "initWithRxSubscriptionArray:", NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$out_", "[LRxSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscription;", "[LRxSubscription;", "LRxObservablesConnectableObservable;", "connect", "Ljava/lang/Object;Lrx/functions/Action1<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxObservablesConnectableObservable_$1 = { "", "rx.observables", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_RxObservablesConnectableObservable_$1;
}

@end

void RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(RxObservablesConnectableObservable_$1 *self, IOSObjectArray *capture$0) {
  self->val$out_ = capture$0;
  NSObject_init(self);
}

RxObservablesConnectableObservable_$1 *new_RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(RxObservablesConnectableObservable_$1, initWithRxSubscriptionArray_, capture$0)
}

RxObservablesConnectableObservable_$1 *create_RxObservablesConnectableObservable_$1_initWithRxSubscriptionArray_(IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(RxObservablesConnectableObservable_$1, initWithRxSubscriptionArray_, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObservablesConnectableObservable_$1)
