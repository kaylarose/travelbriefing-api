//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Notification.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxNotification")
#ifdef RESTRICT_RxNotification
#define INCLUDE_ALL_RxNotification 0
#else
#define INCLUDE_ALL_RxNotification 1
#endif
#undef RESTRICT_RxNotification

#if !defined (RxNotification_) && (INCLUDE_ALL_RxNotification || defined(INCLUDE_RxNotification))
#define RxNotification_

@class IOSClass;
@class RxNotification_Kind;
@protocol RxObserver;

/*!
 @brief An object representing a notification sent to an <code>Observable</code>.
 */
@interface RxNotification : NSObject

#pragma mark Public

/*!
 @brief Forwards this notification on to a specified <code>Observer</code>.
 @param observer the target observer to call onXXX methods on based on the kind of this Notification instance
 */
- (void)acceptWithRxObserver:(id<RxObserver>)observer;

/*!
 @brief Creates and returns a <code>Notification</code> of variety <code>Kind.OnCompleted</code>.
 @return an <code>OnCompleted</code> variety of <code>Notification</code>
 */
+ (RxNotification *)createOnCompleted;

/*!
 @brief Creates and returns a <code>Notification</code> of variety <code>Kind.OnCompleted</code>.
 @param type
 @return an <code>OnCompleted</code> variety of <code>Notification</code>
 */
+ (RxNotification *)createOnCompletedWithIOSClass:(IOSClass *)type;

/*!
 @brief Creates and returns a <code>Notification</code> of variety <code>Kind.OnError</code>, and assigns it an exception.
 @param e
 the exception to assign to the notification
 @return an <code>OnError</code> variety of <code>Notification</code>
 */
+ (RxNotification *)createOnErrorWithNSException:(NSException *)e;

/*!
 @brief Creates and returns a <code>Notification</code> of variety <code>Kind.OnNext</code>, and assigns it a value.
 @param t
 the item to assign to the notification as its value
 @return an <code>OnNext</code> variety of <code>Notification</code>
 */
+ (RxNotification *)createOnNextWithId:(id)t;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Retrieves the kind of this notification: <code>OnNext</code>, <code>OnError</code>, or <code>OnCompleted</code>
 @return the kind of the notification: <code>OnNext</code>, <code>OnError</code>, or <code>OnCompleted</code>
 */
- (RxNotification_Kind *)getKind;

/*!
 @brief Retrieves the exception associated with this (onError) notification.
 @return the Throwable associated with this (onError) notification
 */
- (NSException *)getThrowable;

/*!
 @brief Retrieves the item associated with this (onNext) notification.
 @return the item associated with this (onNext) notification
 */
- (id)getValue;

- (NSUInteger)hash;

/*!
 @brief Indicates whether this notification has an exception associated with it.
 @return a boolean indicating whether this notification has an exception associated with it
 */
- (jboolean)hasThrowable;

/*!
 @brief Indicates whether this notification has an item associated with it.
 @return a boolean indicating whether or not this notification has an item associated with it
 */
- (jboolean)hasValue;

/*!
 @brief Indicates whether this notification represents an <code>onCompleted</code> event.
 @return a boolean indicating whether this notification represents an <code>onCompleted</code> event
 */
- (jboolean)isOnCompleted;

/*!
 @brief Indicates whether this notification represents an <code>onError</code> event.
 @return a boolean indicating whether this notification represents an <code>onError</code> event
 */
- (jboolean)isOnError;

/*!
 @brief Indicates whether this notification represents an <code>onNext</code> event.
 @return a boolean indicating whether this notification represents an <code>onNext</code> event
 */
- (jboolean)isOnNext;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(RxNotification)

FOUNDATION_EXPORT RxNotification *RxNotification_createOnNextWithId_(id t);

FOUNDATION_EXPORT RxNotification *RxNotification_createOnErrorWithNSException_(NSException *e);

FOUNDATION_EXPORT RxNotification *RxNotification_createOnCompleted();

FOUNDATION_EXPORT RxNotification *RxNotification_createOnCompletedWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(RxNotification)

#endif

#if !defined (RxNotification_Kind_) && (INCLUDE_ALL_RxNotification || defined(INCLUDE_RxNotification_Kind))
#define RxNotification_Kind_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, RxNotification_Kind_Enum) {
  RxNotification_Kind_Enum_OnNext = 0,
  RxNotification_Kind_Enum_OnError = 1,
  RxNotification_Kind_Enum_OnCompleted = 2,
};

@interface RxNotification_Kind : JavaLangEnum < NSCopying >

+ (RxNotification_Kind *)OnNext;

+ (RxNotification_Kind *)OnError;

+ (RxNotification_Kind *)OnCompleted;

#pragma mark Public

+ (RxNotification_Kind *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;
- (RxNotification_Kind_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(RxNotification_Kind)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT RxNotification_Kind *RxNotification_Kind_values_[];

inline RxNotification_Kind *RxNotification_Kind_get_OnNext();
J2OBJC_ENUM_CONSTANT(RxNotification_Kind, OnNext)

inline RxNotification_Kind *RxNotification_Kind_get_OnError();
J2OBJC_ENUM_CONSTANT(RxNotification_Kind, OnError)

inline RxNotification_Kind *RxNotification_Kind_get_OnCompleted();
J2OBJC_ENUM_CONSTANT(RxNotification_Kind, OnCompleted)

FOUNDATION_EXPORT IOSObjectArray *RxNotification_Kind_values();

FOUNDATION_EXPORT RxNotification_Kind *RxNotification_Kind_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT RxNotification_Kind *RxNotification_Kind_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(RxNotification_Kind)

#endif

#pragma pop_macro("INCLUDE_ALL_RxNotification")
