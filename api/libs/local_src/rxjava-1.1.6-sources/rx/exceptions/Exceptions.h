//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/Exceptions.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxExceptionsExceptions")
#ifdef RESTRICT_RxExceptionsExceptions
#define INCLUDE_ALL_RxExceptionsExceptions 0
#else
#define INCLUDE_ALL_RxExceptionsExceptions 1
#endif
#undef RESTRICT_RxExceptionsExceptions

#if !defined (RxExceptionsExceptions_) && (INCLUDE_ALL_RxExceptionsExceptions || defined(INCLUDE_RxExceptionsExceptions))
#define RxExceptionsExceptions_

@class JavaLangRuntimeException;
@class RxSingleSubscriber;
@protocol JavaUtilList;
@protocol RxObserver;

/*!
 @brief Utility class with methods to wrap checked exceptions and
 manage fatal and regular exception delivery.
 */
@interface RxExceptionsExceptions : NSObject

#pragma mark Public

/*!
 @brief Adds a <code>Throwable</code> to a causality-chain of Throwables, as an additional cause (if it does not
 already appear in the chain among the causes).
 @param e
 the <code>Throwable</code> at the head of the causality chain
 @param cause
 the <code>Throwable</code> you want to add as a cause of the chain
 */
+ (void)addCauseWithNSException:(NSException *)e
                withNSException:(NSException *)cause;

/*!
 @brief Get the <code>Throwable</code> at the end of the causality-chain for a particular <code>Throwable</code>
 @param e
 the <code>Throwable</code> whose final cause you are curious about
 @return the last <code>Throwable</code> in the causality-chain of <code>e</code> (or a "Stack too deep to get
 final cause" <code>RuntimeException</code> if the chain is too long to traverse)
 */
+ (NSException *)getFinalCauseWithNSException:(NSException *)e;

/*!
 @brief Convenience method to throw a <code>RuntimeException</code> and <code>Error</code> directly
 or wrap any other exception type into a <code>RuntimeException</code>.
 @param t the exception to throw directly or wrapped
 @return because <code>propagate</code> itself throws an exception or error, this is a sort of phantom return
 value; <code>propagate</code> does not actually return anything
 */
+ (JavaLangRuntimeException *)propagateWithNSException:(NSException *)t;

/*!
 @brief Throws a single or multiple exceptions contained in the collection, wrapping it into
 <code>CompositeException</code> if necessary.
 @param exceptions the collection of exceptions. If null or empty, no exception is thrown.
 If the collection contains a single exception, that exception is either thrown as-is or wrapped into a
 CompositeException. Multiple exceptions are wrapped into a CompositeException.
 @since 1.1.0
 */
+ (void)throwIfAnyWithJavaUtilList:(id<JavaUtilList>)exceptions;

/*!
 @brief Throws a particular <code>Throwable</code> only if it belongs to a set of "fatal" error varieties.
 These
 varieties are as follows:
 <ul>
 <li><code>OnErrorNotImplementedException</code></li>
 <li><code>OnErrorFailedException</code></li>
 <li><code>OnCompletedFailedException</code></li>
 <li><code>StackOverflowError</code></li>
 <li><code>VirtualMachineError</code></li>
 <li><code>ThreadDeath</code></li>
 <li><code>LinkageError</code></li>
 </ul>
 This can be useful if you are writing an operator that calls user-supplied code, and you want to
 notify subscribers of errors encountered in that code by calling their <code>onError</code> methods, but only
 if the errors are not so catastrophic that such a call would be futile, in which case you simply want to
 rethrow the error.
 @param t
 the <code>Throwable</code> to test and perhaps throw
 - seealso: <a href="https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495">RxJava: StackOverflowError is swallowed (Issue #748)</a>
 */
+ (void)throwIfFatalWithNSException:(NSException *)t;

/*!
 @brief Forwards a fatal exception or reports it to the given Observer.
 @param t the exception
 @param o the observer to report to
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
+ (void)throwOrReportWithNSException:(NSException *)t
                      withRxObserver:(id<RxObserver>)o;

/*!
 @brief Forwards a fatal exception or reports it along with the value
 caused it to the given Observer.
 @param t the exception
 @param o the observer to report to
 @param value the value that caused the exception
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
+ (void)throwOrReportWithNSException:(NSException *)t
                      withRxObserver:(id<RxObserver>)o
                              withId:(id)value;

/*!
 @brief Forwards a fatal exception or reports it to the given Observer.
 @param throwable the exception.
 @param subscriber the subscriber to report to.
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number).
 */
+ (void)throwOrReportWithNSException:(NSException *)throwable
              withRxSingleSubscriber:(RxSingleSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsExceptions)

FOUNDATION_EXPORT JavaLangRuntimeException *RxExceptionsExceptions_propagateWithNSException_(NSException *t);

FOUNDATION_EXPORT void RxExceptionsExceptions_throwIfFatalWithNSException_(NSException *t);

FOUNDATION_EXPORT void RxExceptionsExceptions_addCauseWithNSException_withNSException_(NSException *e, NSException *cause);

FOUNDATION_EXPORT NSException *RxExceptionsExceptions_getFinalCauseWithNSException_(NSException *e);

FOUNDATION_EXPORT void RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(id<JavaUtilList> exceptions);

FOUNDATION_EXPORT void RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_withId_(NSException *t, id<RxObserver> o, id value);

FOUNDATION_EXPORT void RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(NSException *t, id<RxObserver> o);

FOUNDATION_EXPORT void RxExceptionsExceptions_throwOrReportWithNSException_withRxSingleSubscriber_(NSException *throwable, RxSingleSubscriber *subscriber);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsExceptions)

#endif

#pragma pop_macro("INCLUDE_ALL_RxExceptionsExceptions")
