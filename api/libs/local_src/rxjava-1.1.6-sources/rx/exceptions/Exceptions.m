//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/Exceptions.java
//

#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/LinkageError.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/ThreadDeath.h"
#include "java/lang/VirtualMachineError.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "rx/Observer.h"
#include "rx/SingleSubscriber.h"
#include "rx/exceptions/CompositeException.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/exceptions/OnCompletedFailedException.h"
#include "rx/exceptions/OnErrorFailedException.h"
#include "rx/exceptions/OnErrorNotImplementedException.h"
#include "rx/exceptions/OnErrorThrowable.h"

@interface RxExceptionsExceptions ()

/*!
 @brief Utility class, no instances.
 */
- (instancetype)init;

@end

inline jint RxExceptionsExceptions_get_MAX_DEPTH();
#define RxExceptionsExceptions_MAX_DEPTH 25
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsExceptions, MAX_DEPTH, jint)

__attribute__((unused)) static void RxExceptionsExceptions_init(RxExceptionsExceptions *self);

__attribute__((unused)) static RxExceptionsExceptions *new_RxExceptionsExceptions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsExceptions *create_RxExceptionsExceptions_init();

@implementation RxExceptionsExceptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsExceptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangRuntimeException *)propagateWithNSException:(NSException *)t {
  return RxExceptionsExceptions_propagateWithNSException_(t);
}

+ (void)throwIfFatalWithNSException:(NSException *)t {
  RxExceptionsExceptions_throwIfFatalWithNSException_(t);
}

+ (void)addCauseWithNSException:(NSException *)e
                withNSException:(NSException *)cause {
  RxExceptionsExceptions_addCauseWithNSException_withNSException_(e, cause);
}

+ (NSException *)getFinalCauseWithNSException:(NSException *)e {
  return RxExceptionsExceptions_getFinalCauseWithNSException_(e);
}

+ (void)throwIfAnyWithJavaUtilList:(id<JavaUtilList>)exceptions {
  RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(exceptions);
}

+ (void)throwOrReportWithNSException:(NSException *)t
                      withRxObserver:(id<RxObserver>)o
                              withId:(id)value {
  RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_withId_(t, o, value);
}

+ (void)throwOrReportWithNSException:(NSException *)t
                      withRxObserver:(id<RxObserver>)o {
  RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(t, o);
}

+ (void)throwOrReportWithNSException:(NSException *)throwable
              withRxSingleSubscriber:(RxSingleSubscriber *)subscriber {
  RxExceptionsExceptions_throwOrReportWithNSException_withRxSingleSubscriber_(throwable, subscriber);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { "propagateWithNSException:", "LJavaLangRuntimeException;", 0x9, 0, 1, -1, -1, -1, -1 },
    { "throwIfFatalWithNSException:", "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { "addCauseWithNSException:withNSException:", "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { "getFinalCauseWithNSException:", "LNSException;", 0x9, 5, 1, -1, -1, -1, -1 },
    { "throwIfAnyWithJavaUtilList:", "V", 0x9, 6, 7, -1, 8, -1, -1 },
    { "throwOrReportWithNSException:withRxObserver:withId:", "V", 0x9, 9, 10, -1, 11, -1, -1 },
    { "throwOrReportWithNSException:withRxObserver:", "V", 0x9, 9, 12, -1, 13, -1, -1 },
    { "throwOrReportWithNSException:withRxSingleSubscriber:", "V", 0x9, 9, 14, -1, 15, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DEPTH", "I", .constantValue.asInt = RxExceptionsExceptions_MAX_DEPTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "propagate", "LNSException;", "throwIfFatal", "addCause", "LNSException;LNSException;", "getFinalCause", "throwIfAny", "LJavaUtilList;", "(Ljava/util/List<+Ljava/lang/Throwable;>;)V", "throwOrReport", "LNSException;LRxObserver;LNSObject;", "(Ljava/lang/Throwable;Lrx/Observer<*>;Ljava/lang/Object;)V", "LNSException;LRxObserver;", "(Ljava/lang/Throwable;Lrx/Observer<*>;)V", "LNSException;LRxSingleSubscriber;", "(Ljava/lang/Throwable;Lrx/SingleSubscriber<*>;)V" };
  static const J2ObjcClassInfo _RxExceptionsExceptions = { "Exceptions", "rx.exceptions", ptrTable, methods, fields, 7, 0x11, 9, 1, -1, -1, -1, -1, -1 };
  return &_RxExceptionsExceptions;
}

@end

void RxExceptionsExceptions_init(RxExceptionsExceptions *self) {
  NSObject_init(self);
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

RxExceptionsExceptions *new_RxExceptionsExceptions_init() {
  J2OBJC_NEW_IMPL(RxExceptionsExceptions, init)
}

RxExceptionsExceptions *create_RxExceptionsExceptions_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsExceptions, init)
}

JavaLangRuntimeException *RxExceptionsExceptions_propagateWithNSException_(NSException *t) {
  RxExceptionsExceptions_initialize();
  if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
    @throw (JavaLangRuntimeException *) cast_chk(t, [JavaLangRuntimeException class]);
  }
  else if ([t isKindOfClass:[JavaLangError class]]) {
    @throw (JavaLangError *) cast_chk(t, [JavaLangError class]);
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSException_(t);
  }
}

void RxExceptionsExceptions_throwIfFatalWithNSException_(NSException *t) {
  RxExceptionsExceptions_initialize();
  if ([t isKindOfClass:[RxExceptionsOnErrorNotImplementedException class]]) {
    @throw (RxExceptionsOnErrorNotImplementedException *) cast_chk(t, [RxExceptionsOnErrorNotImplementedException class]);
  }
  else if ([t isKindOfClass:[RxExceptionsOnErrorFailedException class]]) {
    @throw (RxExceptionsOnErrorFailedException *) cast_chk(t, [RxExceptionsOnErrorFailedException class]);
  }
  else if ([t isKindOfClass:[RxExceptionsOnCompletedFailedException class]]) {
    @throw (RxExceptionsOnCompletedFailedException *) cast_chk(t, [RxExceptionsOnCompletedFailedException class]);
  }
  else if ([t isKindOfClass:[JavaLangStackOverflowError class]]) {
    @throw (JavaLangStackOverflowError *) cast_chk(t, [JavaLangStackOverflowError class]);
  }
  else if ([t isKindOfClass:[JavaLangVirtualMachineError class]]) {
    @throw (JavaLangVirtualMachineError *) cast_chk(t, [JavaLangVirtualMachineError class]);
  }
  else if ([t isKindOfClass:[JavaLangThreadDeath class]]) {
    @throw (JavaLangThreadDeath *) cast_chk(t, [JavaLangThreadDeath class]);
  }
  else if ([t isKindOfClass:[JavaLangLinkageError class]]) {
    @throw (JavaLangLinkageError *) cast_chk(t, [JavaLangLinkageError class]);
  }
}

void RxExceptionsExceptions_addCauseWithNSException_withNSException_(NSException *e, NSException *cause) {
  RxExceptionsExceptions_initialize();
  id<JavaUtilSet> seenCauses = new_JavaUtilHashSet_init();
  jint i = 0;
  while ([((NSException *) nil_chk(e)) getCause] != nil) {
    if (i++ >= RxExceptionsExceptions_MAX_DEPTH) {
      return;
    }
    e = [e getCause];
    if ([seenCauses containsWithId:[((NSException *) nil_chk(e)) getCause]]) {
      break;
    }
    else {
      [seenCauses addWithId:[e getCause]];
    }
  }
  @try {
    (void) [e initCauseWithNSException:cause];
  }
  @catch (NSException *t) {
  }
}

NSException *RxExceptionsExceptions_getFinalCauseWithNSException_(NSException *e) {
  RxExceptionsExceptions_initialize();
  jint i = 0;
  while ([((NSException *) nil_chk(e)) getCause] != nil) {
    if (i++ >= RxExceptionsExceptions_MAX_DEPTH) {
      return new_JavaLangRuntimeException_initWithNSString_(@"Stack too deep to get final cause");
    }
    e = [e getCause];
  }
  return e;
}

void RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(id<JavaUtilList> exceptions) {
  RxExceptionsExceptions_initialize();
  if (exceptions != nil && ![exceptions isEmpty]) {
    if ([exceptions size] == 1) {
      NSException *t = [exceptions getWithInt:0];
      if ([t isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) cast_chk(t, [JavaLangRuntimeException class]);
      }
      else if ([t isKindOfClass:[JavaLangError class]]) {
        @throw (JavaLangError *) cast_chk(t, [JavaLangError class]);
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSException_(t);
      }
    }
    @throw new_RxExceptionsCompositeException_initWithJavaUtilCollection_(exceptions);
  }
}

void RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_withId_(NSException *t, id<RxObserver> o, id value) {
  RxExceptionsExceptions_initialize();
  RxExceptionsExceptions_throwIfFatalWithNSException_(t);
  [((id<RxObserver>) nil_chk(o)) onErrorWithNSException:RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(t, value)];
}

void RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(NSException *t, id<RxObserver> o) {
  RxExceptionsExceptions_initialize();
  RxExceptionsExceptions_throwIfFatalWithNSException_(t);
  [((id<RxObserver>) nil_chk(o)) onErrorWithNSException:t];
}

void RxExceptionsExceptions_throwOrReportWithNSException_withRxSingleSubscriber_(NSException *throwable, RxSingleSubscriber *subscriber) {
  RxExceptionsExceptions_initialize();
  RxExceptionsExceptions_throwIfFatalWithNSException_(throwable);
  [((RxSingleSubscriber *) nil_chk(subscriber)) onErrorWithNSException:throwable];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsExceptions)
