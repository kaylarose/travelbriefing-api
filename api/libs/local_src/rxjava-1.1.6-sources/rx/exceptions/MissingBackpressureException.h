//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/MissingBackpressureException.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxExceptionsMissingBackpressureException")
#ifdef RESTRICT_RxExceptionsMissingBackpressureException
#define INCLUDE_ALL_RxExceptionsMissingBackpressureException 0
#else
#define INCLUDE_ALL_RxExceptionsMissingBackpressureException 1
#endif
#undef RESTRICT_RxExceptionsMissingBackpressureException

#if !defined (RxExceptionsMissingBackpressureException_) && (INCLUDE_ALL_RxExceptionsMissingBackpressureException || defined(INCLUDE_RxExceptionsMissingBackpressureException))
#define RxExceptionsMissingBackpressureException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

/*!
 @brief Represents an exception that indicates that a Subscriber or operator attempted to apply reactive pull
 backpressure to an Observable that does not implement it.
 <p>
 If an Observable has not been written to support reactive pull backpressure (such support is not a
 requirement for Observables), you can apply one of the following operators to it, each of which forces a
 simple form of backpressure behavior:
 <dl>
 <dt><code>onBackpressureBuffer</code></dt>
 <dd>maintains a buffer of all emissions from the source Observable and emits them to downstream Subscribers
 according to the requests they generate</dd>
 <dt><code>onBackpressureDrop</code></dt>
 <dd>drops emissions from the source Observable unless there is a pending request from a downstream
 Subscriber, in which case it will emit enough items to fulfill the request</dd>
 </dl>
 If you do not apply either of these operators to an Observable that does not support backpressure, and if
 either you as the Subscriber or some operator between you and the Observable attempts to apply reactive pull
 backpressure, you will encounter a <code>MissingBackpressureException</code> which you will be notified of via
 your <code>onError</code> callback.
 <p>
 There are, however, other options. You can throttle an over-producing Observable with operators like
 <code>sample</code>/<code>throttleLast</code>, <code>throttleFirst</code>, or <code>throttleWithTimeout</code>/<code>debounce</code>.
 You can also take the large number of items emitted by an over-producing Observable and package them into
 a smaller set of emissions by using operators like <code>buffer</code> and <code>window</code>.
 <p>
 For a more complete discussion of the options available to you for dealing with issues related to
 backpressure and flow control in RxJava, see
 <a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure">RxJava wiki: Backpressure</a>.
 */
@interface RxExceptionsMissingBackpressureException : JavaLangException

#pragma mark Public

/*!
 @brief Constructs the exception without any custom message.
 */
- (instancetype)init;

/*!
 @brief Constructs the exception with the given customized message.
 @param message the customized message
 */
- (instancetype)initWithNSString:(NSString *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsMissingBackpressureException)

FOUNDATION_EXPORT void RxExceptionsMissingBackpressureException_init(RxExceptionsMissingBackpressureException *self);

FOUNDATION_EXPORT RxExceptionsMissingBackpressureException *new_RxExceptionsMissingBackpressureException_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsMissingBackpressureException *create_RxExceptionsMissingBackpressureException_init();

FOUNDATION_EXPORT void RxExceptionsMissingBackpressureException_initWithNSString_(RxExceptionsMissingBackpressureException *self, NSString *message);

FOUNDATION_EXPORT RxExceptionsMissingBackpressureException *new_RxExceptionsMissingBackpressureException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsMissingBackpressureException *create_RxExceptionsMissingBackpressureException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsMissingBackpressureException)

#endif

#pragma pop_macro("INCLUDE_ALL_RxExceptionsMissingBackpressureException")
