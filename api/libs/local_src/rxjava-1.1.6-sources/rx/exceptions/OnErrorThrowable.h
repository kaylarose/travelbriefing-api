//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/OnErrorThrowable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxExceptionsOnErrorThrowable")
#ifdef RESTRICT_RxExceptionsOnErrorThrowable
#define INCLUDE_ALL_RxExceptionsOnErrorThrowable 0
#else
#define INCLUDE_ALL_RxExceptionsOnErrorThrowable 1
#endif
#undef RESTRICT_RxExceptionsOnErrorThrowable

#if !defined (RxExceptionsOnErrorThrowable_) && (INCLUDE_ALL_RxExceptionsOnErrorThrowable || defined(INCLUDE_RxExceptionsOnErrorThrowable))
#define RxExceptionsOnErrorThrowable_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

/*!
 @brief Represents a <code>Throwable</code> that an <code>Observable</code> might notify its subscribers of, but that then can
 be handled by an operator that is designed to recover from or react appropriately to such an error.
 You can
 recover more information from an <code>OnErrorThrowable</code> than is found in a typical <code>Throwable</code>, such
 as the item the <code>Observable</code> was trying to emit at the time the error was encountered.
 */
@interface RxExceptionsOnErrorThrowable : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Adds the given item as the final cause of the given <code>Throwable</code>, wrapped in <code>OnNextValue</code>
 (which extends <code>RuntimeException</code>).
 @param e
 the <code>Throwable</code> to which you want to add a cause
 @param value
 the item you want to add to <code>e</code> as the cause of the <code>Throwable</code>
 @return the same <code>Throwable</code> (<code>e</code>) that was passed in, with <code>value</code> added to it as a
 cause
 */
+ (NSException *)addValueAsLastCauseWithNSException:(NSException *)e
                                             withId:(id)value;

/*!
 @brief Converts a <code>Throwable</code> into an <code>OnErrorThrowable</code>.
 @param t
 the <code>Throwable</code> to convert; if null, a NullPointerException is constructed
 @return an <code>OnErrorThrowable</code> representation of <code>t</code>
 */
+ (RxExceptionsOnErrorThrowable *)fromWithNSException:(NSException *)t;

/*!
 @brief Get the value associated with this <code>OnErrorThrowable</code>
 @return the value associated with this <code>OnErrorThrowable</code> (or <code>null</code> if there is none)
 */
- (id)getValue;

/*!
 @brief Indicates whether or not there is a value associated with this <code>OnErrorThrowable</code>
 @return <code>true</code> if there is a value associated with this <code>OnErrorThrowable</code>, otherwise
 <code>false</code>
 */
- (jboolean)isValueNull;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnErrorThrowable)

FOUNDATION_EXPORT RxExceptionsOnErrorThrowable *RxExceptionsOnErrorThrowable_fromWithNSException_(NSException *t);

FOUNDATION_EXPORT NSException *RxExceptionsOnErrorThrowable_addValueAsLastCauseWithNSException_withId_(NSException *e, id value);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsOnErrorThrowable)

#endif

#if !defined (RxExceptionsOnErrorThrowable_OnNextValue_) && (INCLUDE_ALL_RxExceptionsOnErrorThrowable || defined(INCLUDE_RxExceptionsOnErrorThrowable_OnNextValue))
#define RxExceptionsOnErrorThrowable_OnNextValue_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

/*!
 @brief Represents an exception that was encountered while trying to emit an item from an Observable, and
 tries to preserve that item for future use and/or reporting.
 */
@interface RxExceptionsOnErrorThrowable_OnNextValue : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Create an <code>OnNextValue</code> exception and include in its error message a string representation of
 the item that was intended to be emitted at the time the exception was handled.
 @param value
 the item that the Observable was trying to emit at the time of the exception
 */
- (instancetype)initWithId:(id)value;

/*!
 @brief Retrieve the item that the Observable was trying to emit at the time this exception occurred.
 @return the item that the Observable was trying to emit at the time of the exception
 */
- (id)getValue;

#pragma mark Package-Private

/*!
 @brief Render the object if it is a basic type.
 This avoids the library making potentially expensive
 or calls to toString() which may throw exceptions.
 If a specific behavior has been defined in the <code>RxJavaErrorHandler</code> plugin, some types
 may also have a specific rendering. Non-primitive types not managed by the plugin are rendered
 as the classname of the object.
 <p>
 See PR #1401 and Issue #2468 for details.
 @param value
 the item that the Observable was trying to emit at the time of the exception
 @return a string version of the object if primitive or managed through error plugin,
 otherwise the classname of the object
 */
+ (NSString *)renderValueWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnErrorThrowable_OnNextValue)

FOUNDATION_EXPORT void RxExceptionsOnErrorThrowable_OnNextValue_initWithId_(RxExceptionsOnErrorThrowable_OnNextValue *self, id value);

FOUNDATION_EXPORT RxExceptionsOnErrorThrowable_OnNextValue *new_RxExceptionsOnErrorThrowable_OnNextValue_initWithId_(id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsOnErrorThrowable_OnNextValue *create_RxExceptionsOnErrorThrowable_OnNextValue_initWithId_(id value);

FOUNDATION_EXPORT NSString *RxExceptionsOnErrorThrowable_OnNextValue_renderValueWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsOnErrorThrowable_OnNextValue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxExceptionsOnErrorThrowable")
