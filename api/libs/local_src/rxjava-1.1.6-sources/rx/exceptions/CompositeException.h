//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/CompositeException.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxExceptionsCompositeException")
#ifdef RESTRICT_RxExceptionsCompositeException
#define INCLUDE_ALL_RxExceptionsCompositeException 0
#else
#define INCLUDE_ALL_RxExceptionsCompositeException 1
#endif
#undef RESTRICT_RxExceptionsCompositeException

#if !defined (RxExceptionsCompositeException_) && (INCLUDE_ALL_RxExceptionsCompositeException || defined(INCLUDE_RxExceptionsCompositeException))
#define RxExceptionsCompositeException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class IOSObjectArray;
@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief Represents an exception that is a composite of one or more other exceptions.
 A <code>CompositeException</code>
 does not modify the structure of any exception it wraps, but at print-time it iterates through the list of
 Throwables contained in the composite in order to print them all.
 Its invariant is to contain an immutable, ordered (by insertion order), unique list of non-composite
 exceptions. You can retrieve individual exceptions in this list with <code>getExceptions()</code>.
 The <code>printStackTrace()</code> implementation handles the StackTrace in a customized way instead of using
 <code>getCause()</code> so that it can avoid circular references.
 If you invoke <code>getCause()</code>, it will lazily create the causal chain but will stop if it finds any
 Throwable in the chain that it has already seen.
 */
@interface RxExceptionsCompositeException : JavaLangRuntimeException

#pragma mark Public

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)errors;

/*!
 @brief Constructs a CompositeException with the given prefix and error collection.
 @param messagePrefix the prefix to use (actually unused)
 @param errors the collection of errors
 */
- (instancetype)initWithNSString:(NSString *)messagePrefix
          withJavaUtilCollection:(id<JavaUtilCollection>)errors;

/*!
 @brief Constructs a CompositeException instance with the supplied initial Throwables.
 @param errors the array of Throwables
 */
- (instancetype)initWithNSExceptionArray:(IOSObjectArray *)errors;

- (NSException *)getCause;

/*!
 @brief Retrieves the list of exceptions that make up the <code>CompositeException</code>
 @return the exceptions that make up the <code>CompositeException</code>, as a <code>List</code> of <code>Throwable</code>s
 */
- (id<JavaUtilList>)getExceptions;

- (NSString *)getMessage;

/*!
 @brief All of the following <code>printStackTrace</code> functionality is derived from JDK <code>Throwable</code>
 <code>printStackTrace</code>.
 In particular, the <code>PrintStreamOrWriter</code> abstraction is copied wholesale.
 Changes from the official JDK implementation:<ul>
 <li>no infinite loop detection</li>
 <li>smaller critical section holding <code>PrintStream</code> lock</li>
 <li>explicit knowledge about the exceptions <code>List</code> that this loops through</li>
 </ul>
 */
- (void)printStackTrace;

- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s;

- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException)

FOUNDATION_EXPORT void RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(RxExceptionsCompositeException *self, NSString *messagePrefix, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT void RxExceptionsCompositeException_initWithJavaUtilCollection_(RxExceptionsCompositeException *self, id<JavaUtilCollection> errors);

FOUNDATION_EXPORT RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors);

FOUNDATION_EXPORT void RxExceptionsCompositeException_initWithNSExceptionArray_(RxExceptionsCompositeException *self, IOSObjectArray *errors);

FOUNDATION_EXPORT RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithNSExceptionArray_(IOSObjectArray *errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithNSExceptionArray_(IOSObjectArray *errors);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException)

#endif

#if !defined (RxExceptionsCompositeException_CompositeExceptionCausalChain_) && (INCLUDE_ALL_RxExceptionsCompositeException || defined(INCLUDE_RxExceptionsCompositeException_CompositeExceptionCausalChain))
#define RxExceptionsCompositeException_CompositeExceptionCausalChain_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@interface RxExceptionsCompositeException_CompositeExceptionCausalChain : JavaLangRuntimeException

+ (NSString *)MESSAGE;

+ (void)setMESSAGE:(NSString *)value;

#pragma mark Public

- (NSString *)getMessage;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException_CompositeExceptionCausalChain)

inline NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_get_MESSAGE();
inline NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_set_MESSAGE(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
J2OBJC_STATIC_FIELD_OBJ(RxExceptionsCompositeException_CompositeExceptionCausalChain, MESSAGE, NSString *)

FOUNDATION_EXPORT void RxExceptionsCompositeException_CompositeExceptionCausalChain_init(RxExceptionsCompositeException_CompositeExceptionCausalChain *self);

FOUNDATION_EXPORT RxExceptionsCompositeException_CompositeExceptionCausalChain *new_RxExceptionsCompositeException_CompositeExceptionCausalChain_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsCompositeException_CompositeExceptionCausalChain *create_RxExceptionsCompositeException_CompositeExceptionCausalChain_init();

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException_CompositeExceptionCausalChain)

#endif

#pragma pop_macro("INCLUDE_ALL_RxExceptionsCompositeException")
