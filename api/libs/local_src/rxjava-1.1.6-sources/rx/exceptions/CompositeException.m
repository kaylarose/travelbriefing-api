//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/CompositeException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "rx/exceptions/CompositeException.h"

@class RxExceptionsCompositeException_PrintStreamOrWriter;

@interface RxExceptionsCompositeException () {
 @public
  id<JavaUtilList> exceptions_;
  NSString *message_;
  NSException *cause_CompositeException_;
}

/*!
 @brief Special handling for printing out a <code>CompositeException</code>.
 Loops through all inner exceptions and prints them out.
 @param s
 stream to print to
 */
- (void)printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter:(RxExceptionsCompositeException_PrintStreamOrWriter *)s;

- (void)appendStackTraceWithJavaLangStringBuilder:(JavaLangStringBuilder *)bldr
                                  withNSException:(NSException *)ex
                                     withNSString:(NSString *)prefix;

- (id<JavaUtilList>)getListOfCausesWithNSException:(NSException *)ex;

/*!
 @brief Returns the root cause of <code>e</code>.
 If <code>e.getCause()</code> returns  or <code>e</code>, just return <code>e</code> itself.
 @param e the <code>Throwable</code> <code>e</code>.
 @return The root cause of <code>e</code>. If <code>e.getCause()</code> returns  or <code>e</code>, just return <code>e</code> itself.
 */
- (NSException *)getRootCauseWithNSException:(NSException *)e;

@end

J2OBJC_FIELD_SETTER(RxExceptionsCompositeException, exceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxExceptionsCompositeException, message_, NSString *)
J2OBJC_FIELD_SETTER(RxExceptionsCompositeException, cause_CompositeException_, NSException *)

inline jlong RxExceptionsCompositeException_get_serialVersionUID();
#define RxExceptionsCompositeException_serialVersionUID 3026362227162912146LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsCompositeException, serialVersionUID, jlong)

__attribute__((unused)) static void RxExceptionsCompositeException_printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter_(RxExceptionsCompositeException *self, RxExceptionsCompositeException_PrintStreamOrWriter *s);

__attribute__((unused)) static void RxExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withNSException_withNSString_(RxExceptionsCompositeException *self, JavaLangStringBuilder *bldr, NSException *ex, NSString *prefix);

__attribute__((unused)) static id<JavaUtilList> RxExceptionsCompositeException_getListOfCausesWithNSException_(RxExceptionsCompositeException *self, NSException *ex);

__attribute__((unused)) static NSException *RxExceptionsCompositeException_getRootCauseWithNSException_(RxExceptionsCompositeException *self, NSException *e);

__attribute__((unused)) static IOSObjectArray *RxExceptionsCompositeException__Annotations$0();

@interface RxExceptionsCompositeException_PrintStreamOrWriter : NSObject

/*!
 @brief Returns the object to be locked when using this StreamOrWriter
 */
- (id)lock;

/*!
 @brief Prints the specified string as a line on this StreamOrWriter
 */
- (void)printlnWithId:(id)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException_PrintStreamOrWriter)

__attribute__((unused)) static void RxExceptionsCompositeException_PrintStreamOrWriter_init(RxExceptionsCompositeException_PrintStreamOrWriter *self);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException_PrintStreamOrWriter)

/*!
 @brief Same abstraction and implementation as in JDK to allow PrintStream and PrintWriter to share implementation
 */
@interface RxExceptionsCompositeException_WrappedPrintStream : RxExceptionsCompositeException_PrintStreamOrWriter {
 @public
  JavaIoPrintStream *printStream_;
}

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)printStream;

- (id)lock;

- (void)printlnWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException_WrappedPrintStream)

J2OBJC_FIELD_SETTER(RxExceptionsCompositeException_WrappedPrintStream, printStream_, JavaIoPrintStream *)

__attribute__((unused)) static void RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(RxExceptionsCompositeException_WrappedPrintStream *self, JavaIoPrintStream *printStream);

__attribute__((unused)) static RxExceptionsCompositeException_WrappedPrintStream *new_RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsCompositeException_WrappedPrintStream *create_RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException_WrappedPrintStream)

@interface RxExceptionsCompositeException_WrappedPrintWriter : RxExceptionsCompositeException_PrintStreamOrWriter {
 @public
  JavaIoPrintWriter *printWriter_;
}

- (instancetype)initWithJavaIoPrintWriter:(JavaIoPrintWriter *)printWriter;

- (id)lock;

- (void)printlnWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsCompositeException_WrappedPrintWriter)

J2OBJC_FIELD_SETTER(RxExceptionsCompositeException_WrappedPrintWriter, printWriter_, JavaIoPrintWriter *)

__attribute__((unused)) static void RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(RxExceptionsCompositeException_WrappedPrintWriter *self, JavaIoPrintWriter *printWriter);

__attribute__((unused)) static RxExceptionsCompositeException_WrappedPrintWriter *new_RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxExceptionsCompositeException_WrappedPrintWriter *create_RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsCompositeException_WrappedPrintWriter)

inline jlong RxExceptionsCompositeException_CompositeExceptionCausalChain_get_serialVersionUID();
#define RxExceptionsCompositeException_CompositeExceptionCausalChain_serialVersionUID 3875212506787802066LL
J2OBJC_STATIC_FIELD_CONSTANT(RxExceptionsCompositeException_CompositeExceptionCausalChain, serialVersionUID, jlong)

@implementation RxExceptionsCompositeException

- (instancetype)initWithNSString:(NSString *)messagePrefix
          withJavaUtilCollection:(id<JavaUtilCollection>)errors {
  RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(self, messagePrefix, errors);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)errors {
  RxExceptionsCompositeException_initWithJavaUtilCollection_(self, errors);
  return self;
}

- (instancetype)initWithNSExceptionArray:(IOSObjectArray *)errors {
  RxExceptionsCompositeException_initWithNSExceptionArray_(self, errors);
  return self;
}

- (id<JavaUtilList>)getExceptions {
  return exceptions_;
}

- (NSString *)getMessage {
  return message_;
}

- (NSException *)getCause {
  @synchronized(self) {
    if (cause_CompositeException_ == nil) {
      RxExceptionsCompositeException_CompositeExceptionCausalChain *_cause = new_RxExceptionsCompositeException_CompositeExceptionCausalChain_init();
      id<JavaUtilSet> seenCauses = new_JavaUtilHashSet_init();
      NSException *chain = _cause;
      for (NSException * __strong e in nil_chk(exceptions_)) {
        if ([seenCauses containsWithId:e]) {
          continue;
        }
        [seenCauses addWithId:e];
        id<JavaUtilList> listOfCauses = RxExceptionsCompositeException_getListOfCausesWithNSException_(self, e);
        for (NSException * __strong child in nil_chk(listOfCauses)) {
          if ([seenCauses containsWithId:child]) {
            e = new_JavaLangRuntimeException_initWithNSString_(@"Duplicate found in causal chain so cropping to prevent loop ...");
            continue;
          }
          [seenCauses addWithId:child];
        }
        @try {
          (void) [((NSException *) nil_chk(chain)) initCauseWithNSException:e];
        }
        @catch (NSException *t) {
        }
        chain = RxExceptionsCompositeException_getRootCauseWithNSException_(self, chain);
      }
      cause_CompositeException_ = _cause;
    }
    return cause_CompositeException_;
  }
}

- (void)printStackTrace {
  [self printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s {
  RxExceptionsCompositeException_printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter_(self, new_RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(s));
}

- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s {
  RxExceptionsCompositeException_printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter_(self, new_RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(s));
}

- (void)printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter:(RxExceptionsCompositeException_PrintStreamOrWriter *)s {
  RxExceptionsCompositeException_printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter_(self, s);
}

- (void)appendStackTraceWithJavaLangStringBuilder:(JavaLangStringBuilder *)bldr
                                  withNSException:(NSException *)ex
                                     withNSString:(NSString *)prefix {
  RxExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withNSException_withNSString_(self, bldr, ex, prefix);
}

- (id<JavaUtilList>)getListOfCausesWithNSException:(NSException *)ex {
  return RxExceptionsCompositeException_getListOfCausesWithNSException_(self, ex);
}

- (NSException *)getRootCauseWithNSException:(NSException *)e {
  return RxExceptionsCompositeException_getRootCauseWithNSException_(self, e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilCollection:", NULL, 0x1, -1, 0, -1, 1, 2, -1 },
    { "initWithJavaUtilCollection:", NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { "initWithNSExceptionArray:", NULL, 0x81, -1, 5, -1, -1, -1, -1 },
    { "getExceptions", "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { "getMessage", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getCause", "LNSException;", 0x21, -1, -1, -1, -1, -1, -1 },
    { "printStackTrace", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "printStackTraceWithJavaIoPrintStream:", "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { "printStackTraceWithJavaIoPrintWriter:", "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { "printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter:", "V", 0x2, 7, 10, -1, -1, -1, -1 },
    { "appendStackTraceWithJavaLangStringBuilder:withNSException:withNSString:", "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { "getListOfCausesWithNSException:", "LJavaUtilList;", 0x2, 13, 14, -1, 15, -1, -1 },
    { "getRootCauseWithNSException:", "LNSException;", 0x2, 16, 14, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxExceptionsCompositeException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "exceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "message_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cause_CompositeException_", "LNSException;", .constantValue.asLong = 0, 0x2, 18, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<+Ljava/lang/Throwable;>;)V", (void *)&RxExceptionsCompositeException__Annotations$0, "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljava/lang/Throwable;>;)V", "[LNSException;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "printStackTrace", "LJavaIoPrintStream;", "LJavaIoPrintWriter;", "LRxExceptionsCompositeException_PrintStreamOrWriter;", "appendStackTrace", "LJavaLangStringBuilder;LNSException;LNSString;", "getListOfCauses", "LNSException;", "(Ljava/lang/Throwable;)Ljava/util/List<Ljava/lang/Throwable;>;", "getRootCause", "Ljava/util/List<Ljava/lang/Throwable;>;", "cause", "LRxExceptionsCompositeException_PrintStreamOrWriter;LRxExceptionsCompositeException_WrappedPrintStream;LRxExceptionsCompositeException_WrappedPrintWriter;LRxExceptionsCompositeException_CompositeExceptionCausalChain;" };
  static const J2ObjcClassInfo _RxExceptionsCompositeException = { "CompositeException", "rx.exceptions", ptrTable, methods, fields, 7, 0x11, 13, 4, -1, 19, -1, -1, -1 };
  return &_RxExceptionsCompositeException;
}

@end

void RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(RxExceptionsCompositeException *self, NSString *messagePrefix, id<JavaUtilCollection> errors) {
  JavaLangRuntimeException_init(self);
  self->cause_CompositeException_ = nil;
  id<JavaUtilSet> deDupedExceptions = new_JavaUtilLinkedHashSet_init();
  id<JavaUtilList> _exceptions = new_JavaUtilArrayList_init();
  if (errors != nil) {
    for (NSException * __strong ex in errors) {
      if ([ex isKindOfClass:[RxExceptionsCompositeException class]]) {
        [deDupedExceptions addAllWithJavaUtilCollection:[((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(ex, [RxExceptionsCompositeException class])))) getExceptions]];
      }
      else if (ex != nil) {
        [deDupedExceptions addWithId:ex];
      }
      else {
        [deDupedExceptions addWithId:new_JavaLangNullPointerException_init()];
      }
    }
  }
  else {
    [deDupedExceptions addWithId:new_JavaLangNullPointerException_init()];
  }
  [_exceptions addAllWithJavaUtilCollection:deDupedExceptions];
  self->exceptions_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(_exceptions);
  self->message_ = JreStrcat("I$", [((id<JavaUtilList>) nil_chk(self->exceptions_)) size], @" exceptions occurred. ");
}

RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors) {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException, initWithNSString_withJavaUtilCollection_, messagePrefix, errors)
}

RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(NSString *messagePrefix, id<JavaUtilCollection> errors) {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException, initWithNSString_withJavaUtilCollection_, messagePrefix, errors)
}

void RxExceptionsCompositeException_initWithJavaUtilCollection_(RxExceptionsCompositeException *self, id<JavaUtilCollection> errors) {
  RxExceptionsCompositeException_initWithNSString_withJavaUtilCollection_(self, nil, errors);
}

RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors) {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException, initWithJavaUtilCollection_, errors)
}

RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithJavaUtilCollection_(id<JavaUtilCollection> errors) {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException, initWithJavaUtilCollection_, errors)
}

void RxExceptionsCompositeException_initWithNSExceptionArray_(RxExceptionsCompositeException *self, IOSObjectArray *errors) {
  JavaLangRuntimeException_init(self);
  self->cause_CompositeException_ = nil;
  id<JavaUtilSet> deDupedExceptions = new_JavaUtilLinkedHashSet_init();
  id<JavaUtilList> _exceptions = new_JavaUtilArrayList_init();
  if (errors != nil) {
    {
      IOSObjectArray *a__ = errors;
      NSException * const *b__ = a__->buffer_;
      NSException * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSException *ex = *b__++;
        if ([ex isKindOfClass:[RxExceptionsCompositeException class]]) {
          [deDupedExceptions addAllWithJavaUtilCollection:[((RxExceptionsCompositeException *) nil_chk(((RxExceptionsCompositeException *) cast_chk(ex, [RxExceptionsCompositeException class])))) getExceptions]];
        }
        else if (ex != nil) {
          [deDupedExceptions addWithId:ex];
        }
        else {
          [deDupedExceptions addWithId:new_JavaLangNullPointerException_init()];
        }
      }
    }
  }
  else {
    [deDupedExceptions addWithId:new_JavaLangNullPointerException_init()];
  }
  [_exceptions addAllWithJavaUtilCollection:deDupedExceptions];
  self->exceptions_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(_exceptions);
  self->message_ = JreStrcat("I$", [((id<JavaUtilList>) nil_chk(self->exceptions_)) size], @" exceptions occurred. ");
}

RxExceptionsCompositeException *new_RxExceptionsCompositeException_initWithNSExceptionArray_(IOSObjectArray *errors) {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException, initWithNSExceptionArray_, errors)
}

RxExceptionsCompositeException *create_RxExceptionsCompositeException_initWithNSExceptionArray_(IOSObjectArray *errors) {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException, initWithNSExceptionArray_, errors)
}

void RxExceptionsCompositeException_printStackTraceWithRxExceptionsCompositeException_PrintStreamOrWriter_(RxExceptionsCompositeException *self, RxExceptionsCompositeException_PrintStreamOrWriter *s) {
  JavaLangStringBuilder *bldr = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([bldr appendWithId:self])) appendWithNSString:@"\n"];
  {
    IOSObjectArray *a__ = [self getStackTrace];
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *myStackElement = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([bldr appendWithNSString:@"\tat "])) appendWithId:myStackElement])) appendWithNSString:@"\n"];
    }
  }
  jint i = 1;
  for (NSException * __strong ex in nil_chk(self->exceptions_)) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([bldr appendWithNSString:@"  ComposedException "])) appendWithInt:i])) appendWithNSString:@" :"])) appendWithNSString:@"\n"];
    RxExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withNSException_withNSString_(self, bldr, ex, @"\t");
    i++;
  }
  @synchronized([((RxExceptionsCompositeException_PrintStreamOrWriter *) nil_chk(s)) lock]) {
    [s printlnWithId:[bldr description]];
  }
}

void RxExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withNSException_withNSString_(RxExceptionsCompositeException *self, JavaLangStringBuilder *bldr, NSException *ex, NSString *prefix) {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(bldr)) appendWithNSString:prefix])) appendWithId:ex])) appendWithNSString:@"\n"];
  {
    IOSObjectArray *a__ = [((NSException *) nil_chk(ex)) getStackTrace];
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *stackElement = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([bldr appendWithNSString:@"\t\tat "])) appendWithId:stackElement])) appendWithNSString:@"\n"];
    }
  }
  if ([ex getCause] != nil) {
    (void) [bldr appendWithNSString:@"\tCaused by: "];
    RxExceptionsCompositeException_appendStackTraceWithJavaLangStringBuilder_withNSException_withNSString_(self, bldr, [ex getCause], @"");
  }
}

id<JavaUtilList> RxExceptionsCompositeException_getListOfCausesWithNSException_(RxExceptionsCompositeException *self, NSException *ex) {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  NSException *root = [((NSException *) nil_chk(ex)) getCause];
  if (root == nil || root == ex) {
    return list;
  }
  else {
    while (true) {
      [list addWithId:root];
      NSException *cause = [((NSException *) nil_chk(root)) getCause];
      if (cause == nil || cause == root) {
        return list;
      }
      else {
        root = [root getCause];
      }
    }
  }
}

NSException *RxExceptionsCompositeException_getRootCauseWithNSException_(RxExceptionsCompositeException *self, NSException *e) {
  NSException *root = [((NSException *) nil_chk(e)) getCause];
  if (root == nil || root == e) {
    return e;
  }
  else {
    while (true) {
      NSException *cause = [((NSException *) nil_chk(root)) getCause];
      if (cause == nil || cause == root) {
        return root;
      }
      root = [root getCause];
    }
  }
}

IOSObjectArray *RxExceptionsCompositeException__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsCompositeException)

@implementation RxExceptionsCompositeException_PrintStreamOrWriter

- (id)lock {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)printlnWithId:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsCompositeException_PrintStreamOrWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "lock", "LNSObject;", 0x400, -1, -1, -1, -1, -1, -1 },
    { "printlnWithId:", "V", 0x400, 0, 1, -1, -1, -1, -1 },
    { "init", NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "println", "LNSObject;", "LRxExceptionsCompositeException;" };
  static const J2ObjcClassInfo _RxExceptionsCompositeException_PrintStreamOrWriter = { "PrintStreamOrWriter", "rx.exceptions", ptrTable, methods, NULL, 7, 0x40a, 3, 0, 2, -1, -1, -1, -1 };
  return &_RxExceptionsCompositeException_PrintStreamOrWriter;
}

@end

void RxExceptionsCompositeException_PrintStreamOrWriter_init(RxExceptionsCompositeException_PrintStreamOrWriter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsCompositeException_PrintStreamOrWriter)

@implementation RxExceptionsCompositeException_WrappedPrintStream

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)printStream {
  RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(self, printStream);
  return self;
}

- (id)lock {
  return printStream_;
}

- (void)printlnWithId:(id)o {
  [((JavaIoPrintStream *) nil_chk(printStream_)) printlnWithId:o];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoPrintStream:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { "lock", "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { "printlnWithId:", "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "printStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintStream;", "println", "LNSObject;", "LRxExceptionsCompositeException;" };
  static const J2ObjcClassInfo _RxExceptionsCompositeException_WrappedPrintStream = { "WrappedPrintStream", "rx.exceptions", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_RxExceptionsCompositeException_WrappedPrintStream;
}

@end

void RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(RxExceptionsCompositeException_WrappedPrintStream *self, JavaIoPrintStream *printStream) {
  RxExceptionsCompositeException_PrintStreamOrWriter_init(self);
  self->printStream_ = printStream;
}

RxExceptionsCompositeException_WrappedPrintStream *new_RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream) {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException_WrappedPrintStream, initWithJavaIoPrintStream_, printStream)
}

RxExceptionsCompositeException_WrappedPrintStream *create_RxExceptionsCompositeException_WrappedPrintStream_initWithJavaIoPrintStream_(JavaIoPrintStream *printStream) {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException_WrappedPrintStream, initWithJavaIoPrintStream_, printStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsCompositeException_WrappedPrintStream)

@implementation RxExceptionsCompositeException_WrappedPrintWriter

- (instancetype)initWithJavaIoPrintWriter:(JavaIoPrintWriter *)printWriter {
  RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(self, printWriter);
  return self;
}

- (id)lock {
  return printWriter_;
}

- (void)printlnWithId:(id)o {
  [((JavaIoPrintWriter *) nil_chk(printWriter_)) printlnWithId:o];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoPrintWriter:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { "lock", "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { "printlnWithId:", "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "printWriter_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintWriter;", "println", "LNSObject;", "LRxExceptionsCompositeException;" };
  static const J2ObjcClassInfo _RxExceptionsCompositeException_WrappedPrintWriter = { "WrappedPrintWriter", "rx.exceptions", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_RxExceptionsCompositeException_WrappedPrintWriter;
}

@end

void RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(RxExceptionsCompositeException_WrappedPrintWriter *self, JavaIoPrintWriter *printWriter) {
  RxExceptionsCompositeException_PrintStreamOrWriter_init(self);
  self->printWriter_ = printWriter;
}

RxExceptionsCompositeException_WrappedPrintWriter *new_RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter) {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException_WrappedPrintWriter, initWithJavaIoPrintWriter_, printWriter)
}

RxExceptionsCompositeException_WrappedPrintWriter *create_RxExceptionsCompositeException_WrappedPrintWriter_initWithJavaIoPrintWriter_(JavaIoPrintWriter *printWriter) {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException_WrappedPrintWriter, initWithJavaIoPrintWriter_, printWriter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsCompositeException_WrappedPrintWriter)

NSString *RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE = @"Chain of Causes for CompositeException In Order Received =>";

@implementation RxExceptionsCompositeException_CompositeExceptionCausalChain

+ (NSString *)MESSAGE {
  return RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
}

+ (void)setMESSAGE:(NSString *)value {
  RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE = value;
}

- (NSString *)getMessage {
  return RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxExceptionsCompositeException_CompositeExceptionCausalChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMessage", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxExceptionsCompositeException_CompositeExceptionCausalChain_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x8, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &RxExceptionsCompositeException_CompositeExceptionCausalChain_MESSAGE, "LRxExceptionsCompositeException;" };
  static const J2ObjcClassInfo _RxExceptionsCompositeException_CompositeExceptionCausalChain = { "CompositeExceptionCausalChain", "rx.exceptions", ptrTable, methods, fields, 7, 0x18, 2, 2, 1, -1, -1, -1, -1 };
  return &_RxExceptionsCompositeException_CompositeExceptionCausalChain;
}

@end

void RxExceptionsCompositeException_CompositeExceptionCausalChain_init(RxExceptionsCompositeException_CompositeExceptionCausalChain *self) {
  JavaLangRuntimeException_init(self);
}

RxExceptionsCompositeException_CompositeExceptionCausalChain *new_RxExceptionsCompositeException_CompositeExceptionCausalChain_init() {
  J2OBJC_NEW_IMPL(RxExceptionsCompositeException_CompositeExceptionCausalChain, init)
}

RxExceptionsCompositeException_CompositeExceptionCausalChain *create_RxExceptionsCompositeException_CompositeExceptionCausalChain_init() {
  J2OBJC_CREATE_IMPL(RxExceptionsCompositeException_CompositeExceptionCausalChain, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxExceptionsCompositeException_CompositeExceptionCausalChain)
