//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/exceptions/OnCompletedFailedException.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxExceptionsOnCompletedFailedException")
#ifdef RESTRICT_RxExceptionsOnCompletedFailedException
#define INCLUDE_ALL_RxExceptionsOnCompletedFailedException 0
#else
#define INCLUDE_ALL_RxExceptionsOnCompletedFailedException 1
#endif
#undef RESTRICT_RxExceptionsOnCompletedFailedException

#if !defined (RxExceptionsOnCompletedFailedException_) && (INCLUDE_ALL_RxExceptionsOnCompletedFailedException || defined(INCLUDE_RxExceptionsOnCompletedFailedException))
#define RxExceptionsOnCompletedFailedException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

/*!
 @brief Represents an exception used to re-throw errors thrown from <code>Subscriber.onCompleted()</code>.
 */
@interface RxExceptionsOnCompletedFailedException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Customizes the <code>Throwable</code> with a custom message and wraps it before it is to be re-thrown as an
 <code>OnCompletedFailedException</code>.
 @param message
 the message to assign to the <code>Throwable</code> to re-throw
 @param throwable
 the <code>Throwable</code> to re-throw; if null, a NullPointerException is constructed
 */
- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)throwable;

/*!
 @brief Wraps the <code>Throwable</code> before it is to be re-thrown as an <code>OnCompletedFailedException</code>.
 @param throwable
 the <code>Throwable</code> to re-throw; if null, a NullPointerException is constructed
 */
- (instancetype)initWithNSException:(NSException *)throwable;

@end

J2OBJC_EMPTY_STATIC_INIT(RxExceptionsOnCompletedFailedException)

FOUNDATION_EXPORT void RxExceptionsOnCompletedFailedException_initWithNSException_(RxExceptionsOnCompletedFailedException *self, NSException *throwable);

FOUNDATION_EXPORT RxExceptionsOnCompletedFailedException *new_RxExceptionsOnCompletedFailedException_initWithNSException_(NSException *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsOnCompletedFailedException *create_RxExceptionsOnCompletedFailedException_initWithNSException_(NSException *throwable);

FOUNDATION_EXPORT void RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(RxExceptionsOnCompletedFailedException *self, NSString *message, NSException *throwable);

FOUNDATION_EXPORT RxExceptionsOnCompletedFailedException *new_RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(NSString *message, NSException *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxExceptionsOnCompletedFailedException *create_RxExceptionsOnCompletedFailedException_initWithNSString_withNSException_(NSString *message, NSException *throwable);

J2OBJC_TYPE_LITERAL_HEADER(RxExceptionsOnCompletedFailedException)

#endif

#pragma pop_macro("INCLUDE_ALL_RxExceptionsOnCompletedFailedException")
