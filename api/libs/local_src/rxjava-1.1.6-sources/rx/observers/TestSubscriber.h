//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observers/TestSubscriber.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObserversTestSubscriber")
#ifdef RESTRICT_RxObserversTestSubscriber
#define INCLUDE_ALL_RxObserversTestSubscriber 0
#else
#define INCLUDE_ALL_RxObserversTestSubscriber 1
#endif
#undef RESTRICT_RxObserversTestSubscriber

#if !defined (RxObserversTestSubscriber_) && (INCLUDE_ALL_RxObserversTestSubscriber || defined(INCLUDE_RxObserversTestSubscriber))
#define RxObserversTestSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangThread;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilList;
@protocol RxObserver;

/*!
 @brief A <code>TestSubscriber</code> is a variety of <code>Subscriber</code> that you can use for unit testing, to perform
 assertions, inspect received events, or wrap a mocked <code>Subscriber</code>.
 */
@interface RxObserversTestSubscriber : RxSubscriber

#pragma mark Public

/*!
 @brief Constructs a TestSubscriber with an initial request of Long.MAX_VALUE and no delegation.
 */
- (instancetype)init;

/*!
 @brief Constructs a TestSubscriber with the initial request to be requested from upstream.
 @param initialRequest the initial request value, negative value will revert to the default unbounded behavior
 @since 1.1.0
 */
- (instancetype)initWithLong:(jlong)initialRequest;

/*!
 @brief Constructs a TestSubscriber which requests Long.MAX_VALUE and delegates events to
 the given Observer.
 @param delegate the observer to delegate to.
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
- (instancetype)initWithRxObserver:(id<RxObserver>)delegate;

/*!
 @brief Constructs a TestSubscriber with the initial request to be requested from upstream
 and a delegate Observer to wrap.
 @param initialRequest the initial request value, negative value will revert to the default unbounded behavior
 @param delegate the Observer instance to wrap
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
- (instancetype)initWithRxObserver:(id<RxObserver>)delegate
                          withLong:(jlong)initialRequest;

/*!
 @brief Constructs a TestSubscriber which requests Long.MAX_VALUE and delegates events to
 the given Subscriber.
 @param delegate the subscriber to delegate to.
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
- (instancetype)initWithRxSubscriber:(RxSubscriber *)delegate;

/*!
 @brief Asserts that there is exactly one completion event.
 @throws AssertionError if there were zero, or more than one, onCompleted events
 @since 1.1.0
 */
- (void)assertCompleted;

/*!
 @brief Asserts that there is exactly one error event which is a subclass of the given class.
 @param clazz the class to check the error against.
 @throws AssertionError if there were zero, or more than one, onError events, or if the single onError
 event did not carry an error of a subclass of the given class
 @since 1.1.0
 */
- (void)assertErrorWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Asserts that there is a single onError event with the exact exception.
 @param throwable the throwable to check
 @throws AssertionError if there were zero, or more than one, onError events, or if the single onError
 event did not carry an error that matches the specified throwable
 @since 1.1.0
 */
- (void)assertErrorWithNSException:(NSException *)throwable;

/*!
 @brief Asserts that this <code>Subscriber</code> has received no <code>onError</code> notifications.
 @throws AssertionError
 if this <code>Subscriber</code> has received one or more <code>onError</code> notifications
 */
- (void)assertNoErrors;

/*!
 @brief Asserts that there is no completion event.
 @throws AssertionError if there were one or more than one onCompleted events
 @since 1.1.0
 */
- (void)assertNotCompleted;

/*!
 @brief Asserts that there are no onError and onCompleted events.
 @throws AssertionError if there was either an onError or onCompleted event
 @since 1.1.0
 */
- (void)assertNoTerminalEvent;

/*!
 @brief Asserts that there are no onNext events received.
 @throws AssertionError if there were any onNext events
 @since 1.1.0
 */
- (void)assertNoValues;

/*!
 @brief Asserts that a particular sequence of items was received by this <code>Subscriber</code> in order.
 @param items
 the sequence of items expected to have been observed
 @throws AssertionError
 if the sequence of items observed does not exactly match <code>items</code>
 */
- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items;

/*!
 @brief Asserts that a single terminal event occurred, either <code>onCompleted</code> or <code>onError</code>.
 @throws AssertionError
 if not exactly one terminal event notification was received
 */
- (void)assertTerminalEvent;

/*!
 @brief Asserts that this <code>Subscriber</code> is unsubscribed.
 @throws AssertionError
 if this <code>Subscriber</code> is not unsubscribed
 */
- (void)assertUnsubscribed;

/*!
 @brief Asserts that there is only a single received onNext event and that it marks the emission of a specific item.
 @param value the item to check
 @throws AssertionError if the Observable does not emit only the single item specified by <code>value</code>
 @since 1.1.0
 */
- (void)assertValueWithId:(id)value;

/*!
 @brief Asserts that the given number of onNext events are received.
 @param count the expected number of onNext events
 @throws AssertionError if there were more or fewer onNext events than specified by <code>count</code>
 @since 1.1.0
 */
- (void)assertValueCountWithInt:(jint)count;

/*!
 @brief Asserts that the received onNext events, in order, are the specified items.
 @param values the items to check
 @throws AssertionError if the items emitted do not exactly match those specified by <code>values</code>
 @since 1.1.0
 */
- (void)assertValuesWithNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Blocks until this <code>Subscriber</code> receives a notification that the <code>Observable</code> is complete
 (either an <code>onCompleted</code> or <code>onError</code> notification).
 @throws RuntimeException
 if the Subscriber is interrupted before the Observable is able to complete
 */
- (void)awaitTerminalEvent;

/*!
 @brief Blocks until this <code>Subscriber</code> receives a notification that the <code>Observable</code> is complete
 (either an <code>onCompleted</code> or <code>onError</code> notification), or until a timeout expires.
 @param timeout
 the duration of the timeout
 @param unit
 the units in which <code>timeout</code> is expressed
 @throws RuntimeException
 if the Subscriber is interrupted before the Observable is able to complete
 */
- (void)awaitTerminalEventWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Blocks until this <code>Subscriber</code> receives a notification that the <code>Observable</code> is complete
 (either an <code>onCompleted</code> or <code>onError</code> notification), or until a timeout expires; if the
 Subscriber is interrupted before either of these events take place, this method unsubscribes the
 Subscriber from the Observable).
 If timeout expires then the Subscriber is unsubscribed from the Observable.
 @param timeout
 the duration of the timeout
 @param unit
 the units in which <code>timeout</code> is expressed
 */
- (void)awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Factory method to construct a TestSubscriber with an initial request of Long.MAX_VALUE and no delegation.
 @return the created TestSubscriber instance
 @since 1.1.0
 */
+ (RxObserversTestSubscriber *)create;

/*!
 @brief Factory method to construct a TestSubscriber with the given initial request amount and no delegation.
 @param initialRequest the initial request amount, negative values revert to the default unbounded mode
 @return the created TestSubscriber instance
 @since 1.1.0
 */
+ (RxObserversTestSubscriber *)createWithLong:(jlong)initialRequest;

/*!
 @brief Factory method to construct a TestSubscriber which delegates events to the given Observer and
 an issues an initial request of Long.MAX_VALUE.
 @param delegate the observer to delegate events to
 @return the created TestSubscriber instance
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate;

/*!
 @brief Factory method to construct a TestSubscriber which delegates events to the given Observer and
 issues the given initial request amount.
 @param delegate the observer to delegate events to
 @param initialRequest the initial request amount, negative values revert to the default unbounded mode
 @return the created TestSubscriber instance
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate
                                           withLong:(jlong)initialRequest;

/*!
 @brief Factory method to construct a TestSubscriber which delegates events to the given Subscriber and
 an issues an initial request of Long.MAX_VALUE.
 @param delegate the subscriber to delegate events to
 @return the created TestSubscriber instance
 @throws NullPointerException if delegate is null
 @since 1.1.0
 */
+ (RxObserversTestSubscriber *)createWithRxSubscriber:(RxSubscriber *)delegate;

/*!
 @brief Returns the last thread that was in use when an item or notification was received by this
 <code>Subscriber</code>.
 @return the <code>Thread</code> on which this Subscriber last received an item or notification from the
 Observable it is subscribed to
 */
- (JavaLangThread *)getLastSeenThread;

/*!
 @brief Returns the <code>Notification</code>s representing each time this <code>Subscriber</code> was notified of sequence
 completion via <code>onCompleted</code>, as a <code>List</code>.
 @return a list of Notifications representing calls to this Subscriber's <code>onCompleted</code> method
 */
- (id<JavaUtilList>)getOnCompletedEvents;

/*!
 @brief Returns the <code>Throwable</code>s this <code>Subscriber</code> was notified of via <code>onError</code> as a
 <code>List</code>.
 @return a list of the Throwables that were passed to this Subscriber's <code>onError</code> method
 */
- (id<JavaUtilList>)getOnErrorEvents;

/*!
 @brief Returns the sequence of items observed by this <code>Subscriber</code>, as an ordered <code>List</code>.
 @return a list of items observed by this Subscriber, in the order in which they were observed
 */
- (id<JavaUtilList>)getOnNextEvents;

/*!
 @brief Notifies the Subscriber that the <code>Observable</code> has finished sending push-based notifications.
 <p>
 The <code>Observable</code> will not call this method if it calls <code>onError</code>.
 */
- (void)onCompleted;

/*!
 @brief Notifies the Subscriber that the <code>Observable</code> has experienced an error condition.
 <p>
 If the <code>Observable</code> calls this method, it will not thereafter call <code>onNext</code> or
 <code>onCompleted</code>.
 @param e
 the exception encountered by the Observable
 */
- (void)onErrorWithNSException:(NSException *)e;

/*!
 @brief Provides the Subscriber with a new item to observe.
 <p>
 The <code>Observable</code> may call this method 0 or more times.
 <p>
 The <code>Observable</code> will not call this method again after it calls either <code>onCompleted</code> or
 <code>onError</code>.
 @param t
 the item emitted by the Observable
 */
- (void)onNextWithId:(id)t;

/*!
 @brief Allows calling the protected <code>request(long)</code> from unit tests.
 @param n the maximum number of items you want the Observable to emit to the Subscriber at this time, or
 <code>Long.MAX_VALUE</code> if you want the Observable to emit items at its own pace
 */
- (void)requestMoreWithLong:(jlong)n;

@end

J2OBJC_STATIC_INIT(RxObserversTestSubscriber)

FOUNDATION_EXPORT void RxObserversTestSubscriber_initWithLong_(RxObserversTestSubscriber *self, jlong initialRequest);

FOUNDATION_EXPORT RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithLong_(jlong initialRequest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithLong_(jlong initialRequest);

FOUNDATION_EXPORT void RxObserversTestSubscriber_initWithRxObserver_withLong_(RxObserversTestSubscriber *self, id<RxObserver> delegate, jlong initialRequest);

FOUNDATION_EXPORT RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest);

FOUNDATION_EXPORT void RxObserversTestSubscriber_initWithRxSubscriber_(RxObserversTestSubscriber *self, RxSubscriber *delegate);

FOUNDATION_EXPORT RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate);

FOUNDATION_EXPORT void RxObserversTestSubscriber_initWithRxObserver_(RxObserversTestSubscriber *self, id<RxObserver> delegate);

FOUNDATION_EXPORT RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate);

FOUNDATION_EXPORT void RxObserversTestSubscriber_init(RxObserversTestSubscriber *self);

FOUNDATION_EXPORT RxObserversTestSubscriber *new_RxObserversTestSubscriber_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversTestSubscriber *create_RxObserversTestSubscriber_init();

FOUNDATION_EXPORT RxObserversTestSubscriber *RxObserversTestSubscriber_create();

FOUNDATION_EXPORT RxObserversTestSubscriber *RxObserversTestSubscriber_createWithLong_(jlong initialRequest);

FOUNDATION_EXPORT RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest);

FOUNDATION_EXPORT RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxSubscriber_(RxSubscriber *delegate);

FOUNDATION_EXPORT RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_(id<RxObserver> delegate);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversTestSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObserversTestSubscriber")
