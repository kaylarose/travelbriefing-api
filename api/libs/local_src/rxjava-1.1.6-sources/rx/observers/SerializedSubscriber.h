//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observers/SerializedSubscriber.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObserversSerializedSubscriber")
#ifdef RESTRICT_RxObserversSerializedSubscriber
#define INCLUDE_ALL_RxObserversSerializedSubscriber 0
#else
#define INCLUDE_ALL_RxObserversSerializedSubscriber 1
#endif
#undef RESTRICT_RxObserversSerializedSubscriber

#if !defined (RxObserversSerializedSubscriber_) && (INCLUDE_ALL_RxObserversSerializedSubscriber || defined(INCLUDE_RxObserversSerializedSubscriber))
#define RxObserversSerializedSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

/*!
 @brief Enforces single-threaded, serialized, ordered execution of <code>onNext</code>, <code>onCompleted</code>, and
 <code>onError</code>.
 <p>
 When multiple threads are emitting and/or notifying they will be serialized by:
 </p><ul>
 <li>Allowing only one thread at a time to emit</li>
 <li>Adding notifications to a queue if another thread is already emitting</li>
 <li>Not holding any locks or blocking any threads while emitting</li>
 </ul>
 */
@interface RxObserversSerializedSubscriber : RxSubscriber

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)s;

/*!
 @brief Constructor for wrapping and serializing a subscriber optionally sharing the same underlying subscription
 list.
 @param s
 the subscriber to wrap and serialize
 @param shareSubscriptions
 if <code>true</code>, the same subscription list is shared between this subscriber and <code>s</code>.
 @since 1.0.7
 */
- (instancetype)initWithRxSubscriber:(RxSubscriber *)s
                         withBoolean:(jboolean)shareSubscriptions;

/*!
 @brief Notifies the Subscriber that the <code>Observable</code> has finished sending push-based notifications.
 <p>
 The <code>Observable</code> will not call this method if it calls <code>onError</code>.
 */
- (void)onCompleted;

/*!
 @brief Notifies the Subscriber that the <code>Observable</code> has experienced an error condition.
 <p>
 If the <code>Observable</code> calls this method, it will not thereafter call <code>onNext</code> or
 <code>onCompleted</code>.
 @param e
 the exception encountered by the Observable
 */
- (void)onErrorWithNSException:(NSException *)e;

/*!
 @brief Provides the Subscriber with a new item to observe.
 <p>
 The <code>Observable</code> may call this method 0 or more times.
 <p>
 The <code>Observable</code> will not call this method again after it calls either <code>onCompleted</code> or
 <code>onError</code>.
 @param t
 the item emitted by the Observable
 */
- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSerializedSubscriber)

FOUNDATION_EXPORT void RxObserversSerializedSubscriber_initWithRxSubscriber_(RxObserversSerializedSubscriber *self, RxSubscriber *s);

FOUNDATION_EXPORT RxObserversSerializedSubscriber *new_RxObserversSerializedSubscriber_initWithRxSubscriber_(RxSubscriber *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedSubscriber *create_RxObserversSerializedSubscriber_initWithRxSubscriber_(RxSubscriber *s);

FOUNDATION_EXPORT void RxObserversSerializedSubscriber_initWithRxSubscriber_withBoolean_(RxObserversSerializedSubscriber *self, RxSubscriber *s, jboolean shareSubscriptions);

FOUNDATION_EXPORT RxObserversSerializedSubscriber *new_RxObserversSerializedSubscriber_initWithRxSubscriber_withBoolean_(RxSubscriber *s, jboolean shareSubscriptions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxObserversSerializedSubscriber *create_RxObserversSerializedSubscriber_initWithRxSubscriber_withBoolean_(RxSubscriber *s, jboolean shareSubscriptions);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSerializedSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObserversSerializedSubscriber")
