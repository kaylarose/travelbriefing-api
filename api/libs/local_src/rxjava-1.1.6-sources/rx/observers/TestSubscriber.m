//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observers/TestSubscriber.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Observer.h"
#include "rx/Subscriber.h"
#include "rx/exceptions/CompositeException.h"
#include "rx/observers/TestObserver.h"
#include "rx/observers/TestSubscriber.h"

@interface RxObserversTestSubscriber () {
 @public
  RxObserversTestObserver *testObserver_;
  JavaUtilConcurrentCountDownLatch *latch_;
  volatile_id lastSeenThread_;
}

@end

J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, testObserver_, RxObserversTestObserver *)
J2OBJC_FIELD_SETTER(RxObserversTestSubscriber, latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_VOLATILE_FIELD_SETTER(RxObserversTestSubscriber, lastSeenThread_, JavaLangThread *)

/*!
 @brief The shared no-op observer.
 */
inline id<RxObserver> RxObserversTestSubscriber_get_INERT();
static id<RxObserver> RxObserversTestSubscriber_INERT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxObserversTestSubscriber, INERT, id<RxObserver>)

@interface RxObserversTestSubscriber_$1 : NSObject < RxObserver >

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversTestSubscriber_$1)

__attribute__((unused)) static void RxObserversTestSubscriber_$1_init(RxObserversTestSubscriber_$1 *self);

__attribute__((unused)) static RxObserversTestSubscriber_$1 *new_RxObserversTestSubscriber_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxObserversTestSubscriber_$1 *create_RxObserversTestSubscriber_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(RxObserversTestSubscriber_$1)

J2OBJC_INITIALIZED_DEFN(RxObserversTestSubscriber)

@implementation RxObserversTestSubscriber

- (instancetype)initWithLong:(jlong)initialRequest {
  RxObserversTestSubscriber_initWithLong_(self, initialRequest);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate
                          withLong:(jlong)initialRequest {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, initialRequest);
  return self;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)delegate {
  RxObserversTestSubscriber_initWithRxSubscriber_(self, delegate);
  return self;
}

- (instancetype)initWithRxObserver:(id<RxObserver>)delegate {
  RxObserversTestSubscriber_initWithRxObserver_(self, delegate);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (RxObserversTestSubscriber *)create {
  return RxObserversTestSubscriber_create();
}

+ (RxObserversTestSubscriber *)createWithLong:(jlong)initialRequest {
  return RxObserversTestSubscriber_createWithLong_(initialRequest);
}

+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate
                                           withLong:(jlong)initialRequest {
  return RxObserversTestSubscriber_createWithRxObserver_withLong_(delegate, initialRequest);
}

+ (RxObserversTestSubscriber *)createWithRxSubscriber:(RxSubscriber *)delegate {
  return RxObserversTestSubscriber_createWithRxSubscriber_(delegate);
}

+ (RxObserversTestSubscriber *)createWithRxObserver:(id<RxObserver>)delegate {
  return RxObserversTestSubscriber_createWithRxObserver_(delegate);
}

- (void)onCompleted {
  @try {
    (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((RxObserversTestObserver *) nil_chk(testObserver_)) onCompleted];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnCompletedEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnCompletedEvents];
}

- (void)onErrorWithNSException:(NSException *)e {
  @try {
    (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
    [((RxObserversTestObserver *) nil_chk(testObserver_)) onErrorWithNSException:e];
  }
  @finally {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
  }
}

- (id<JavaUtilList>)getOnErrorEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnErrorEvents];
}

- (void)onNextWithId:(id)t {
  (void) JreVolatileStrongAssign(&lastSeenThread_, JavaLangThread_currentThread());
  [((RxObserversTestObserver *) nil_chk(testObserver_)) onNextWithId:t];
}

- (void)requestMoreWithLong:(jlong)n {
  [self requestWithLong:n];
}

- (id<JavaUtilList>)getOnNextEvents {
  return [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnNextEvents];
}

- (void)assertReceivedOnNextWithJavaUtilList:(id<JavaUtilList>)items {
  [((RxObserversTestObserver *) nil_chk(testObserver_)) assertReceivedOnNextWithJavaUtilList:items];
}

- (void)assertTerminalEvent {
  [((RxObserversTestObserver *) nil_chk(testObserver_)) assertTerminalEvent];
}

- (void)assertUnsubscribed {
  if (![self isUnsubscribed]) {
    [((RxObserversTestObserver *) nil_chk(testObserver_)) assertionErrorWithNSString:@"Not unsubscribed."];
  }
}

- (void)assertNoErrors {
  id<JavaUtilList> onErrorEvents = [self getOnErrorEvents];
  if ([((id<JavaUtilList>) nil_chk(onErrorEvents)) size] > 0) {
    JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Unexpected onError events: ", [((id<JavaUtilList>) nil_chk([self getOnErrorEvents])) size]));
    if ([onErrorEvents size] == 1) {
      (void) [ae initCauseWithNSException:[((id<JavaUtilList>) nil_chk([self getOnErrorEvents])) getWithInt:0]];
    }
    else {
      (void) [ae initCauseWithNSException:new_RxExceptionsCompositeException_initWithJavaUtilCollection_(onErrorEvents)];
    }
    @throw ae;
  }
}

- (void)awaitTerminalEvent {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Interrupted", e);
  }
}

- (void)awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:(jlong)timeout
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    jboolean result = [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
    if (!result) {
      [self unsubscribe];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    [self unsubscribe];
  }
}

- (JavaLangThread *)getLastSeenThread {
  return JreLoadVolatileId(&lastSeenThread_);
}

- (void)assertCompleted {
  jint s = [((id<JavaUtilList>) nil_chk([((RxObserversTestObserver *) nil_chk(testObserver_)) getOnCompletedEvents])) size];
  if (s == 0) {
    [testObserver_ assertionErrorWithNSString:@"Not completed!"];
  }
  else if (s > 1) {
    [testObserver_ assertionErrorWithNSString:JreStrcat("$I", @"Completed multiple times: ", s)];
  }
}

- (void)assertNotCompleted {
  jint s = [((id<JavaUtilList>) nil_chk([((RxObserversTestObserver *) nil_chk(testObserver_)) getOnCompletedEvents])) size];
  if (s == 1) {
    [testObserver_ assertionErrorWithNSString:@"Completed!"];
  }
  else if (s > 1) {
    [testObserver_ assertionErrorWithNSString:JreStrcat("$I", @"Completed multiple times: ", s)];
  }
}

- (void)assertErrorWithIOSClass:(IOSClass *)clazz {
  id<JavaUtilList> err = [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnErrorEvents];
  if ([((id<JavaUtilList>) nil_chk(err)) size] == 0) {
    [testObserver_ assertionErrorWithNSString:@"No errors"];
  }
  else if ([err size] > 1) {
    JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Multiple errors: ", [err size]));
    (void) [ae initCauseWithNSException:new_RxExceptionsCompositeException_initWithJavaUtilCollection_(err)];
    @throw ae;
  }
  else if (![((IOSClass *) nil_chk(clazz)) isInstance:[err getWithInt:0]]) {
    JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$@$@", @"Exceptions differ; expected: ", clazz, @", actual: ", [err getWithInt:0]));
    (void) [ae initCauseWithNSException:[err getWithInt:0]];
    @throw ae;
  }
}

- (void)assertErrorWithNSException:(NSException *)throwable {
  id<JavaUtilList> err = [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnErrorEvents];
  if ([((id<JavaUtilList>) nil_chk(err)) size] == 0) {
    [testObserver_ assertionErrorWithNSString:@"No errors"];
  }
  else if ([err size] > 1) {
    JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$I", @"Multiple errors: ", [err size]));
    (void) [ae initCauseWithNSException:new_RxExceptionsCompositeException_initWithJavaUtilCollection_(err)];
    @throw ae;
  }
  else if (![((NSException *) nil_chk(throwable)) isEqual:[err getWithInt:0]]) {
    JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$@$@", @"Exceptions differ; expected: ", throwable, @", actual: ", [err getWithInt:0]));
    (void) [ae initCauseWithNSException:[err getWithInt:0]];
    @throw ae;
  }
}

- (void)assertNoTerminalEvent {
  id<JavaUtilList> err = [((RxObserversTestObserver *) nil_chk(testObserver_)) getOnErrorEvents];
  jint s = [((id<JavaUtilList>) nil_chk([testObserver_ getOnCompletedEvents])) size];
  if ([((id<JavaUtilList>) nil_chk(err)) size] > 0 || s > 0) {
    if ([err isEmpty]) {
      [testObserver_ assertionErrorWithNSString:JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none")];
    }
    else if ([err size] == 1) {
      JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none"));
      (void) [ae initCauseWithNSException:[err getWithInt:0]];
      @throw ae;
    }
    else {
      JavaLangAssertionError *ae = new_JavaLangAssertionError_initWithId_(JreStrcat("$I$I$", @"Found ", [err size], @" errors and ", s, @" completion events instead of none"));
      (void) [ae initCauseWithNSException:new_RxExceptionsCompositeException_initWithJavaUtilCollection_(err)];
      @throw ae;
    }
  }
}

- (void)assertNoValues {
  jint s = [((id<JavaUtilList>) nil_chk([((RxObserversTestObserver *) nil_chk(testObserver_)) getOnNextEvents])) size];
  if (s > 0) {
    [testObserver_ assertionErrorWithNSString:JreStrcat("$I", @"No onNext events expected yet some received: ", s)];
  }
}

- (void)assertValueCountWithInt:(jint)count {
  jint s = [((id<JavaUtilList>) nil_chk([((RxObserversTestObserver *) nil_chk(testObserver_)) getOnNextEvents])) size];
  if (s != count) {
    [testObserver_ assertionErrorWithNSString:JreStrcat("$I$I", @"Number of onNext events differ; expected: ", count, @", actual: ", s)];
  }
}

- (void)assertValuesWithNSObjectArray:(IOSObjectArray *)values {
  [self assertReceivedOnNextWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(values)];
}

- (void)assertValueWithId:(id)value {
  [self assertReceivedOnNextWithJavaUtilList:JavaUtilCollections_singletonListWithId_(value)];
}

- (void)__javaClone:(RxObserversTestSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&lastSeenThread_, &original->lastSeenThread_);
}

- (void)dealloc {
  JreReleaseVolatile(&lastSeenThread_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "initWithRxObserver:withLong:", NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { "initWithRxSubscriber:", NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { "initWithRxObserver:", NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "create", "LRxObserversTestSubscriber;", 0x9, -1, -1, -1, 7, -1, -1 },
    { "createWithLong:", "LRxObserversTestSubscriber;", 0x9, 8, 0, -1, 9, -1, -1 },
    { "createWithRxObserver:withLong:", "LRxObserversTestSubscriber;", 0x9, 8, 1, -1, 10, -1, -1 },
    { "createWithRxSubscriber:", "LRxObserversTestSubscriber;", 0x9, 8, 3, -1, 11, -1, -1 },
    { "createWithRxObserver:", "LRxObserversTestSubscriber;", 0x9, 8, 5, -1, 12, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getOnCompletedEvents", "LJavaUtilList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { "getOnErrorEvents", "LJavaUtilList;", 0x1, -1, -1, -1, 16, -1, -1 },
    { "onNextWithId:", "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { "requestMoreWithLong:", "V", 0x1, 20, 0, -1, -1, -1, -1 },
    { "getOnNextEvents", "LJavaUtilList;", 0x1, -1, -1, -1, 21, -1, -1 },
    { "assertReceivedOnNextWithJavaUtilList:", "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { "assertTerminalEvent", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertUnsubscribed", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertNoErrors", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "awaitTerminalEvent", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:", "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { "awaitTerminalEventAndUnsubscribeOnTimeoutWithLong:withJavaUtilConcurrentTimeUnit:", "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { "getLastSeenThread", "LJavaLangThread;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertNotCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertErrorWithIOSClass:", "V", 0x1, 28, 29, -1, 30, -1, -1 },
    { "assertErrorWithNSException:", "V", 0x1, 28, 15, -1, -1, -1, -1 },
    { "assertNoTerminalEvent", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertNoValues", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertValueCountWithInt:", "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { "assertValuesWithNSObjectArray:", "V", 0x81, 33, 34, -1, -1, -1, -1 },
    { "assertValueWithId:", "V", 0x1, 35, 18, -1, 19, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "testObserver_", "LRxObserversTestObserver;", .constantValue.asLong = 0, 0x12, -1, -1, 36, -1 },
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastSeenThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "INERT", "LRxObserver;", .constantValue.asLong = 0, 0x1a, -1, 37, 38, -1 },
  };
  static const void *ptrTable[] = { "J", "LRxObserver;J", "(Lrx/Observer<TT;>;J)V", "LRxSubscriber;", "(Lrx/Subscriber<TT;>;)V", "LRxObserver;", "(Lrx/Observer<TT;>;)V", "<T:Ljava/lang/Object;>()Lrx/observers/TestSubscriber<TT;>;", "create", "<T:Ljava/lang/Object;>(J)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;J)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Subscriber<TT;>;)Lrx/observers/TestSubscriber<TT;>;", "<T:Ljava/lang/Object;>(Lrx/Observer<TT;>;)Lrx/observers/TestSubscriber<TT;>;", "()Ljava/util/List<Lrx/Notification<TT;>;>;", "onError", "LNSException;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "onNext", "LNSObject;", "(TT;)V", "requestMore", "()Ljava/util/List<TT;>;", "assertReceivedOnNext", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "awaitTerminalEvent", "JLJavaUtilConcurrentTimeUnit;", "awaitTerminalEventAndUnsubscribeOnTimeout", "assertError", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "assertValueCount", "I", "assertValues", "[LNSObject;", "assertValue", "Lrx/observers/TestObserver<TT;>;", &RxObserversTestSubscriber_INERT, "Lrx/Observer<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriber = { "TestSubscriber", "rx.observers", ptrTable, methods, fields, 7, 0x1, 34, 4, -1, -1, -1, 39, -1 };
  return &_RxObserversTestSubscriber;
}

+ (void)initialize {
  if (self == [RxObserversTestSubscriber class]) {
    RxObserversTestSubscriber_INERT = new_RxObserversTestSubscriber_$1_init();
    J2OBJC_SET_INITIALIZED(RxObserversTestSubscriber)
  }
}

@end

void RxObserversTestSubscriber_initWithLong_(RxObserversTestSubscriber *self, jlong initialRequest) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, RxObserversTestSubscriber_INERT, initialRequest);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithLong_(jlong initialRequest) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithLong_, initialRequest)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithLong_(jlong initialRequest) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithLong_, initialRequest)
}

void RxObserversTestSubscriber_initWithRxObserver_withLong_(RxObserversTestSubscriber *self, id<RxObserver> delegate, jlong initialRequest) {
  RxSubscriber_init(self);
  self->latch_ = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  if (delegate == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  self->testObserver_ = new_RxObserversTestObserver_initWithRxObserver_(delegate);
  if (initialRequest >= 0LL) {
    [self requestWithLong:initialRequest];
  }
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxObserver_withLong_, delegate, initialRequest)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxObserver_withLong_, delegate, initialRequest)
}

void RxObserversTestSubscriber_initWithRxSubscriber_(RxObserversTestSubscriber *self, RxSubscriber *delegate) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxSubscriber_, delegate)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxSubscriber_(RxSubscriber *delegate) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxSubscriber_, delegate)
}

void RxObserversTestSubscriber_initWithRxObserver_(RxObserversTestSubscriber *self, id<RxObserver> delegate) {
  RxObserversTestSubscriber_initWithRxObserver_withLong_(self, delegate, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, initWithRxObserver_, delegate)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_initWithRxObserver_(id<RxObserver> delegate) {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, initWithRxObserver_, delegate)
}

void RxObserversTestSubscriber_init(RxObserversTestSubscriber *self) {
  RxObserversTestSubscriber_initWithLong_(self, -1);
}

RxObserversTestSubscriber *new_RxObserversTestSubscriber_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber, init)
}

RxObserversTestSubscriber *create_RxObserversTestSubscriber_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber, init)
}

RxObserversTestSubscriber *RxObserversTestSubscriber_create() {
  RxObserversTestSubscriber_initialize();
  return new_RxObserversTestSubscriber_init();
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithLong_(jlong initialRequest) {
  RxObserversTestSubscriber_initialize();
  return new_RxObserversTestSubscriber_initWithLong_(initialRequest);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_withLong_(id<RxObserver> delegate, jlong initialRequest) {
  RxObserversTestSubscriber_initialize();
  return new_RxObserversTestSubscriber_initWithRxObserver_withLong_(delegate, initialRequest);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxSubscriber_(RxSubscriber *delegate) {
  RxObserversTestSubscriber_initialize();
  return new_RxObserversTestSubscriber_initWithRxSubscriber_(delegate);
}

RxObserversTestSubscriber *RxObserversTestSubscriber_createWithRxObserver_(id<RxObserver> delegate) {
  RxObserversTestSubscriber_initialize();
  return new_RxObserversTestSubscriber_initWithRxObserver_(delegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriber)

@implementation RxObserversTestSubscriber_$1

- (void)onCompleted {
}

- (void)onErrorWithNSException:(NSException *)e {
}

- (void)onNextWithId:(id)t {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxObserversTestSubscriber_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { "onNextWithId:", "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LNSObject;", "LRxObserversTestSubscriber;", "Ljava/lang/Object;Lrx/Observer<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RxObserversTestSubscriber_$1 = { "", "rx.observers", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 4, -1, -1, 5, -1 };
  return &_RxObserversTestSubscriber_$1;
}

@end

void RxObserversTestSubscriber_$1_init(RxObserversTestSubscriber_$1 *self) {
  NSObject_init(self);
}

RxObserversTestSubscriber_$1 *new_RxObserversTestSubscriber_$1_init() {
  J2OBJC_NEW_IMPL(RxObserversTestSubscriber_$1, init)
}

RxObserversTestSubscriber_$1 *create_RxObserversTestSubscriber_$1_init() {
  J2OBJC_CREATE_IMPL(RxObserversTestSubscriber_$1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxObserversTestSubscriber_$1)
