//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/observers/Subscribers.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxObserversSubscribers")
#ifdef RESTRICT_RxObserversSubscribers
#define INCLUDE_ALL_RxObserversSubscribers 0
#else
#define INCLUDE_ALL_RxObserversSubscribers 1
#endif
#undef RESTRICT_RxObserversSubscribers

#if !defined (RxObserversSubscribers_) && (INCLUDE_ALL_RxObserversSubscribers || defined(INCLUDE_RxObserversSubscribers))
#define RxObserversSubscribers_

@class RxSubscriber;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxObserver;

/*!
 @brief Helper methods and utilities for creating and working with <code>Subscriber</code> objects.
 */
@interface RxObserversSubscribers : NSObject

#pragma mark Public

/*!
 @brief Creates a <code>Subscriber</code> that receives the emissions of any <code>Observable</code> it subscribes to via
 <code>onNext</code> but ignores <code>onCompleted</code> notifications;
 it will throw an <code>OnErrorNotImplementedException</code> if <code>onError</code> is invoked.
 @param onNext
 a function that handles each item emitted by an <code>Observable</code>
 @throws IllegalArgumentException
 if <code>onNext</code> is <code>null</code>
 @return a <code>Subscriber</code> that calls <code>onNext</code> for each emitted item from the <code>Observable</code>
 the <code>Subscriber</code> subscribes to
 */
+ (RxSubscriber *)createWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext;

/*!
 @brief Creates an <code>Subscriber</code> that receives the emissions of any <code>Observable</code> it subscribes to via
 <code>onNext</code> and handles any <code>onError</code> notification but
 ignores an <code>onCompleted</code> notification.
 @param onNext
 a function that handles each item emitted by an <code>Observable</code>
 @param onError
 a function that handles an error notification if one is sent by an <code>Observable</code>
 @throws IllegalArgumentException
 if either <code>onNext</code> or <code>onError</code> are <code>null</code>
 @return an <code>Subscriber</code> that calls <code>onNext</code> for each emitted item from the <code>Observable</code>
 the <code>Subscriber</code> subscribes to, and calls <code>onError</code> if the <code>Observable</code>
 notifies of an error
 */
+ (RxSubscriber *)createWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)onError;

/*!
 @brief Creates an <code>Subscriber</code> that receives the emissions of any <code>Observable</code> it subscribes to via
 <code>onNext</code> and handles any <code>onError</code> or
 <code>onCompleted</code> notifications.
 @param onNext
 a function that handles each item emitted by an <code>Observable</code>
 @param onError
 a function that handles an error notification if one is sent by an <code>Observable</code>
 @param onComplete
 a function that handles a sequence complete notification if one is sent by an <code>Observable</code>
 @throws IllegalArgumentException
 if either <code>onNext</code>, <code>onError</code>, or <code>onComplete</code> are <code>null</code>
 @return an <code>Subscriber</code> that calls <code>onNext</code> for each emitted item from the <code>Observable</code>
 the <code>Subscriber</code> subscribes to, calls <code>onError</code> if the <code>Observable</code> notifies
 of an error, and calls <code>onComplete</code> if the <code>Observable</code> notifies that the observable
 sequence is complete
 */
+ (RxSubscriber *)createWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNext
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)onError
                        withRxFunctionsAction0:(id<RxFunctionsAction0>)onComplete;

/*!
 @brief Returns an inert <code>Subscriber</code> that does nothing in response to the emissions or notifications 
 from any <code>Observable</code> it subscribes to.
 Will throw an <code>OnErrorNotImplementedException</code> if <code>onError</code> 
 method is called
 @return an inert <code>Observer</code>
 */
+ (RxSubscriber *)empty;

/*!
 @brief Converts an <code>Observer</code> into a <code>Subscriber</code>.
 @param o
 the <code>Observer</code> to convert
 @return a <code>Subscriber</code> version of <code>o</code>
 */
+ (RxSubscriber *)fromWithRxObserver:(id<RxObserver>)o;

/*!
 @brief Returns a new <code>Subscriber</code> that passes all events to
 <code>subscriber</code>, has backpressure controlled by
 <code>subscriber</code> and uses the subscription list of
 <code>subscriber</code> when <code>Subscriber.add(rx.Subscription)</code> is
 called.
 @param subscriber
 the Subscriber to wrap.
 @return a new Subscriber that passes all events to
 <code>subscriber</code>, has backpressure controlled by
 <code>subscriber</code> and uses <code>subscriber</code> to
 manage unsubscription.
 @since 1.1.0
 */
+ (RxSubscriber *)wrapWithRxSubscriber:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxObserversSubscribers)

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_empty();

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_fromWithRxObserver_(id<RxObserver> o);

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_createWithRxFunctionsAction1_(id<RxFunctionsAction1> onNext);

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_(id<RxFunctionsAction1> onNext, id<RxFunctionsAction1> onError);

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_createWithRxFunctionsAction1_withRxFunctionsAction1_withRxFunctionsAction0_(id<RxFunctionsAction1> onNext, id<RxFunctionsAction1> onError, id<RxFunctionsAction0> onComplete);

FOUNDATION_EXPORT RxSubscriber *RxObserversSubscribers_wrapWithRxSubscriber_(RxSubscriber *subscriber);

J2OBJC_TYPE_LITERAL_HEADER(RxObserversSubscribers)

#endif

#pragma pop_macro("INCLUDE_ALL_RxObserversSubscribers")
