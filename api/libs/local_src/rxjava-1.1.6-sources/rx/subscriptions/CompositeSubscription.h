//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/CompositeSubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsCompositeSubscription")
#ifdef RESTRICT_RxSubscriptionsCompositeSubscription
#define INCLUDE_ALL_RxSubscriptionsCompositeSubscription 0
#else
#define INCLUDE_ALL_RxSubscriptionsCompositeSubscription 1
#endif
#undef RESTRICT_RxSubscriptionsCompositeSubscription

#if !defined (RxSubscriptionsCompositeSubscription_) && (INCLUDE_ALL_RxSubscriptionsCompositeSubscription || defined(INCLUDE_RxSubscriptionsCompositeSubscription))
#define RxSubscriptionsCompositeSubscription_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class IOSObjectArray;

/*!
 @brief Subscription that represents a group of Subscriptions that are unsubscribed together.
 <p>
 All methods of this class are thread-safe.
 */
@interface RxSubscriptionsCompositeSubscription : NSObject < RxSubscription >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)subscriptions;

/*!
 @brief Adds a new <code>Subscription</code> to this <code>CompositeSubscription</code> if the
 <code>CompositeSubscription</code> is not yet unsubscribed.
 If the <code>CompositeSubscription</code> <em>is</em>
 unsubscribed, <code>add</code> will indicate this by explicitly unsubscribing the new <code>Subscription</code> as
 well.
 @param s
 the <code>Subscription</code> to add
 */
- (void)addWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Unsubscribes any subscriptions that are currently part of this <code>CompositeSubscription</code> and remove
 them from the <code>CompositeSubscription</code> so that the <code>CompositeSubscription</code> is empty and
 able to manage new subscriptions.
 */
- (void)clear;

/*!
 @brief Returns true if this composite is not unsubscribed and contains subscriptions.
 @return <code>true</code> if this composite is not unsubscribed and contains subscriptions.
 @since 1.0.7
 */
- (jboolean)hasSubscriptions;

- (jboolean)isUnsubscribed;

/*!
 @brief Removes a <code>Subscription</code> from this <code>CompositeSubscription</code>, and unsubscribes the
 <code>Subscription</code>.
 @param s
 the <code>Subscription</code> to remove
 */
- (void)removeWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Unsubscribes itself and all inner subscriptions.
 <p>After call of this method, new <code>Subscription</code>s added to <code>CompositeSubscription</code>
 will be unsubscribed immediately.
 */
- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsCompositeSubscription)

FOUNDATION_EXPORT void RxSubscriptionsCompositeSubscription_init(RxSubscriptionsCompositeSubscription *self);

FOUNDATION_EXPORT RxSubscriptionsCompositeSubscription *new_RxSubscriptionsCompositeSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsCompositeSubscription *create_RxSubscriptionsCompositeSubscription_init();

FOUNDATION_EXPORT void RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(RxSubscriptionsCompositeSubscription *self, IOSObjectArray *subscriptions);

FOUNDATION_EXPORT RxSubscriptionsCompositeSubscription *new_RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsCompositeSubscription *create_RxSubscriptionsCompositeSubscription_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsCompositeSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsCompositeSubscription")
