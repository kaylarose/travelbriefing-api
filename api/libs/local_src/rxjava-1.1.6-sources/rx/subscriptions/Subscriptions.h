//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/Subscriptions.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsSubscriptions")
#ifdef RESTRICT_RxSubscriptionsSubscriptions
#define INCLUDE_ALL_RxSubscriptionsSubscriptions 0
#else
#define INCLUDE_ALL_RxSubscriptionsSubscriptions 1
#endif
#undef RESTRICT_RxSubscriptionsSubscriptions

#if !defined (RxSubscriptionsSubscriptions_) && (INCLUDE_ALL_RxSubscriptionsSubscriptions || defined(INCLUDE_RxSubscriptionsSubscriptions))
#define RxSubscriptionsSubscriptions_

@class IOSObjectArray;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilConcurrentFuture;
@protocol RxFunctionsAction0;
@protocol RxSubscription;

/*!
 @brief Helper methods and utilities for creating and working with <code>Subscription</code> objects
 */
@interface RxSubscriptionsSubscriptions : NSObject

#pragma mark Public

/*!
 @brief Creates and returns a <code>Subscription</code> that invokes the given <code>Action0</code> when unsubscribed.
 @param unsubscribe
 Action to invoke on unsubscribe.
 @return <code>Subscription</code>
 */
+ (id<RxSubscription>)createWithRxFunctionsAction0:(id<RxFunctionsAction0>)unsubscribe;

/*!
 @brief Returns a <code>Subscription</code> to which <code>unsubscribe</code> does nothing except to change
 <code>isUnsubscribed</code> to <code>true</code>.
 It's stateful and <code>isUnsubscribed</code> indicates if
 <code>unsubscribe</code> is called, which is different from <code>unsubscribed()</code>.
 @code
<code>
  Subscription empty = Subscriptions.empty();
  System.out.println(empty.isUnsubscribed()); // false
  empty.unsubscribe();
  System.out.println(empty.isUnsubscribed()); // true
  
@endcode
 @return a <code>Subscription</code> to which <code>unsubscribe</code> does nothing except to change
 <code>isUnsubscribed</code> to <code>true</code>
 */
+ (id<RxSubscription>)empty;

/*!
 @brief Converts a <code>Future</code> into a <code>Subscription</code> and cancels it when unsubscribed.
 @param f
 the <code>Future</code> to convert
 @return a <code>Subscription</code> that wraps <code>f</code>
 */
+ (id<RxSubscription>)fromWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f;

/*!
 @brief Converts a set of <code>Subscription</code>s into a <code>CompositeSubscription</code> that groups the multiple
 Subscriptions together and unsubscribes from all of them together.
 @param subscriptions
 the Subscriptions to group together
 @return a <code>CompositeSubscription</code> representing the <code>subscriptions</code> set
 */
+ (RxSubscriptionsCompositeSubscription *)fromWithRxSubscriptionArray:(IOSObjectArray *)subscriptions;

/*!
 @brief Returns a <code>Subscription</code> to which <code>unsubscribe</code> does nothing, as it is already unsubscribed.
 Its <code>isUnsubscribed</code> always returns <code>true</code>, which is different from <code>empty()</code>.
 @code
<code>
  Subscription unsubscribed = Subscriptions.unsubscribed();
  System.out.println(unsubscribed.isUnsubscribed()); // true
  
@endcode
 @return a <code>Subscription</code> to which <code>unsubscribe</code> does nothing, as it is already unsubscribed
 @since 1.1.0
 */
+ (id<RxSubscription>)unsubscribed;

@end

J2OBJC_STATIC_INIT(RxSubscriptionsSubscriptions)

FOUNDATION_EXPORT id<RxSubscription> RxSubscriptionsSubscriptions_empty();

FOUNDATION_EXPORT id<RxSubscription> RxSubscriptionsSubscriptions_unsubscribed();

FOUNDATION_EXPORT id<RxSubscription> RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(id<RxFunctionsAction0> unsubscribe);

FOUNDATION_EXPORT id<RxSubscription> RxSubscriptionsSubscriptions_fromWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> f);

FOUNDATION_EXPORT RxSubscriptionsCompositeSubscription *RxSubscriptionsSubscriptions_fromWithRxSubscriptionArray_(IOSObjectArray *subscriptions);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsSubscriptions)

#endif

#if !defined (RxSubscriptionsSubscriptions_Unsubscribed_) && (INCLUDE_ALL_RxSubscriptionsSubscriptions || defined(INCLUDE_RxSubscriptionsSubscriptions_Unsubscribed))
#define RxSubscriptionsSubscriptions_Unsubscribed_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

/*!
 @brief Naming classes helps with debugging.
 */
@interface RxSubscriptionsSubscriptions_Unsubscribed : NSObject < RxSubscription >

#pragma mark Public

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsSubscriptions_Unsubscribed)

FOUNDATION_EXPORT void RxSubscriptionsSubscriptions_Unsubscribed_init(RxSubscriptionsSubscriptions_Unsubscribed *self);

FOUNDATION_EXPORT RxSubscriptionsSubscriptions_Unsubscribed *new_RxSubscriptionsSubscriptions_Unsubscribed_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsSubscriptions_Unsubscribed *create_RxSubscriptionsSubscriptions_Unsubscribed_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsSubscriptions_Unsubscribed)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsSubscriptions")
