//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/BooleanSubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsBooleanSubscription")
#ifdef RESTRICT_RxSubscriptionsBooleanSubscription
#define INCLUDE_ALL_RxSubscriptionsBooleanSubscription 0
#else
#define INCLUDE_ALL_RxSubscriptionsBooleanSubscription 1
#endif
#undef RESTRICT_RxSubscriptionsBooleanSubscription

#if !defined (RxSubscriptionsBooleanSubscription_) && (INCLUDE_ALL_RxSubscriptionsBooleanSubscription || defined(INCLUDE_RxSubscriptionsBooleanSubscription))
#define RxSubscriptionsBooleanSubscription_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol RxFunctionsAction0;

/*!
 @brief Subscription that can be checked for status such as in a loop inside an <code>Observable</code> to exit the loop
 if unsubscribed.
 */
@interface RxSubscriptionsBooleanSubscription : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *actionRef_;
}

+ (id<RxFunctionsAction0>)EMPTY_ACTION;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Creates a <code>BooleanSubscription</code> without unsubscribe behavior.
 @return the created <code>BooleanSubscription</code>
 */
+ (RxSubscriptionsBooleanSubscription *)create;

/*!
 @brief Creates a <code>BooleanSubscription</code> with a specified function to invoke upon unsubscribe.
 @param onUnsubscribe
 an <code>Action0</code> to invoke upon unsubscribe
 @return the created <code>BooleanSubscription</code>
 */
+ (RxSubscriptionsBooleanSubscription *)createWithRxFunctionsAction0:(id<RxFunctionsAction0>)onUnsubscribe;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

@end

J2OBJC_STATIC_INIT(RxSubscriptionsBooleanSubscription)

J2OBJC_FIELD_SETTER(RxSubscriptionsBooleanSubscription, actionRef_, JavaUtilConcurrentAtomicAtomicReference *)

inline id<RxFunctionsAction0> RxSubscriptionsBooleanSubscription_get_EMPTY_ACTION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<RxFunctionsAction0> RxSubscriptionsBooleanSubscription_EMPTY_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubscriptionsBooleanSubscription, EMPTY_ACTION, id<RxFunctionsAction0>)

FOUNDATION_EXPORT void RxSubscriptionsBooleanSubscription_init(RxSubscriptionsBooleanSubscription *self);

FOUNDATION_EXPORT RxSubscriptionsBooleanSubscription *new_RxSubscriptionsBooleanSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsBooleanSubscription *create_RxSubscriptionsBooleanSubscription_init();

FOUNDATION_EXPORT RxSubscriptionsBooleanSubscription *RxSubscriptionsBooleanSubscription_create();

FOUNDATION_EXPORT RxSubscriptionsBooleanSubscription *RxSubscriptionsBooleanSubscription_createWithRxFunctionsAction0_(id<RxFunctionsAction0> onUnsubscribe);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsBooleanSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsBooleanSubscription")
