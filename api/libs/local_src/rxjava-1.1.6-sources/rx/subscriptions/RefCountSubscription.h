//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/RefCountSubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsRefCountSubscription")
#ifdef RESTRICT_RxSubscriptionsRefCountSubscription
#define INCLUDE_ALL_RxSubscriptionsRefCountSubscription 0
#else
#define INCLUDE_ALL_RxSubscriptionsRefCountSubscription 1
#endif
#undef RESTRICT_RxSubscriptionsRefCountSubscription

#if !defined (RxSubscriptionsRefCountSubscription_) && (INCLUDE_ALL_RxSubscriptionsRefCountSubscription || defined(INCLUDE_RxSubscriptionsRefCountSubscription))
#define RxSubscriptionsRefCountSubscription_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@class RxSubscriptionsRefCountSubscription_State;

/*!
 @brief Keeps track of the sub-subscriptions and unsubscribes the underlying subscription once all sub-subscriptions
 have unsubscribed.
 */
@interface RxSubscriptionsRefCountSubscription : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *state_;
}

+ (RxSubscriptionsRefCountSubscription_State *)EMPTY_STATE;

#pragma mark Public

/*!
 @brief Creates a <code>RefCountSubscription</code> by wrapping the given non-null <code>Subscription</code>.
 @param s
 the <code>Subscription</code> to wrap
 @throws IllegalArgumentException
 if <code>s</code> is <code>null</code>
 */
- (instancetype)initWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Returns a new sub-subscription
 @return a new sub-subscription.
 */
- (id<RxSubscription>)get;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

#pragma mark Package-Private

- (void)unsubscribeAChild;

@end

J2OBJC_STATIC_INIT(RxSubscriptionsRefCountSubscription)

J2OBJC_FIELD_SETTER(RxSubscriptionsRefCountSubscription, state_, JavaUtilConcurrentAtomicAtomicReference *)

inline RxSubscriptionsRefCountSubscription_State *RxSubscriptionsRefCountSubscription_get_EMPTY_STATE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubscriptionsRefCountSubscription_State *RxSubscriptionsRefCountSubscription_EMPTY_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubscriptionsRefCountSubscription, EMPTY_STATE, RxSubscriptionsRefCountSubscription_State *)

FOUNDATION_EXPORT void RxSubscriptionsRefCountSubscription_initWithRxSubscription_(RxSubscriptionsRefCountSubscription *self, id<RxSubscription> s);

FOUNDATION_EXPORT RxSubscriptionsRefCountSubscription *new_RxSubscriptionsRefCountSubscription_initWithRxSubscription_(id<RxSubscription> s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsRefCountSubscription *create_RxSubscriptionsRefCountSubscription_initWithRxSubscription_(id<RxSubscription> s);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsRefCountSubscription)

#endif

#if !defined (RxSubscriptionsRefCountSubscription_State_) && (INCLUDE_ALL_RxSubscriptionsRefCountSubscription || defined(INCLUDE_RxSubscriptionsRefCountSubscription_State))
#define RxSubscriptionsRefCountSubscription_State_

@interface RxSubscriptionsRefCountSubscription_State : NSObject {
 @public
  jboolean isUnsubscribed_;
  jint children_;
}

#pragma mark Package-Private

- (instancetype)initWithBoolean:(jboolean)u
                        withInt:(jint)c;

- (RxSubscriptionsRefCountSubscription_State *)addChild;

- (RxSubscriptionsRefCountSubscription_State *)removeChild;

- (RxSubscriptionsRefCountSubscription_State *)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsRefCountSubscription_State)

FOUNDATION_EXPORT void RxSubscriptionsRefCountSubscription_State_initWithBoolean_withInt_(RxSubscriptionsRefCountSubscription_State *self, jboolean u, jint c);

FOUNDATION_EXPORT RxSubscriptionsRefCountSubscription_State *new_RxSubscriptionsRefCountSubscription_State_initWithBoolean_withInt_(jboolean u, jint c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsRefCountSubscription_State *create_RxSubscriptionsRefCountSubscription_State_initWithBoolean_withInt_(jboolean u, jint c);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsRefCountSubscription_State)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsRefCountSubscription")
