//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/SerialSubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsSerialSubscription")
#ifdef RESTRICT_RxSubscriptionsSerialSubscription
#define INCLUDE_ALL_RxSubscriptionsSerialSubscription 0
#else
#define INCLUDE_ALL_RxSubscriptionsSerialSubscription 1
#endif
#undef RESTRICT_RxSubscriptionsSerialSubscription

#if !defined (RxSubscriptionsSerialSubscription_) && (INCLUDE_ALL_RxSubscriptionsSerialSubscription || defined(INCLUDE_RxSubscriptionsSerialSubscription))
#define RxSubscriptionsSerialSubscription_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicReference;

/*!
 @brief Represents a subscription whose underlying subscription can be swapped for another subscription which causes
 the previous underlying subscription to be unsubscribed.
 */
@interface RxSubscriptionsSerialSubscription : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *state_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Retrieves the current <code>Subscription</code> that is being represented by this <code>SerialSubscription</code>.
 @return the current <code>Subscription</code> that is being represented by this <code>SerialSubscription</code>
 */
- (id<RxSubscription>)get;

- (jboolean)isUnsubscribed;

/*!
 @brief Swaps out the old <code>Subscription</code> for the specified <code>Subscription</code>.
 @param s
 the new <code>Subscription</code> to swap in
 @throws IllegalArgumentException
 if <code>s</code> is <code>null</code>
 */
- (void)setWithRxSubscription:(id<RxSubscription>)s;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsSerialSubscription)

J2OBJC_FIELD_SETTER(RxSubscriptionsSerialSubscription, state_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void RxSubscriptionsSerialSubscription_init(RxSubscriptionsSerialSubscription *self);

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription *new_RxSubscriptionsSerialSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsSerialSubscription *create_RxSubscriptionsSerialSubscription_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsSerialSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsSerialSubscription")
