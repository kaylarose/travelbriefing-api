//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subscriptions/MultipleAssignmentSubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriptionsMultipleAssignmentSubscription")
#ifdef RESTRICT_RxSubscriptionsMultipleAssignmentSubscription
#define INCLUDE_ALL_RxSubscriptionsMultipleAssignmentSubscription 0
#else
#define INCLUDE_ALL_RxSubscriptionsMultipleAssignmentSubscription 1
#endif
#undef RESTRICT_RxSubscriptionsMultipleAssignmentSubscription

#if !defined (RxSubscriptionsMultipleAssignmentSubscription_) && (INCLUDE_ALL_RxSubscriptionsMultipleAssignmentSubscription || defined(INCLUDE_RxSubscriptionsMultipleAssignmentSubscription))
#define RxSubscriptionsMultipleAssignmentSubscription_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicReference;

/*!
 @brief Subscription that can be checked for status such as in a loop inside an <code>Observable</code> to exit the loop
 if unsubscribed.
 */
@interface RxSubscriptionsMultipleAssignmentSubscription : NSObject < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *state_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Gets the underlying subscription.
 @return the <code>Subscription</code> that underlies the <code>MultipleAssignmentSubscription</code>
 */
- (id<RxSubscription>)get;

- (jboolean)isUnsubscribed;

/*!
 @brief Sets the underlying subscription.
 If the <code>MultipleAssignmentSubscription</code> is already unsubscribed,
 setting a new subscription causes the new subscription to also be immediately unsubscribed.
 @param s the <code>Subscription</code> to set
 @throws IllegalArgumentException if <code>s</code> is <code>null</code>
 */
- (void)setWithRxSubscription:(id<RxSubscription>)s;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriptionsMultipleAssignmentSubscription)

J2OBJC_FIELD_SETTER(RxSubscriptionsMultipleAssignmentSubscription, state_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void RxSubscriptionsMultipleAssignmentSubscription_init(RxSubscriptionsMultipleAssignmentSubscription *self);

FOUNDATION_EXPORT RxSubscriptionsMultipleAssignmentSubscription *new_RxSubscriptionsMultipleAssignmentSubscription_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubscriptionsMultipleAssignmentSubscription *create_RxSubscriptionsMultipleAssignmentSubscription_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriptionsMultipleAssignmentSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriptionsMultipleAssignmentSubscription")
