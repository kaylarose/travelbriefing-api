//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorDistinct.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDistinct")
#ifdef RESTRICT_RxInternalOperatorsOperatorDistinct
#define INCLUDE_ALL_RxInternalOperatorsOperatorDistinct 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorDistinct 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorDistinct

#if !defined (RxInternalOperatorsOperatorDistinct_) && (INCLUDE_ALL_RxInternalOperatorsOperatorDistinct || defined(INCLUDE_RxInternalOperatorsOperatorDistinct))
#define RxInternalOperatorsOperatorDistinct_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc1;

/*!
 @brief Returns an Observable that emits all distinct items emitted by the source.
 */
@interface RxInternalOperatorsOperatorDistinct : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc1> keySelector_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

/*!
 @brief Returns a singleton instance of OperatorDistinct that was built using 
 the identity function for comparison (<code>new OperatorDistinct(UtilityFunctions.identity())</code>).
 @return Operator that emits distinct values only (regardless of order) using the identity function for comparison
 */
+ (RxInternalOperatorsOperatorDistinct *)instance;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDistinct)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDistinct, keySelector_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinct *RxInternalOperatorsOperatorDistinct_instance();

FOUNDATION_EXPORT void RxInternalOperatorsOperatorDistinct_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorDistinct *self, id<RxFunctionsFunc1> keySelector);

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinct *new_RxInternalOperatorsOperatorDistinct_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinct *create_RxInternalOperatorsOperatorDistinct_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorDistinct)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDistinct")
