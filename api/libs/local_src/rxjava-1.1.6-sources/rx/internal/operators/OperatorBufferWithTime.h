//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorBufferWithTime.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime")
#ifdef RESTRICT_RxInternalOperatorsOperatorBufferWithTime
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorBufferWithTime

#if !defined (RxInternalOperatorsOperatorBufferWithTime_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithTime))
#define RxInternalOperatorsOperatorBufferWithTime_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

/*!
 @brief This operation takes
 values from the specified <code>Observable</code> source and stores them in a buffer.
 Periodically the buffer
 is emitted and replaced with a new buffer. How often this is done depends on the specified timespan.
 The creation of chunks is also periodical. How often this is done depends on the specified timeshift.
 When the source <code>Observable</code> completes or produces an error, the current buffer is emitted, and
 the event is propagated to all subscribed <code>Subscriber</code>s.
 <p>
 Note that this operation can produce <strong>non-connected, or overlapping chunks</strong> depending
 on the input parameters.
 </p>
 */
@interface RxInternalOperatorsOperatorBufferWithTime : NSObject < RxObservable_Operator > {
 @public
  jlong timespan_;
  jlong timeshift_;
  JavaUtilConcurrentTimeUnit *unit_;
  jint count_;
  RxScheduler *scheduler_;
}

#pragma mark Public

/*!
 @param timespan
 the amount of time all chunks must be actively collect values before being emitted
 @param timeshift
 the amount of time between creating chunks
 @param unit
 the <code>TimeUnit</code> defining the unit of time for the timespan
 @param count
 the maximum size of the buffer. Once a buffer reaches this size, it is emitted
 @param scheduler
 the <code>Scheduler</code> to use for timing chunks
 */
- (instancetype)initWithLong:(jlong)timespan
                    withLong:(jlong)timeshift
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withInt:(jint)count
             withRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(RxInternalOperatorsOperatorBufferWithTime *self, jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime *new_RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime *create_RxInternalOperatorsOperatorBufferWithTime_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong timespan, jlong timeshift, JavaUtilConcurrentTimeUnit *unit, jint count, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithTime)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber))
#define RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorBufferWithTime;
@class RxScheduler_Worker;
@protocol JavaUtilList;

/*!
 @brief Subscriber when the buffer chunking time and length differ.
 */
@interface RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  RxScheduler_Worker *inner_;
  /*!
   @brief Guarded by this.
   */
  id<JavaUtilList> chunks_;
  /*!
   @brief Guarded by this.
   */
  jboolean done_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime:(RxInternalOperatorsOperatorBufferWithTime *)outer$
                                                 withRxSubscriber:(RxSubscriber *)child
                                           withRxScheduler_Worker:(RxScheduler_Worker *)inner;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (void)emitChunkWithJavaUtilList:(id<JavaUtilList>)chunkToEmit;

- (void)scheduleChunk;

- (void)startNewChunk;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber, inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber, chunks_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *self, RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *new_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber *create_RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithTime_InexactSubscriber)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber))
#define RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorBufferWithTime;
@class RxScheduler_Worker;
@protocol JavaUtilList;

/*!
 @brief Subscriber when exact timed chunking is required.
 */
@interface RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  RxScheduler_Worker *inner_;
  /*!
   @brief Guarded by this.
   */
  id<JavaUtilList> chunk_;
  /*!
   @brief Guarded by this.
   */
  jboolean done_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithTime:(RxInternalOperatorsOperatorBufferWithTime *)outer$
                                                 withRxSubscriber:(RxSubscriber *)child
                                           withRxScheduler_Worker:(RxScheduler_Worker *)inner;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (void)emit;

- (void)scheduleExact;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber, inner_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber, chunk_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *self, RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *new_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber *create_RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber_initWithRxInternalOperatorsOperatorBufferWithTime_withRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOperatorBufferWithTime *outer$, RxSubscriber *child, RxScheduler_Worker *inner);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithTime_ExactSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithTime")
