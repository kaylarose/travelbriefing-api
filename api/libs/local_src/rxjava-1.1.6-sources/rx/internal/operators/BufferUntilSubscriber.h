//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/BufferUntilSubscriber.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber")
#ifdef RESTRICT_RxInternalOperatorsBufferUntilSubscriber
#define INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber 1
#endif
#undef RESTRICT_RxInternalOperatorsBufferUntilSubscriber

#if !defined (RxInternalOperatorsBufferUntilSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber || defined(INCLUDE_RxInternalOperatorsBufferUntilSubscriber))
#define RxInternalOperatorsBufferUntilSubscriber_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

@class RxInternalOperatorsBufferUntilSubscriber_State;
@protocol RxObserver;

/*!
 @brief A solution to the "time gap" problem that occurs with <code>groupBy</code> and <code>pivot</code>.
 <p>
 This currently has temporary unbounded buffers. It needs to become bounded and then do one of two things:
 <ol>
 <li>blow up and make the user do something about it</li>
 <li>work with the backpressure solution ... still to be implemented (such as co-routines)</li>
 </ol><p>
 Generally the buffer should be very short lived (milliseconds) and then stops being involved. It can become a
 memory leak though if a <code>GroupedObservable</code> backed by this class is emitted but never subscribed to
 (such as filtered out). In that case, either a time-bomb to throw away the buffer, or just blowing up and
 making the user do something about it is needed.
 <p>
 For example, to filter out <code>GroupedObservable</code>s, perhaps they need a silent <code>subscribe()</code> on them
 to just blackhole the data.
 <p>
 This is an initial start at solving this problem and solves the immediate problem of <code>groupBy</code> and
 <code>pivot</code> and trades off the possibility of memory leak for deterministic functionality.
 - seealso: <a href="https://github.com/ReactiveX/RxJava/issues/844">the Github issue describing the time gap problem</a>
 */
@interface RxInternalOperatorsBufferUntilSubscriber : RxSubjectsSubject {
 @public
  RxInternalOperatorsBufferUntilSubscriber_State *state_;
}

+ (id<RxObserver>)EMPTY_OBSERVER;

#pragma mark Public

/*!
 @brief Creates a default, unbounded buffering Subject instance.
 @return the instance
 */
+ (RxInternalOperatorsBufferUntilSubscriber *)create;

- (jboolean)hasObservers;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsBufferUntilSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBufferUntilSubscriber, state_, RxInternalOperatorsBufferUntilSubscriber_State *)

inline id<RxObserver> RxInternalOperatorsBufferUntilSubscriber_get_EMPTY_OBSERVER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<RxObserver> RxInternalOperatorsBufferUntilSubscriber_EMPTY_OBSERVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsBufferUntilSubscriber, EMPTY_OBSERVER, id<RxObserver>)

FOUNDATION_EXPORT RxInternalOperatorsBufferUntilSubscriber *RxInternalOperatorsBufferUntilSubscriber_create();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBufferUntilSubscriber)

#endif

#if !defined (RxInternalOperatorsBufferUntilSubscriber_State_) && (INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber || defined(INCLUDE_RxInternalOperatorsBufferUntilSubscriber_State))
#define RxInternalOperatorsBufferUntilSubscriber_State_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

@class JavaUtilConcurrentConcurrentLinkedQueue;
@class RxInternalOperatorsNotificationLite;
@protocol RxObserver;

/*!
 @brief The common state.
 */
@interface RxInternalOperatorsBufferUntilSubscriber_State : JavaUtilConcurrentAtomicAtomicReference {
 @public
  id guard_;
  jboolean emitting_;
  JavaUtilConcurrentConcurrentLinkedQueue *buffer_;
  RxInternalOperatorsNotificationLite *nl_;
}

#pragma mark Public

- (id<RxObserver>)get;

- (id<RxObserver>)getAndSetWithId:(id<RxObserver>)arg0;

#pragma mark Package-Private

- (instancetype)init;

- (jboolean)casObserverRefWithRxObserver:(id<RxObserver>)expected
                          withRxObserver:(id<RxObserver>)next;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBufferUntilSubscriber_State)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBufferUntilSubscriber_State, guard_, id)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBufferUntilSubscriber_State, buffer_, JavaUtilConcurrentConcurrentLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBufferUntilSubscriber_State, nl_, RxInternalOperatorsNotificationLite *)

FOUNDATION_EXPORT void RxInternalOperatorsBufferUntilSubscriber_State_init(RxInternalOperatorsBufferUntilSubscriber_State *self);

FOUNDATION_EXPORT RxInternalOperatorsBufferUntilSubscriber_State *new_RxInternalOperatorsBufferUntilSubscriber_State_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBufferUntilSubscriber_State *create_RxInternalOperatorsBufferUntilSubscriber_State_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBufferUntilSubscriber_State)

#endif

#if !defined (RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction_) && (INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber || defined(INCLUDE_RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction))
#define RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxInternalOperatorsBufferUntilSubscriber_State;
@class RxSubscriber;

@interface RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction : NSObject < RxObservable_OnSubscribe > {
 @public
  RxInternalOperatorsBufferUntilSubscriber_State *state_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsBufferUntilSubscriber_State:(RxInternalOperatorsBufferUntilSubscriber_State *)state;

- (void)callWithId:(RxSubscriber *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction, state_, RxInternalOperatorsBufferUntilSubscriber_State *)

FOUNDATION_EXPORT void RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction_initWithRxInternalOperatorsBufferUntilSubscriber_State_(RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction *self, RxInternalOperatorsBufferUntilSubscriber_State *state);

FOUNDATION_EXPORT RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction *new_RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction_initWithRxInternalOperatorsBufferUntilSubscriber_State_(RxInternalOperatorsBufferUntilSubscriber_State *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction *create_RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction_initWithRxInternalOperatorsBufferUntilSubscriber_State_(RxInternalOperatorsBufferUntilSubscriber_State *state);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBufferUntilSubscriber_OnSubscribeAction)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBufferUntilSubscriber")
