//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorMaterialize.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMaterialize")
#ifdef RESTRICT_RxInternalOperatorsOperatorMaterialize
#define INCLUDE_ALL_RxInternalOperatorsOperatorMaterialize 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorMaterialize 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorMaterialize

#if !defined (RxInternalOperatorsOperatorMaterialize_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMaterialize || defined(INCLUDE_RxInternalOperatorsOperatorMaterialize))
#define RxInternalOperatorsOperatorMaterialize_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief Turns all of the notifications from an Observable into <code>onNext</code> emissions, and marks
 them with their original notification types within <code>Notification</code> objects.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/materialize.png" alt="">
 <p>
 See <a href="http://msdn.microsoft.com/en-us/library/hh229453.aspx">here</a> for the Microsoft Rx equivalent.
 */
@interface RxInternalOperatorsOperatorMaterialize : NSObject < RxObservable_Operator >

#pragma mark Public

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

/*!
 @return a singleton instance of this stateless operator.
 */
+ (RxInternalOperatorsOperatorMaterialize *)instance;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMaterialize)

FOUNDATION_EXPORT RxInternalOperatorsOperatorMaterialize *RxInternalOperatorsOperatorMaterialize_instance();

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMaterialize_init(RxInternalOperatorsOperatorMaterialize *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMaterialize *new_RxInternalOperatorsOperatorMaterialize_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMaterialize *create_RxInternalOperatorsOperatorMaterialize_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMaterialize)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMaterialize")
