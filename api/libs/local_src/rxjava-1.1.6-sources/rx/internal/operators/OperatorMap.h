//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorMap.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMap")
#ifdef RESTRICT_RxInternalOperatorsOperatorMap
#define INCLUDE_ALL_RxInternalOperatorsOperatorMap 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorMap 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorMap

#if !defined (RxInternalOperatorsOperatorMap_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMap || defined(INCLUDE_RxInternalOperatorsOperatorMap))
#define RxInternalOperatorsOperatorMap_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc1;

/*!
 @brief Applies a function of your choosing to every item emitted by an <code>Observable</code>, and emits the results of
 this transformation as a new <code>Observable</code>.
 <p>
 <img width="640" height="305" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/map.png" alt="">
 */
@interface RxInternalOperatorsOperatorMap : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc1> transformer_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)transformer;

- (RxSubscriber *)callWithId:(RxSubscriber *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMap)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMap, transformer_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMap_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorMap *self, id<RxFunctionsFunc1> transformer);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMap *new_RxInternalOperatorsOperatorMap_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMap *create_RxInternalOperatorsOperatorMap_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> transformer);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMap)

#endif

#if !defined (RxInternalOperatorsOperatorMap_MapSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMap || defined(INCLUDE_RxInternalOperatorsOperatorMap_MapSubscriber))
#define RxInternalOperatorsOperatorMap_MapSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@protocol RxFunctionsFunc1;
@protocol RxProducer;

@interface RxInternalOperatorsOperatorMap_MapSubscriber : RxSubscriber {
 @public
  RxSubscriber *actual_;
  id<RxFunctionsFunc1> mapper_;
  jboolean done_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)mapper;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMap_MapSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMap_MapSubscriber, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMap_MapSubscriber, mapper_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMap_MapSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxInternalOperatorsOperatorMap_MapSubscriber *self, RxSubscriber *actual, id<RxFunctionsFunc1> mapper);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMap_MapSubscriber *new_RxInternalOperatorsOperatorMap_MapSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMap_MapSubscriber *create_RxInternalOperatorsOperatorMap_MapSubscriber_initWithRxSubscriber_withRxFunctionsFunc1_(RxSubscriber *actual, id<RxFunctionsFunc1> mapper);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMap_MapSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMap")
