//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeThrow.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeThrow")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeThrow
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeThrow 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeThrow 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeThrow

#if !defined (RxInternalOperatorsOnSubscribeThrow_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeThrow || defined(INCLUDE_RxInternalOperatorsOnSubscribeThrow))
#define RxInternalOperatorsOnSubscribeThrow_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief An Observable that invokes <code>onError</code> when the <code>Observer</code> subscribes to it.
 */
@interface RxInternalOperatorsOnSubscribeThrow : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)initWithNSException:(NSException *)exception;

/*!
 @brief Accepts an <code>Observer</code> and calls its <code>onError</code> method.
 @param observer
 an <code>Observer</code> of this Observable
 */
- (void)callWithId:(RxSubscriber *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeThrow)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeThrow_initWithNSException_(RxInternalOperatorsOnSubscribeThrow *self, NSException *exception);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeThrow *new_RxInternalOperatorsOnSubscribeThrow_initWithNSException_(NSException *exception) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeThrow *create_RxInternalOperatorsOnSubscribeThrow_initWithNSException_(NSException *exception);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeThrow)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeThrow")
