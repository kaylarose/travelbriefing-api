//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeJoin.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeJoin
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeJoin

#if !defined (RxInternalOperatorsOnSubscribeJoin_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin))
#define RxInternalOperatorsOnSubscribeJoin_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxObservable;
@class RxSubscriber;
@protocol RxFunctionsFunc1;
@protocol RxFunctionsFunc2;

/*!
 @brief Correlates the elements of two sequences based on overlapping durations.
 */
@interface RxInternalOperatorsOnSubscribeJoin : NSObject < RxObservable_OnSubscribe > {
 @public
  RxObservable *left_;
  RxObservable *right_;
  id<RxFunctionsFunc1> leftDurationSelector_;
  id<RxFunctionsFunc1> rightDurationSelector_;
  id<RxFunctionsFunc2> resultSelector_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)left
                    withRxObservable:(RxObservable *)right
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)leftDurationSelector
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)rightDurationSelector
                withRxFunctionsFunc2:(id<RxFunctionsFunc2>)resultSelector;

- (void)callWithId:(RxSubscriber *)t1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin, left_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin, right_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin, leftDurationSelector_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin, rightDurationSelector_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin, resultSelector_, id<RxFunctionsFunc2>)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_initWithRxObservable_withRxObservable_withRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc2_(RxInternalOperatorsOnSubscribeJoin *self, RxObservable *left, RxObservable *right, id<RxFunctionsFunc1> leftDurationSelector, id<RxFunctionsFunc1> rightDurationSelector, id<RxFunctionsFunc2> resultSelector);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin *new_RxInternalOperatorsOnSubscribeJoin_initWithRxObservable_withRxObservable_withRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc2_(RxObservable *left, RxObservable *right, id<RxFunctionsFunc1> leftDurationSelector, id<RxFunctionsFunc1> rightDurationSelector, id<RxFunctionsFunc2> resultSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin *create_RxInternalOperatorsOnSubscribeJoin_initWithRxObservable_withRxObservable_withRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc2_(RxObservable *left, RxObservable *right, id<RxFunctionsFunc1> leftDurationSelector, id<RxFunctionsFunc1> rightDurationSelector, id<RxFunctionsFunc2> resultSelector);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin)

#endif

#if !defined (RxInternalOperatorsOnSubscribeJoin_ResultSink_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin_ResultSink))
#define RxInternalOperatorsOnSubscribeJoin_ResultSink_

@class RxInternalOperatorsOnSubscribeJoin;
@class RxSubscriber;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilMap;

/*!
 @brief Manage the left and right sources.
 */
@interface RxInternalOperatorsOnSubscribeJoin_ResultSink : NSObject {
 @public
  RxSubscriptionsCompositeSubscription *group_;
  RxSubscriber *subscriber_;
  id guard_;
  /*!
   @brief Guarded by guard.
   */
  jboolean leftDone_;
  /*!
   @brief Guarded by guard.
   */
  jint leftId_;
  /*!
   @brief Guarded by guard.
   */
  id<JavaUtilMap> leftMap_;
  /*!
   @brief Guarded by guard.
   */
  jboolean rightDone_;
  /*!
   @brief Guarded by guard.
   */
  jint rightId_;
  /*!
   @brief Guarded by guard.
   */
  id<JavaUtilMap> rightMap_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOnSubscribeJoin:(RxInternalOperatorsOnSubscribeJoin *)outer$
                                          withRxSubscriber:(RxSubscriber *)subscriber;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin_ResultSink)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin_ResultSink, group_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin_ResultSink, subscriber_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin_ResultSink, guard_, id)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin_ResultSink, leftMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeJoin_ResultSink, rightMap_, id<JavaUtilMap>)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_ResultSink_initWithRxInternalOperatorsOnSubscribeJoin_withRxSubscriber_(RxInternalOperatorsOnSubscribeJoin_ResultSink *self, RxInternalOperatorsOnSubscribeJoin *outer$, RxSubscriber *subscriber);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink *new_RxInternalOperatorsOnSubscribeJoin_ResultSink_initWithRxInternalOperatorsOnSubscribeJoin_withRxSubscriber_(RxInternalOperatorsOnSubscribeJoin *outer$, RxSubscriber *subscriber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink *create_RxInternalOperatorsOnSubscribeJoin_ResultSink_initWithRxInternalOperatorsOnSubscribeJoin_withRxSubscriber_(RxInternalOperatorsOnSubscribeJoin *outer$, RxSubscriber *subscriber);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin_ResultSink)

#endif

#if !defined (RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber))
#define RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOnSubscribeJoin_ResultSink;
@protocol RxSubscription;

/*!
 @brief Observes the left values.
 */
@interface RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber : RxSubscriber

#pragma mark Public

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

#pragma mark Protected

- (void)expireWithInt:(jint)id_
   withRxSubscription:(id<RxSubscription>)resource;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsOnSubscribeJoin_ResultSink:(RxInternalOperatorsOnSubscribeJoin_ResultSink *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *self, RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *new_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *create_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber)

#endif

#if !defined (RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber))
#define RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber;

/*!
 @brief Observes the left duration.
 */
@interface RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber : RxSubscriber {
 @public
  jint id__;
  jboolean once_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber:(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *)outer$
                                                                             withInt:(jint)id_;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber *self, RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *outer$, jint id_);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber *new_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *outer$, jint id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber *create_RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber *outer$, jint id_);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin_ResultSink_LeftSubscriber_LeftDurationSubscriber)

#endif

#if !defined (RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber))
#define RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOnSubscribeJoin_ResultSink;
@protocol RxSubscription;

/*!
 @brief Observes the right values.
 */
@interface RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber : RxSubscriber

#pragma mark Public

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsOnSubscribeJoin_ResultSink:(RxInternalOperatorsOnSubscribeJoin_ResultSink *)outer$;

- (void)expireWithInt:(jint)id_
   withRxSubscription:(id<RxSubscription>)resource;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *self, RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *new_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *create_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_(RxInternalOperatorsOnSubscribeJoin_ResultSink *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber)

#endif

#if !defined (RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin || defined(INCLUDE_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber))
#define RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber;

/*!
 @brief Observe the right duration.
 */
@interface RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber : RxSubscriber {
 @public
  jint id__;
  jboolean once_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber:(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *)outer$
                                                                              withInt:(jint)id_;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)args;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber *self, RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *outer$, jint id_);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber *new_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *outer$, jint id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber *create_RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber_initWithRxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_withInt_(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber *outer$, jint id_);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeJoin_ResultSink_RightSubscriber_RightDurationSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeJoin")
