//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribePublishMulticast.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribePublishMulticast
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribePublishMulticast

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast))
#define RxInternalOperatorsOnSubscribePublishMulticast_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class IOSObjectArray;
@class RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber;
@class RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer;
@class RxSubscriber;
@protocol JavaUtilQueue;
@protocol RxProducer;

/*!
 @brief Multicasts notifications coming through its input Subscriber view to its
 client Subscribers via lockstep backpressure mode.
 <p>The difference between this class and OperatorPublish is that this
 class doesn't consume the upstream if there are no child subscribers but
 waits for them to show up. Plus if the upstream source terminates, late
 subscribers will be immediately terminated with the same terminal event
 unlike OperatorPublish which just waits for the next connection.
 <p>The class extends AtomicInteger which is the work-in-progress gate
 for the drain-loop serializing subscriptions and child request changes.
 */
@interface RxInternalOperatorsOnSubscribePublishMulticast : JavaUtilConcurrentAtomicAtomicInteger < RxObservable_OnSubscribe, RxObserver, RxSubscription > {
 @public
  /*!
   @brief The prefetch queue holding onto a fixed amount of items until all
 all child subscribers have requested something.
   */
  id<JavaUtilQueue> queue_;
  /*!
   @brief The number of items to prefetch from the upstreams source.
   */
  jint prefetch_;
  /*!
   @brief Delays the error delivery to happen only after all values have been consumed.
   */
  jboolean delayError_;
  /*!
   @brief The subscriber that can be 'connected' to the upstream source.
   */
  RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *parent_;
  /*!
   @brief Indicates the upstream has completed.
   */
  volatile_jboolean done_;
  /*!
   @brief Holds onto the upstream's exception if done is true and this field is non-null.
   <p>This field must be read after done or if subscribers == TERMINATED to
 establish a proper happens-before. 
   */
  NSException *error_;
  /*!
   @brief Holds the upstream producer if any, set through the parent subscriber.
   */
  volatile_id producer_;
  /*!
   @brief A copy-on-write array of currently subscribed child subscribers' wrapper structure.
   */
  volatile_id subscribers_;
}

+ (IOSObjectArray *)EMPTY;

+ (IOSObjectArray *)TERMINATED;

#pragma mark Public

/*!
 @brief Constructor, initializes the fields
 @param prefetch the prefetch amount, &gt; 0 required
 @param delayError delay the error delivery after the normal items?
 @throws IllegalArgumentException if prefetch &lt;= 0
 */
- (instancetype)initWithInt:(jint)prefetch
                withBoolean:(jboolean)delayError;

- (void)callWithId:(RxSubscriber *)t;

- (jboolean)isUnsubscribed;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

/*!
 @brief Returns the input subscriber of this class that must be subscribed
 to the upstream source.
 @return the subscriber instance
 */
- (RxSubscriber *)subscriber;

- (void)unsubscribe;

#pragma mark Package-Private

/*!
 @brief Atomically adds the given wrapper of a child Subscriber to the subscribers array.
 @param inner the wrapper
 @return true if successful, false if the terminal state has been reached in the meantime
 */
- (jboolean)addWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner;

/*!
 @brief Given the current source state, terminates all child subscribers.
 @param d the source-done indicator
 @param empty the queue-emptiness indicator
 @return true if the class reached its terminal state
 */
- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty;

/*!
 @brief The serialization loop that determines the minimum request of
 all subscribers and tries to emit as many items from the queue if
 they are available.
 <p>The execution of the drain-loop is guaranteed to be thread-safe.
 */
- (void)drain;

/*!
 @brief Atomically removes the given wrapper, if present, from the subscribers array.
 @param inner the wrapper to remove
 */
- (void)removeWithRxInternalOperatorsOnSubscribePublishMulticast_PublishProducer:(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *)inner;

/*!
 @brief Sets the main producer and issues the prefetch amount.
 @param p the producer to set
 */
- (void)setProducerWithRxProducer:(id<RxProducer>)p;

/*!
 @brief Atomically swaps in the terminated state.
 @return the last set of subscribers before the state change or an empty array
 */
- (IOSObjectArray *)terminate;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, parent_, RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, error_, NSException *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, producer_, id<RxProducer>)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast, subscribers_, IOSObjectArray *)

/*!
 @brief Represents an empty array of subscriber wrapper, 
 helps avoid allocating an empty array all the time.
 */
inline IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribePublishMulticast, EMPTY, IOSObjectArray *)

/*!
 @brief Represents a final state for this class that prevents new subscribers
 from subscribing to it.
 */
inline IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsOnSubscribePublishMulticast_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribePublishMulticast, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(RxInternalOperatorsOnSubscribePublishMulticast *self, jint prefetch, jboolean delayError);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast *new_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast *create_RxInternalOperatorsOnSubscribePublishMulticast_initWithInt_withBoolean_(jint prefetch, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast)

#endif

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber))
#define RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOnSubscribePublishMulticast;
@protocol RxProducer;

/*!
 @brief The subscriber that must be used for subscribing to the upstream source.
 */
@interface RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber : RxSubscriber {
 @public
  /*!
   @brief The reference to the parent state where the events are forwarded to.
   */
  RxInternalOperatorsOnSubscribePublishMulticast *state_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)state;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber, state_, RxInternalOperatorsOnSubscribePublishMulticast *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *self, RxInternalOperatorsOnSubscribePublishMulticast *state);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *new_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber *create_RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber_initWithRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast *state);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast_ParentSubscriber)

#endif

#if !defined (RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast || defined(INCLUDE_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer))
#define RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class RxInternalOperatorsOnSubscribePublishMulticast;
@class RxSubscriber;

/*!
 @brief A Producer and Subscription that wraps a child Subscriber and manages
 its backpressure requests along with its unsubscription from the parent
 class.
 <p>The class extends AtomicLong that holds onto the child's requested amount.
 */
@interface RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer, RxSubscription > {
 @public
  /*!
   @brief The actual subscriber to receive the events.
   */
  RxSubscriber *actual_;
  /*!
   @brief The parent object to request draining or removal.
   */
  RxInternalOperatorsOnSubscribePublishMulticast *parent_;
  /*!
   @brief Makes sure unsubscription happens only once.
   */
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
withRxInternalOperatorsOnSubscribePublishMulticast:(RxInternalOperatorsOnSubscribePublishMulticast *)parent;

- (jboolean)isUnsubscribed;

- (void)requestWithLong:(jlong)n;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, parent_, RxInternalOperatorsOnSubscribePublishMulticast *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer, once_, JavaUtilConcurrentAtomicAtomicBoolean *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *self, RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *new_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer *create_RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer_initWithRxSubscriber_withRxInternalOperatorsOnSubscribePublishMulticast_(RxSubscriber *actual, RxInternalOperatorsOnSubscribePublishMulticast *parent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribePublishMulticast_PublishProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribePublishMulticast")
