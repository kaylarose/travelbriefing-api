//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/CompletableOnSubscribeMergeDelayErrorIterable.java
//

#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Iterator.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "rx/Completable.h"
#include "rx/Subscription.h"
#include "rx/internal/operators/CompletableOnSubscribeMerge.h"
#include "rx/internal/operators/CompletableOnSubscribeMergeDelayErrorIterable.h"
#include "rx/internal/util/unsafe/MpscLinkedQueue.h"
#include "rx/subscriptions/CompositeSubscription.h"

@interface RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 : NSObject < RxCompletable_CompletableSubscriber > {
 @public
  RxSubscriptionsCompositeSubscription *val$set_;
  id<JavaUtilQueue> val$queue_;
  JavaUtilConcurrentAtomicAtomicInteger *val$wip_;
  id<RxCompletable_CompletableSubscriber> val$s_;
}

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (void)tryTerminate;

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                           withJavaUtilQueue:(id<JavaUtilQueue>)capture$1
                   withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                     withRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, val$set_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, val$queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, val$wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, val$s_, id<RxCompletable_CompletableSubscriber>)

__attribute__((unused)) static void RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *self, RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3);

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *new_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *create_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1)

@implementation RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources {
  RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_initWithJavaLangIterable_(self, sources);
  return self;
}

- (void)callWithId:(id<RxCompletable_CompletableSubscriber>)s {
  RxSubscriptionsCompositeSubscription *set = new_RxSubscriptionsCompositeSubscription_init();
  JavaUtilConcurrentAtomicAtomicInteger *wip = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1);
  id<JavaUtilQueue> queue = new_RxInternalUtilUnsafeMpscLinkedQueue_init();
  [((id<RxCompletable_CompletableSubscriber>) nil_chk(s)) onSubscribeWithRxSubscription:set];
  id<JavaUtilIterator> iterator;
  @try {
    iterator = [((id<JavaLangIterable>) nil_chk(sources_)) iterator];
  }
  @catch (NSException *e) {
    [s onErrorWithNSException:e];
    return;
  }
  if (iterator == nil) {
    [s onErrorWithNSException:new_JavaLangNullPointerException_initWithNSString_(@"The source iterator returned is null")];
    return;
  }
  for (; ; ) {
    if ([set isUnsubscribed]) {
      return;
    }
    jboolean b;
    @try {
      b = [iterator hasNext];
    }
    @catch (NSException *e) {
      [queue offerWithId:e];
      if ([wip decrementAndGet] == 0) {
        if ([queue isEmpty]) {
          [s onCompleted];
        }
        else {
          [s onErrorWithNSException:RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(queue)];
        }
      }
      return;
    }
    if (!b) {
      break;
    }
    if ([set isUnsubscribed]) {
      return;
    }
    RxCompletable *c;
    @try {
      c = [iterator next];
    }
    @catch (NSException *e) {
      [queue offerWithId:e];
      if ([wip decrementAndGet] == 0) {
        if ([queue isEmpty]) {
          [s onCompleted];
        }
        else {
          [s onErrorWithNSException:RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(queue)];
        }
      }
      return;
    }
    if ([set isUnsubscribed]) {
      return;
    }
    if (c == nil) {
      JavaLangNullPointerException *e = new_JavaLangNullPointerException_initWithNSString_(@"A completable source is null");
      [queue offerWithId:e];
      if ([wip decrementAndGet] == 0) {
        if ([queue isEmpty]) {
          [s onCompleted];
        }
        else {
          [s onErrorWithNSException:RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(queue)];
        }
      }
      return;
    }
    [wip getAndIncrement];
    [c unsafeSubscribeWithRxCompletable_CompletableSubscriber:new_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(set, queue, wip, s)];
  }
  if ([wip decrementAndGet] == 0) {
    if ([queue isEmpty]) {
      [s onCompleted];
    }
    else {
      [s onErrorWithNSException:RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(queue)];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangIterable:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "callWithId:", "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lrx/Completable;>;)V", "call", "LRxCompletable_CompletableSubscriber;", "Ljava/lang/Iterable<+Lrx/Completable;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable = { "CompletableOnSubscribeMergeDelayErrorIterable", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable;
}

@end

void RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_initWithJavaLangIterable_(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable *self, id<JavaLangIterable> sources) {
  NSObject_init(self);
  self->sources_ = sources;
}

RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable *new_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable, initWithJavaLangIterable_, sources)
}

RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable *create_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable, initWithJavaLangIterable_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable)

@implementation RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d {
  [((RxSubscriptionsCompositeSubscription *) nil_chk(val$set_)) addWithRxSubscription:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<JavaUtilQueue>) nil_chk(val$queue_)) offerWithId:e];
  [self tryTerminate];
}

- (void)onCompleted {
  [self tryTerminate];
}

- (void)tryTerminate {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$wip_)) decrementAndGet] == 0) {
    if ([((id<JavaUtilQueue>) nil_chk(val$queue_)) isEmpty]) {
      [((id<RxCompletable_CompletableSubscriber>) nil_chk(val$s_)) onCompleted];
    }
    else {
      [((id<RxCompletable_CompletableSubscriber>) nil_chk(val$s_)) onErrorWithNSException:RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(val$queue_)];
    }
  }
}

- (instancetype)initWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)capture$0
                                           withJavaUtilQueue:(id<JavaUtilQueue>)capture$1
                   withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                     withRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)capture$3 {
  RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSubscribeWithRxSubscription:", "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "tryTerminate", "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { "initWithRxSubscriptionsCompositeSubscription:withJavaUtilQueue:withJavaUtilConcurrentAtomicAtomicInteger:withRxCompletable_CompletableSubscriber:", NULL, 0x0, -1, 4, -1, 5, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
    { "val$wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LRxCompletable_CompletableSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LRxSubscription;", "onError", "LNSException;", "LRxSubscriptionsCompositeSubscription;LJavaUtilQueue;LJavaUtilConcurrentAtomicAtomicInteger;LRxCompletable_CompletableSubscriber;", "(Lrx/subscriptions/CompositeSubscription;Ljava/util/Queue<Ljava/lang/Throwable;>;Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Completable$CompletableSubscriber;)V", "Ljava/util/Queue<Ljava/lang/Throwable;>;", "LRxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 5, 4, 7, -1, 8, -1, -1 };
  return &_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1;
}

@end

void RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *self, RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3) {
  self->val$set_ = capture$0;
  self->val$queue_ = capture$1;
  self->val$wip_ = capture$2;
  self->val$s_ = capture$3;
  NSObject_init(self);
}

RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *new_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_, capture$0, capture$1, capture$2, capture$3)
}

RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1 *create_RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1_initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_(RxSubscriptionsCompositeSubscription *capture$0, id<JavaUtilQueue> capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<RxCompletable_CompletableSubscriber> capture$3) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1, initWithRxSubscriptionsCompositeSubscription_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicInteger_withRxCompletable_CompletableSubscriber_, capture$0, capture$1, capture$2, capture$3)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsCompletableOnSubscribeMergeDelayErrorIterable_$1)
