//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/NotificationLite.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsNotificationLite")
#ifdef RESTRICT_RxInternalOperatorsNotificationLite
#define INCLUDE_ALL_RxInternalOperatorsNotificationLite 0
#else
#define INCLUDE_ALL_RxInternalOperatorsNotificationLite 1
#endif
#undef RESTRICT_RxInternalOperatorsNotificationLite

#if !defined (RxInternalOperatorsNotificationLite_) && (INCLUDE_ALL_RxInternalOperatorsNotificationLite || defined(INCLUDE_RxInternalOperatorsNotificationLite))
#define RxInternalOperatorsNotificationLite_

@class RxNotification_Kind;
@protocol RxObserver;

/*!
 @brief For use in internal operators that need something like materialize and dematerialize wholly within the
 implementation of the operator but don't want to incur the allocation cost of actually creating
 <code>rx.Notification</code> objects for every <code>onNext</code> and
 <code>onCompleted</code>.
 <p>
 An object is allocated inside <code>error(Throwable)</code> to wrap the <code>Throwable</code> but this shouldn't
 affect performance because exceptions should be exceptionally rare.
 <p>
 It's implemented as a singleton to maintain some semblance of type safety that is completely non-existent.
  type param undescribed
 */
@interface RxInternalOperatorsNotificationLite : NSObject

#pragma mark Public

/*!
 @brief Unwraps the lite notification and calls the appropriate method on the <code>Observer</code>.
 @param o
 the <code>Observer</code> to call <code>onNext</code>, <code>onCompleted</code>, or <code>onError</code>.
 @param n
 the lite notification
 @return <code>true</code> if <code>n</code> represents a termination event; <code>false</code> otherwise
 @throws IllegalArgumentException
 if the notification is null.
 @throws NullPointerException
 if the <code>Observer</code> is null.
 */
- (jboolean)acceptWithRxObserver:(id<RxObserver>)o
                          withId:(id)n;

/*!
 @brief Creates a lite <code>onCompleted</code> notification without doing any allocation.
 Can be unwrapped and
 sent with the <code>accept</code> method.
 @return a completion token
 */
- (id)completed;

/*!
 @brief Create a lite <code>onError</code> notification.
 This call creates an object to wrap the <code>Throwable</code>,
 but since there should only be one of these, the performance impact should be small. Can be unwrapped and
 sent with the <code>accept</code> method.
 @param e
 the <code>Throwable</code> in the <code>onError</code> notification
 @return an object encapsulating the exception
 */
- (id)errorWithNSException:(NSException *)e;

/*!
 @brief Returns the <code>Throwable</code> corresponding to this <code>OnError</code> lite notification.
 Bad things happen
 if you pass this an <code>OnComplete</code> or <code>OnNext</code> notification type. For performance reasons, this
 method does not check for this, so you are expected to prevent such a mishap.
 @param n
 the lite notification (of type <code>Kind.OnError</code>)
 @return the <code>Throwable</code> wrapped inside <code>n</code>
 */
- (NSException *)getErrorWithId:(id)n;

/*!
 @brief Returns the item corresponding to this <code>OnNext</code> lite notification.
 Bad things happen if you pass
 this an <code>OnComplete</code> or <code>OnError</code> notification type. For performance reasons, this method
 does not check for this, so you are expected to prevent such a mishap.
 @param n
 the lite notification (of type <code>Kind.OnNext</code>)
 @return the unwrapped value, which can be null
 */
- (id)getValueWithId:(id)n;

/*!
 @brief Gets the <code>NotificationLite</code> singleton.
 @return the sole <code>NotificationLite</code> object
 */
+ (RxInternalOperatorsNotificationLite *)instance;

/*!
 @brief Indicates whether or not the lite notification represents an <code>onCompleted</code> event.
 @param n
 the lite notification
 @return <code>true</code> if <code>n</code> represents an <code>onCompleted</code> event; <code>false</code> otherwise
 */
- (jboolean)isCompletedWithId:(id)n;

/*!
 @brief Indicates whether or not the lite notification represents an <code>onError</code> event.
 @param n
 the lite notification
 @return <code>true</code> if <code>n</code> represents an <code>onError</code> event; <code>false</code> otherwise
 */
- (jboolean)isErrorWithId:(id)n;

/*!
 @brief Indicates whether or not the lite notification represents an <code>onNext</code> event.
 @param n the lite notification
 @return <code>true</code> if <code>n</code> represents an <code>onNext</code> event, <code>false</code> otherwise
 */
- (jboolean)isNextWithId:(id)n;

/*!
 @brief Indicates whether or not the lite notification represents a wrapped <code>null</code> <code>onNext</code> event.
 @param n the lite notification
 @return <code>true</code> if <code>n</code> represents a wrapped <code>null</code> <code>onNext</code> event, <code>false</code> otherwise
 */
- (jboolean)isNullWithId:(id)n;

/*!
 @brief Indicates which variety a particular lite notification is.
 If you need something more complex than
 simply calling the right method on an <code>Observer</code> then you can use this method to get the
 <code>rx.Notification.Kind</code>.
 @param n
 the lite notification
 @throws IllegalArgumentException
 if the notification is null.
 @return the <code>Kind</code> of lite notification <code>n</code> is: either <code>Kind.OnCompleted</code>,
 <code>Kind.OnError</code>, or <code>Kind.OnNext</code>
 */
- (RxNotification_Kind *)kindWithId:(id)n;

/*!
 @brief Creates a lite <code>onNext</code> notification for the value passed in without doing any allocation.
 Can
 be unwrapped and sent with the <code>accept</code> method.
 @param t
 the item emitted to <code>onNext</code>
 @return the item, or a null token representing the item if the item is <code>null</code>
 */
- (id)nextWithId:(id)t;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsNotificationLite)

FOUNDATION_EXPORT RxInternalOperatorsNotificationLite *RxInternalOperatorsNotificationLite_instance();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsNotificationLite)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsNotificationLite")
