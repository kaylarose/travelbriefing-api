//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorOnBackpressureBuffer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "rx/BackpressureOverflow.h"
#include "rx/Producer.h"
#include "rx/Subscriber.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/exceptions/MissingBackpressureException.h"
#include "rx/functions/Action0.h"
#include "rx/internal/operators/NotificationLite.h"
#include "rx/internal/operators/OperatorOnBackpressureBuffer.h"
#include "rx/internal/util/BackpressureDrainManager.h"

@interface RxInternalOperatorsOperatorOnBackpressureBuffer () {
 @public
  JavaLangLong *capacity_;
  id<RxFunctionsAction0> onOverflow_;
  id<RxBackpressureOverflow_Strategy> overflowStrategy_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer, capacity_, JavaLangLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer, onOverflow_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer, overflowStrategy_, id<RxBackpressureOverflow_Strategy>)

@interface RxInternalOperatorsOperatorOnBackpressureBuffer_Holder : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder)

inline RxInternalOperatorsOperatorOnBackpressureBuffer *RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_get_INSTANCE();
static RxInternalOperatorsOperatorOnBackpressureBuffer *RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder, INSTANCE, RxInternalOperatorsOperatorOnBackpressureBuffer *)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *self);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *new_RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *create_RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder)

@interface RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber : RxSubscriber < RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback > {
 @public
  JavaUtilConcurrentConcurrentLinkedQueue *queue_;
  JavaUtilConcurrentAtomicAtomicLong *capacity_;
  RxSubscriber *child_;
  JavaUtilConcurrentAtomicAtomicBoolean *saturated_;
  RxInternalUtilBackpressureDrainManager *manager_;
  RxInternalOperatorsNotificationLite *on_;
  id<RxFunctionsAction0> onOverflow_;
  id<RxBackpressureOverflow_Strategy> overflowStrategy_;
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                    withJavaLangLong:(JavaLangLong *)capacity
              withRxFunctionsAction0:(id<RxFunctionsAction0>)onOverflow
 withRxBackpressureOverflow_Strategy:(id<RxBackpressureOverflow_Strategy>)overflowStrategy;

- (void)onStart;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (jboolean)acceptWithId:(id)value;

- (void)completeWithNSException:(NSException *)exception;

- (id)peek;

- (id)poll;

- (jboolean)assertCapacity;

- (id<RxProducer>)manager;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, queue_, JavaUtilConcurrentConcurrentLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, capacity_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, saturated_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, manager_, RxInternalUtilBackpressureDrainManager *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, on_, RxInternalOperatorsNotificationLite *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, onOverflow_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, overflowStrategy_, id<RxBackpressureOverflow_Strategy>)

__attribute__((unused)) static void RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *self, RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy);

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *new_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *create_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy);

__attribute__((unused)) static jboolean RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_assertCapacity(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber)

@implementation RxInternalOperatorsOperatorOnBackpressureBuffer

+ (RxInternalOperatorsOperatorOnBackpressureBuffer *)instance {
  return RxInternalOperatorsOperatorOnBackpressureBuffer_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithLong:(jlong)capacity {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_(self, capacity);
  return self;
}

- (instancetype)initWithLong:(jlong)capacity
      withRxFunctionsAction0:(id<RxFunctionsAction0>)onOverflow {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_(self, capacity, onOverflow);
  return self;
}

- (instancetype)initWithLong:(jlong)capacity
      withRxFunctionsAction0:(id<RxFunctionsAction0>)onOverflow
withRxBackpressureOverflow_Strategy:(id<RxBackpressureOverflow_Strategy>)overflowStrategy {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(self, capacity, onOverflow, overflowStrategy);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *parent = new_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(child, capacity_, onOverflow_, overflowStrategy_);
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:parent];
  [child setProducerWithRxProducer:[parent manager]];
  return parent;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "instance", "LRxInternalOperatorsOperatorOnBackpressureBuffer;", 0x9, -1, -1, -1, 0, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { "initWithLong:", NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { "initWithLong:withRxFunctionsAction0:", NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { "initWithLong:withRxFunctionsAction0:withRxBackpressureOverflow_Strategy:", NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { "callWithId:", "LRxSubscriber;", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "capacity_", "LJavaLangLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "onOverflow_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "overflowStrategy_", "LRxBackpressureOverflow_Strategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/internal/operators/OperatorOnBackpressureBuffer<TT;>;", "J", "JLRxFunctionsAction0;", "JLRxFunctionsAction0;LRxBackpressureOverflow_Strategy;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorOnBackpressureBuffer_Holder;LRxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBuffer = { "OperatorOnBackpressureBuffer", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, 7, -1, 8, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBuffer;
}

@end

RxInternalOperatorsOperatorOnBackpressureBuffer *RxInternalOperatorsOperatorOnBackpressureBuffer_instance() {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initialize();
  return JreLoadStatic(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder, INSTANCE);
}

void RxInternalOperatorsOperatorOnBackpressureBuffer_init(RxInternalOperatorsOperatorOnBackpressureBuffer *self) {
  NSObject_init(self);
  self->capacity_ = nil;
  self->onOverflow_ = nil;
  self->overflowStrategy_ = JreLoadStatic(RxBackpressureOverflow, ON_OVERFLOW_DEFAULT);
}

RxInternalOperatorsOperatorOnBackpressureBuffer *new_RxInternalOperatorsOperatorOnBackpressureBuffer_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, init)
}

RxInternalOperatorsOperatorOnBackpressureBuffer *create_RxInternalOperatorsOperatorOnBackpressureBuffer_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, init)
}

void RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_(RxInternalOperatorsOperatorOnBackpressureBuffer *self, jlong capacity) {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(self, capacity, nil, JreLoadStatic(RxBackpressureOverflow, ON_OVERFLOW_DEFAULT));
}

RxInternalOperatorsOperatorOnBackpressureBuffer *new_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_(jlong capacity) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_, capacity)
}

RxInternalOperatorsOperatorOnBackpressureBuffer *create_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_(jlong capacity) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_, capacity)
}

void RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_(RxInternalOperatorsOperatorOnBackpressureBuffer *self, jlong capacity, id<RxFunctionsAction0> onOverflow) {
  RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(self, capacity, onOverflow, JreLoadStatic(RxBackpressureOverflow, ON_OVERFLOW_DEFAULT));
}

RxInternalOperatorsOperatorOnBackpressureBuffer *new_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_(jlong capacity, id<RxFunctionsAction0> onOverflow) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_withRxFunctionsAction0_, capacity, onOverflow)
}

RxInternalOperatorsOperatorOnBackpressureBuffer *create_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_(jlong capacity, id<RxFunctionsAction0> onOverflow) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_withRxFunctionsAction0_, capacity, onOverflow)
}

void RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxInternalOperatorsOperatorOnBackpressureBuffer *self, jlong capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  NSObject_init(self);
  if (capacity <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Buffer capacity must be > 0");
  }
  if (overflowStrategy == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"The BackpressureOverflow strategy must not be null");
  }
  self->capacity_ = JavaLangLong_valueOfWithLong_(capacity);
  self->onOverflow_ = onOverflow;
  self->overflowStrategy_ = overflowStrategy;
}

RxInternalOperatorsOperatorOnBackpressureBuffer *new_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(jlong capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_, capacity, onOverflow, overflowStrategy)
}

RxInternalOperatorsOperatorOnBackpressureBuffer *create_RxInternalOperatorsOperatorOnBackpressureBuffer_initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(jlong capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer, initWithLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_, capacity, onOverflow, overflowStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnBackpressureBuffer)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder)

@implementation RxInternalOperatorsOperatorOnBackpressureBuffer_Holder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalOperatorsOperatorOnBackpressureBuffer;", .constantValue.asLong = 0, 0x18, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_INSTANCE, "Lrx/internal/operators/OperatorOnBackpressureBuffer<*>;", "LRxInternalOperatorsOperatorOnBackpressureBuffer;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBuffer_Holder = { "Holder", "rx.internal.operators", ptrTable, methods, fields, 7, 0xa, 1, 1, 2, -1, -1, -1, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBuffer_Holder;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorOnBackpressureBuffer_Holder class]) {
    RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_INSTANCE = new_RxInternalOperatorsOperatorOnBackpressureBuffer_init();
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder)
  }
}

@end

void RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *self) {
  NSObject_init(self);
}

RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *new_RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init() {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder, init)
}

RxInternalOperatorsOperatorOnBackpressureBuffer_Holder *create_RxInternalOperatorsOperatorOnBackpressureBuffer_Holder_init() {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnBackpressureBuffer_Holder)

@implementation RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                    withJavaLangLong:(JavaLangLong *)capacity
              withRxFunctionsAction0:(id<RxFunctionsAction0>)onOverflow
 withRxBackpressureOverflow_Strategy:(id<RxBackpressureOverflow_Strategy>)overflowStrategy {
  RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(self, child, capacity, onOverflow, overflowStrategy);
  return self;
}

- (void)onStart {
  [self requestWithLong:JavaLangLong_MAX_VALUE];
}

- (void)onCompleted {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(saturated_)) get]) {
    [((RxInternalUtilBackpressureDrainManager *) nil_chk(manager_)) terminateAndDrain];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(saturated_)) get]) {
    [((RxInternalUtilBackpressureDrainManager *) nil_chk(manager_)) terminateAndDrainWithNSException:e];
  }
}

- (void)onNextWithId:(id)t {
  if (!RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_assertCapacity(self)) {
    return;
  }
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) offerWithId:[((RxInternalOperatorsNotificationLite *) nil_chk(on_)) nextWithId:t]];
  [((RxInternalUtilBackpressureDrainManager *) nil_chk(manager_)) drain];
}

- (jboolean)acceptWithId:(id)value {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(on_)) acceptWithRxObserver:child_ withId:value];
}

- (void)completeWithNSException:(NSException *)exception {
  if (exception != nil) {
    [((RxSubscriber *) nil_chk(child_)) onErrorWithNSException:exception];
  }
  else {
    [((RxSubscriber *) nil_chk(child_)) onCompleted];
  }
}

- (id)peek {
  return [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) peek];
}

- (id)poll {
  id value = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(queue_)) poll];
  if (capacity_ != nil && value != nil) {
    [capacity_ incrementAndGet];
  }
  return value;
}

- (jboolean)assertCapacity {
  return RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_assertCapacity(self);
}

- (id<RxProducer>)manager {
  return manager_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:withJavaLangLong:withRxFunctionsAction0:withRxBackpressureOverflow_Strategy:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "onStart", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { "onNextWithId:", "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { "acceptWithId:", "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { "completeWithNSException:", "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { "peek", "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "poll", "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "assertCapacity", "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { "manager", "LRxProducer;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LJavaUtilConcurrentConcurrentLinkedQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "capacity_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "saturated_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "manager_", "LRxInternalUtilBackpressureDrainManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "on_", "LRxInternalOperatorsNotificationLite;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "onOverflow_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "overflowStrategy_", "LRxBackpressureOverflow_Strategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LJavaLangLong;LRxFunctionsAction0;LRxBackpressureOverflow_Strategy;", "(Lrx/Subscriber<-TT;>;Ljava/lang/Long;Lrx/functions/Action0;Lrx/BackpressureOverflow$Strategy;)V", "onError", "LNSException;", "onNext", "LNSObject;", "(TT;)V", "accept", "complete", "Ljava/util/concurrent/ConcurrentLinkedQueue<Ljava/lang/Object;>;", "Lrx/Subscriber<-TT;>;", "Lrx/internal/operators/NotificationLite<TT;>;", "LRxInternalOperatorsOperatorOnBackpressureBuffer;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/internal/util/BackpressureDrainManager$BackpressureQueueCallback;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber = { "BufferSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1a, 11, 8, 12, -1, -1, 13, -1 };
  return &_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber;
}

@end

void RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *self, RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  RxSubscriber_init(self);
  self->queue_ = new_JavaUtilConcurrentConcurrentLinkedQueue_init();
  self->saturated_ = new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  self->on_ = RxInternalOperatorsNotificationLite_instance();
  self->child_ = child;
  self->capacity_ = capacity != nil ? new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_([capacity longLongValue]) : nil;
  self->onOverflow_ = onOverflow;
  self->manager_ = new_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(self);
  self->overflowStrategy_ = overflowStrategy;
}

RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *new_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_, child, capacity, onOverflow, overflowStrategy)
}

RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *create_RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_(RxSubscriber *child, JavaLangLong *capacity, id<RxFunctionsAction0> onOverflow, id<RxBackpressureOverflow_Strategy> overflowStrategy) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber, initWithRxSubscriber_withJavaLangLong_withRxFunctionsAction0_withRxBackpressureOverflow_Strategy_, child, capacity, onOverflow, overflowStrategy)
}

jboolean RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber_assertCapacity(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber *self) {
  if (self->capacity_ == nil) {
    return true;
  }
  jlong currCapacity;
  do {
    currCapacity = [self->capacity_ get];
    if (currCapacity <= 0) {
      jboolean hasCapacity = false;
      @try {
        hasCapacity = ([((id<RxBackpressureOverflow_Strategy>) nil_chk(self->overflowStrategy_)) mayAttemptDrop] && [self poll] != nil);
      }
      @catch (RxExceptionsMissingBackpressureException *e) {
        if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(self->saturated_)) compareAndSetWithBoolean:false withBoolean:true]) {
          [self unsubscribe];
          [((RxSubscriber *) nil_chk(self->child_)) onErrorWithNSException:e];
        }
      }
      if (self->onOverflow_ != nil) {
        @try {
          [self->onOverflow_ call];
        }
        @catch (NSException *e) {
          RxExceptionsExceptions_throwIfFatalWithNSException_(e);
          [((RxInternalUtilBackpressureDrainManager *) nil_chk(self->manager_)) terminateAndDrainWithNSException:e];
          return false;
        }
      }
      if (!hasCapacity) {
        return false;
      }
    }
  }
  while (![self->capacity_ compareAndSetWithLong:currCapacity withLong:currCapacity - 1]);
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorOnBackpressureBuffer_BufferSubscriber)
