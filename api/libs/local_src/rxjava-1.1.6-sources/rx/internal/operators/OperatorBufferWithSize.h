//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorBufferWithSize.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize")
#ifdef RESTRICT_RxInternalOperatorsOperatorBufferWithSize
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorBufferWithSize

#if !defined (RxInternalOperatorsOperatorBufferWithSize_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize))
#define RxInternalOperatorsOperatorBufferWithSize_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief This operation takes
 values from the specified <code>Observable</code> source and stores them in all active chunks until the buffer
 contains a specified number of elements.
 The buffer is then emitted. Chunks are created after a certain
 amount of values have been received. When the source <code>Observable</code> completes or produces an error,
 the currently active chunks are emitted, and the event is propagated to all subscribed <code>Subscriber</code>s.
 <p>
 Note that this operation can produce <strong>non-connected, connected non-overlapping, or overlapping
 chunks</strong> depending on the input parameters.
 </p>
 */
@interface RxInternalOperatorsOperatorBufferWithSize : NSObject < RxObservable_Operator > {
 @public
  jint count_;
  jint skip_;
}

#pragma mark Public

/*!
 @param count
 the number of elements a buffer should have before being emitted
 @param skip
 the interval with which chunks have to be created. Note that when <code>skip == count</code> 
 the operator will produce non-overlapping chunks. If
 <code>skip < count</code>, this buffer operation will produce overlapping chunks and if
 <code>skip > count</code> non-overlapping chunks will be created and some values will not be pushed
 into a buffer at all!
 */
- (instancetype)initWithInt:(jint)count
                    withInt:(jint)skip;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(RxInternalOperatorsOperatorBufferWithSize *self, jint count, jint skip);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize *new_RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(jint count, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize *create_RxInternalOperatorsOperatorBufferWithSize_initWithInt_withInt_(jint count, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSize_BufferExact_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize_BufferExact))
#define RxInternalOperatorsOperatorBufferWithSize_BufferExact_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@protocol JavaUtilList;
@protocol RxProducer;

@interface RxInternalOperatorsOperatorBufferWithSize_BufferExact : RxSubscriber {
 @public
  RxSubscriber *actual_;
  jint count_;
  id<JavaUtilList> buffer_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                             withInt:(jint)count;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (id<RxProducer>)createProducer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize_BufferExact)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferExact, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferExact, buffer_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_BufferExact_initWithRxSubscriber_withInt_(RxInternalOperatorsOperatorBufferWithSize_BufferExact *self, RxSubscriber *actual, jint count);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferExact *new_RxInternalOperatorsOperatorBufferWithSize_BufferExact_initWithRxSubscriber_withInt_(RxSubscriber *actual, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferExact *create_RxInternalOperatorsOperatorBufferWithSize_BufferExact_initWithRxSubscriber_withInt_(RxSubscriber *actual, jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize_BufferExact)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSize_BufferSkip_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize_BufferSkip))
#define RxInternalOperatorsOperatorBufferWithSize_BufferSkip_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@protocol JavaUtilList;
@protocol RxProducer;

@interface RxInternalOperatorsOperatorBufferWithSize_BufferSkip : RxSubscriber {
 @public
  RxSubscriber *actual_;
  jint count_;
  jint skip_;
  jlong index_;
  id<JavaUtilList> buffer_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                             withInt:(jint)count
                             withInt:(jint)skip;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (id<RxProducer>)createProducer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize_BufferSkip)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferSkip, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferSkip, buffer_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_BufferSkip_initWithRxSubscriber_withInt_withInt_(RxInternalOperatorsOperatorBufferWithSize_BufferSkip *self, RxSubscriber *actual, jint count, jint skip);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferSkip *new_RxInternalOperatorsOperatorBufferWithSize_BufferSkip_initWithRxSubscriber_withInt_withInt_(RxSubscriber *actual, jint count, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferSkip *create_RxInternalOperatorsOperatorBufferWithSize_BufferSkip_initWithRxSubscriber_withInt_withInt_(RxSubscriber *actual, jint count, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize_BufferSkip)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer))
#define RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@class RxInternalOperatorsOperatorBufferWithSize_BufferSkip;

@interface RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer : JavaUtilConcurrentAtomicAtomicBoolean < RxProducer >

#pragma mark Public

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithSize_BufferSkip:(RxInternalOperatorsOperatorBufferWithSize_BufferSkip *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferSkip_(RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer *self, RxInternalOperatorsOperatorBufferWithSize_BufferSkip *outer$);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer *new_RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferSkip_(RxInternalOperatorsOperatorBufferWithSize_BufferSkip *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer *create_RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferSkip_(RxInternalOperatorsOperatorBufferWithSize_BufferSkip *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize_BufferSkip_BufferSkipProducer)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap))
#define RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class JavaUtilArrayDeque;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol RxProducer;

@interface RxInternalOperatorsOperatorBufferWithSize_BufferOverlap : RxSubscriber {
 @public
  RxSubscriber *actual_;
  jint count_;
  jint skip_;
  jlong index_;
  JavaUtilArrayDeque *queue_;
  JavaUtilConcurrentAtomicAtomicLong *requested_BufferOverlap_;
  jlong produced_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
                             withInt:(jint)count
                             withInt:(jint)skip;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (id<RxProducer>)createProducer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap, queue_, JavaUtilArrayDeque *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap, requested_BufferOverlap_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_initWithRxSubscriber_withInt_withInt_(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *self, RxSubscriber *actual, jint count, jint skip);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *new_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_initWithRxSubscriber_withInt_withInt_(RxSubscriber *actual, jint count, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *create_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_initWithRxSubscriber_withInt_withInt_(RxSubscriber *actual, jint count, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer))
#define RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@class RxInternalOperatorsOperatorBufferWithSize_BufferOverlap;

@interface RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer : JavaUtilConcurrentAtomicAtomicBoolean < RxProducer >

#pragma mark Public

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithSize_BufferOverlap:(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferOverlap_(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer *self, RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *outer$);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer *new_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferOverlap_(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer *create_RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer_initWithRxInternalOperatorsOperatorBufferWithSize_BufferOverlap_(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSize_BufferOverlap_BufferOverlapProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSize")
