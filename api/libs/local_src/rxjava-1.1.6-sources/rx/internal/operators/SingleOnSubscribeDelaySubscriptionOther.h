//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/SingleOnSubscribeDelaySubscriptionOther.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther")
#ifdef RESTRICT_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther
#define INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther 0
#else
#define INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther 1
#endif
#undef RESTRICT_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther

#if !defined (RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther_) && (INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther || defined(INCLUDE_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther))
#define RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther_

#define RESTRICT_RxSingle 1
#define INCLUDE_RxSingle_OnSubscribe 1
#include "rx/Single.h"

@class RxObservable;
@class RxSingle;
@class RxSingleSubscriber;

/*!
 @brief Delays the subscription to the Single until the Observable
 fires an event or completes.
 */
@interface RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther : NSObject < RxSingle_OnSubscribe > {
 @public
  RxSingle *main_;
  RxObservable *other_;
}

#pragma mark Public

- (instancetype)initWithRxSingle:(RxSingle *)main
                withRxObservable:(RxObservable *)other;

- (void)callWithId:(RxSingleSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther)

J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther, main_, RxSingle *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther, other_, RxObservable *)

FOUNDATION_EXPORT void RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther_initWithRxSingle_withRxObservable_(RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther *self, RxSingle *main, RxObservable *other);

FOUNDATION_EXPORT RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther *new_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther_initWithRxSingle_withRxObservable_(RxSingle *main, RxObservable *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther *create_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther_initWithRxSingle_withRxObservable_(RxSingle *main, RxObservable *other);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeDelaySubscriptionOther")
