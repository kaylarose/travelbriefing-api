//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorTake.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTake")
#ifdef RESTRICT_RxInternalOperatorsOperatorTake
#define INCLUDE_ALL_RxInternalOperatorsOperatorTake 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorTake 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorTake

#if !defined (RxInternalOperatorsOperatorTake_) && (INCLUDE_ALL_RxInternalOperatorsOperatorTake || defined(INCLUDE_RxInternalOperatorsOperatorTake))
#define RxInternalOperatorsOperatorTake_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief An <code>Observable</code> that emits the first <code>num</code> items emitted by the source <code>Observable</code>.
 <p>
 <img width="640" height="305" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/take.png" alt="" />
 <p>
 You can choose to pay attention only to the first <code>num</code> items emitted by an <code>Observable</code> by using
 the <code>take</code> operator. This operator returns an <code>Observable</code> that will invoke a subscriber's
 <code>onNext</code> function a maximum of <code>num</code> times before invoking
 <code>onCompleted</code>.
 */
@interface RxInternalOperatorsOperatorTake : NSObject < RxObservable_Operator > {
 @public
  jint limit_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)limit;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTake)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorTake_initWithInt_(RxInternalOperatorsOperatorTake *self, jint limit);

FOUNDATION_EXPORT RxInternalOperatorsOperatorTake *new_RxInternalOperatorsOperatorTake_initWithInt_(jint limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorTake *create_RxInternalOperatorsOperatorTake_initWithInt_(jint limit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTake)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTake")
