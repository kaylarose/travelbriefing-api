//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorDelay.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDelay")
#ifdef RESTRICT_RxInternalOperatorsOperatorDelay
#define INCLUDE_ALL_RxInternalOperatorsOperatorDelay 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorDelay 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorDelay

#if !defined (RxInternalOperatorsOperatorDelay_) && (INCLUDE_ALL_RxInternalOperatorsOperatorDelay || defined(INCLUDE_RxInternalOperatorsOperatorDelay))
#define RxInternalOperatorsOperatorDelay_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

/*!
 @brief Delays the emission of onNext events by a given amount of time.
 */
@interface RxInternalOperatorsOperatorDelay : NSObject < RxObservable_Operator > {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDelay)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDelay, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDelay, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorDelay_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorDelay *self, jlong delay, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorDelay *new_RxInternalOperatorsOperatorDelay_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorDelay *create_RxInternalOperatorsOperatorDelay_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorDelay)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDelay")
