//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeFromCallable.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeFromCallable
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeFromCallable

#if !defined (RxInternalOperatorsOnSubscribeFromCallable_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromCallable))
#define RxInternalOperatorsOnSubscribeFromCallable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol JavaUtilConcurrentCallable;

/*!
 @brief Do not invoke the function until an Observer subscribes; Invokes function on each
 subscription.
 <p>
 Pass <code>fromCallable</code> a function, and <code>fromCallable</code> will call this function to emit result of invocation
 afresh each time a new Observer subscribes.
 */
@interface RxInternalOperatorsOnSubscribeFromCallable : NSObject < RxObservable_OnSubscribe >

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)resultFactory;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromCallable)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(RxInternalOperatorsOnSubscribeFromCallable *self, id<JavaUtilConcurrentCallable> resultFactory);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromCallable *new_RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> resultFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromCallable *create_RxInternalOperatorsOnSubscribeFromCallable_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> resultFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromCallable)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromCallable")
