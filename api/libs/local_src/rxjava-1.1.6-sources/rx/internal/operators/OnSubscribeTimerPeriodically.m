//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeTimerPeriodically.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/TimeUnit.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/functions/Action0.h"
#include "rx/internal/operators/OnSubscribeTimerPeriodically.h"

@interface RxInternalOperatorsOnSubscribeTimerPeriodically_$1 : NSObject < RxFunctionsAction0 > {
 @public
  jlong counter_;
  RxSubscriber *val$child_;
  RxScheduler_Worker *val$worker_;
}

- (void)call;

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
              withRxScheduler_Worker:(RxScheduler_Worker *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeTimerPeriodically_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically_$1, val$child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically_$1, val$worker_, RxScheduler_Worker *)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *self, RxSubscriber *capture$0, RxScheduler_Worker *capture$1);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *new_RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *create_RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeTimerPeriodically_$1)

@implementation RxInternalOperatorsOnSubscribeTimerPeriodically

- (instancetype)initWithLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, initialDelay, period, unit, scheduler);
  return self;
}

- (void)callWithId:(RxSubscriber *)child {
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:worker];
  (void) [((RxScheduler_Worker *) nil_chk(worker)) schedulePeriodicallyWithRxFunctionsAction0:new_RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(child, worker) withLong:initialDelay_ withLong:period_ withJavaUtilConcurrentTimeUnit:unit_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "callWithId:", "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "initialDelay_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "period_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JJLJavaUtilConcurrentTimeUnit;LRxScheduler;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-Ljava/lang/Long;>;)V", "Ljava/lang/Object;Lrx/Observable$OnSubscribe<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeTimerPeriodically = { "OnSubscribeTimerPeriodically", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, 4, -1 };
  return &_RxInternalOperatorsOnSubscribeTimerPeriodically;
}

@end

void RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeTimerPeriodically *self, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  NSObject_init(self);
  self->initialDelay_ = initialDelay;
  self->period_ = period;
  self->unit_ = unit;
  self->scheduler_ = scheduler;
}

RxInternalOperatorsOnSubscribeTimerPeriodically *new_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeTimerPeriodically, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, initialDelay, period, unit, scheduler)
}

RxInternalOperatorsOnSubscribeTimerPeriodically *create_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeTimerPeriodically, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, initialDelay, period, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeTimerPeriodically)

@implementation RxInternalOperatorsOnSubscribeTimerPeriodically_$1

- (void)call {
  @try {
    [((RxSubscriber *) nil_chk(val$child_)) onNextWithId:JavaLangLong_valueOfWithLong_(counter_++)];
  }
  @catch (NSException *e) {
    @try {
      [((RxScheduler_Worker *) nil_chk(val$worker_)) unsubscribe];
    }
    @finally {
      RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(e, val$child_);
    }
  }
}

- (instancetype)initWithRxSubscriber:(RxSubscriber *)capture$0
              withRxScheduler_Worker:(RxScheduler_Worker *)capture$1 {
  RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithRxSubscriber:withRxScheduler_Worker:", NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$worker_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxScheduler_Worker;", "(Lrx/Subscriber<-Ljava/lang/Long;>;Lrx/Scheduler$Worker;)V", "Lrx/Subscriber<-Ljava/lang/Long;>;", "LRxInternalOperatorsOnSubscribeTimerPeriodically;", "callWithId:" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeTimerPeriodically_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 3, 3, -1, 4, -1, -1 };
  return &_RxInternalOperatorsOnSubscribeTimerPeriodically_$1;
}

@end

void RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *self, RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  self->val$child_ = capture$0;
  self->val$worker_ = capture$1;
  NSObject_init(self);
}

RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *new_RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeTimerPeriodically_$1, initWithRxSubscriber_withRxScheduler_Worker_, capture$0, capture$1)
}

RxInternalOperatorsOnSubscribeTimerPeriodically_$1 *create_RxInternalOperatorsOnSubscribeTimerPeriodically_$1_initWithRxSubscriber_withRxScheduler_Worker_(RxSubscriber *capture$0, RxScheduler_Worker *capture$1) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeTimerPeriodically_$1, initWithRxSubscriber_withRxScheduler_Worker_, capture$0, capture$1)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeTimerPeriodically_$1)
