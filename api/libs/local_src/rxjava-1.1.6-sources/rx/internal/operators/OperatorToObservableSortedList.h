//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorToObservableSortedList.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToObservableSortedList")
#ifdef RESTRICT_RxInternalOperatorsOperatorToObservableSortedList
#define INCLUDE_ALL_RxInternalOperatorsOperatorToObservableSortedList 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorToObservableSortedList 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorToObservableSortedList

#if !defined (RxInternalOperatorsOperatorToObservableSortedList_) && (INCLUDE_ALL_RxInternalOperatorsOperatorToObservableSortedList || defined(INCLUDE_RxInternalOperatorsOperatorToObservableSortedList))
#define RxInternalOperatorsOperatorToObservableSortedList_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol JavaUtilComparator;
@protocol RxFunctionsFunc2;

/*!
 @brief Return an <code>Observable</code> that emits the items emitted by the source <code>Observable</code>, in a sorted order
 (each item emitted by the <code>Observable</code> must implement <code>Comparable</code> with respect to all other
 items in the sequence, or you must pass in a sort function).
 <p>
 <img width="640" height="310" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/toSortedList.png" alt="">
 */
@interface RxInternalOperatorsOperatorToObservableSortedList : NSObject < RxObservable_Operator > {
 @public
  id<JavaUtilComparator> sortFunction_;
  jint initialCapacity_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)sortFunction
                                 withInt:(jint)initialCapacity;

- (instancetype)initWithInt:(jint)initialCapacity;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorToObservableSortedList)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorToObservableSortedList, sortFunction_, id<JavaUtilComparator>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToObservableSortedList_initWithInt_(RxInternalOperatorsOperatorToObservableSortedList *self, jint initialCapacity);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableSortedList *new_RxInternalOperatorsOperatorToObservableSortedList_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableSortedList *create_RxInternalOperatorsOperatorToObservableSortedList_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToObservableSortedList_initWithRxFunctionsFunc2_withInt_(RxInternalOperatorsOperatorToObservableSortedList *self, id<RxFunctionsFunc2> sortFunction, jint initialCapacity);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableSortedList *new_RxInternalOperatorsOperatorToObservableSortedList_initWithRxFunctionsFunc2_withInt_(id<RxFunctionsFunc2> sortFunction, jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableSortedList *create_RxInternalOperatorsOperatorToObservableSortedList_initWithRxFunctionsFunc2_withInt_(id<RxFunctionsFunc2> sortFunction, jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorToObservableSortedList)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToObservableSortedList")
