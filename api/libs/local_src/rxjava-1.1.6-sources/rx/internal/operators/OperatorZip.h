//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorZip.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorZip")
#ifdef RESTRICT_RxInternalOperatorsOperatorZip
#define INCLUDE_ALL_RxInternalOperatorsOperatorZip 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorZip 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorZip

#if !defined (RxInternalOperatorsOperatorZip_) && (INCLUDE_ALL_RxInternalOperatorsOperatorZip || defined(INCLUDE_RxInternalOperatorsOperatorZip))
#define RxInternalOperatorsOperatorZip_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc2;
@protocol RxFunctionsFunc3;
@protocol RxFunctionsFunc4;
@protocol RxFunctionsFunc5;
@protocol RxFunctionsFunc6;
@protocol RxFunctionsFunc7;
@protocol RxFunctionsFunc8;
@protocol RxFunctionsFunc9;
@protocol RxFunctionsFuncN;

/*!
 @brief Returns an Observable that emits the results of a function applied to sets of items emitted, in
 sequence, by two or more other Observables.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/zip.png" alt="">
 <p>
 The zip operation applies this function in strict sequence, so the first item emitted by the new
 Observable will be the result of the function applied to the first item emitted by each zipped
 Observable; the second item emitted by the new Observable will be the result of the function
 applied to the second item emitted by each zipped Observable; and so forth.
 <p>
 The resulting Observable returned from zip will invoke <code>onNext</code> as many times as the
 number of <code>onNext</code> invocations of the source Observable that emits the fewest items.
 */
@interface RxInternalOperatorsOperatorZip : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFuncN> zipFunction_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)f;

- (instancetype)initWithRxFunctionsFunc3:(id<RxFunctionsFunc3>)f;

- (instancetype)initWithRxFunctionsFunc4:(id<RxFunctionsFunc4>)f;

- (instancetype)initWithRxFunctionsFunc5:(id<RxFunctionsFunc5>)f;

- (instancetype)initWithRxFunctionsFunc6:(id<RxFunctionsFunc6>)f;

- (instancetype)initWithRxFunctionsFunc7:(id<RxFunctionsFunc7>)f;

- (instancetype)initWithRxFunctionsFunc8:(id<RxFunctionsFunc8>)f;

- (instancetype)initWithRxFunctionsFunc9:(id<RxFunctionsFunc9>)f;

- (instancetype)initWithRxFunctionsFuncN:(id<RxFunctionsFuncN>)f;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZip)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorZip, zipFunction_, id<RxFunctionsFuncN>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFuncN_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFuncN> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFuncN_(id<RxFunctionsFuncN> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFuncN_(id<RxFunctionsFuncN> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc2_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc2> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc3_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc3> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc3_(id<RxFunctionsFunc3> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc3_(id<RxFunctionsFunc3> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc4_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc4> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc4_(id<RxFunctionsFunc4> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc4_(id<RxFunctionsFunc4> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc5_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc5> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc5_(id<RxFunctionsFunc5> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc5_(id<RxFunctionsFunc5> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc6_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc6> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc6_(id<RxFunctionsFunc6> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc6_(id<RxFunctionsFunc6> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc7_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc7> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc7_(id<RxFunctionsFunc7> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc7_(id<RxFunctionsFunc7> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc8_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc8> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc8_(id<RxFunctionsFunc8> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc8_(id<RxFunctionsFunc8> f);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc9_(RxInternalOperatorsOperatorZip *self, id<RxFunctionsFunc9> f);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *new_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc9_(id<RxFunctionsFunc9> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip *create_RxInternalOperatorsOperatorZip_initWithRxFunctionsFunc9_(id<RxFunctionsFunc9> f);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorZip)

#endif

#if !defined (RxInternalOperatorsOperatorZip_Zip_) && (INCLUDE_ALL_RxInternalOperatorsOperatorZip || defined(INCLUDE_RxInternalOperatorsOperatorZip_Zip))
#define RxInternalOperatorsOperatorZip_Zip_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

@class IOSObjectArray;
@class RxSubscriber;
@protocol RxFunctionsFuncN;
@protocol RxObserver;

@interface RxInternalOperatorsOperatorZip_Zip : JavaUtilConcurrentAtomicAtomicLong {
 @public
  id<RxObserver> child_;
  jint emitted_;
}

+ (jint)THRESHOLD;

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                withRxFunctionsFuncN:(id<RxFunctionsFuncN>)zipFunction;

- (void)startWithRxObservableArray:(IOSObjectArray *)os
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)requested;

#pragma mark Package-Private

/*!
 @brief check if we have values for each and emit if we do
 This will only allow one thread at a time to do the work, but ensures via `counter` increment/decrement
 that there is always once who acts on each `tick`.
 Same concept as used in OperationObserveOn.
 */
- (void)tick;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorZip_Zip)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorZip_Zip, child_, id<RxObserver>)

inline jint RxInternalOperatorsOperatorZip_Zip_get_THRESHOLD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalOperatorsOperatorZip_Zip_THRESHOLD;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalOperatorsOperatorZip_Zip, THRESHOLD, jint)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_Zip_initWithRxSubscriber_withRxFunctionsFuncN_(RxInternalOperatorsOperatorZip_Zip *self, RxSubscriber *child, id<RxFunctionsFuncN> zipFunction);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip_Zip *new_RxInternalOperatorsOperatorZip_Zip_initWithRxSubscriber_withRxFunctionsFuncN_(RxSubscriber *child, id<RxFunctionsFuncN> zipFunction) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip_Zip *create_RxInternalOperatorsOperatorZip_Zip_initWithRxSubscriber_withRxFunctionsFuncN_(RxSubscriber *child, id<RxFunctionsFuncN> zipFunction);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorZip_Zip)

#endif

#if !defined (RxInternalOperatorsOperatorZip_Zip_InnerSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorZip || defined(INCLUDE_RxInternalOperatorsOperatorZip_Zip_InnerSubscriber))
#define RxInternalOperatorsOperatorZip_Zip_InnerSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorZip_Zip;
@class RxInternalUtilRxRingBuffer;

@interface RxInternalOperatorsOperatorZip_Zip_InnerSubscriber : RxSubscriber {
 @public
  RxInternalUtilRxRingBuffer *items_;
}

#pragma mark Public

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onStart;

- (void)requestMoreWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsOperatorZip_Zip:(RxInternalOperatorsOperatorZip_Zip *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorZip_Zip_InnerSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorZip_Zip_InnerSubscriber, items_, RxInternalUtilRxRingBuffer *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorZip_Zip_InnerSubscriber_initWithRxInternalOperatorsOperatorZip_Zip_(RxInternalOperatorsOperatorZip_Zip_InnerSubscriber *self, RxInternalOperatorsOperatorZip_Zip *outer$);

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip_Zip_InnerSubscriber *new_RxInternalOperatorsOperatorZip_Zip_InnerSubscriber_initWithRxInternalOperatorsOperatorZip_Zip_(RxInternalOperatorsOperatorZip_Zip *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorZip_Zip_InnerSubscriber *create_RxInternalOperatorsOperatorZip_Zip_InnerSubscriber_initWithRxInternalOperatorsOperatorZip_Zip_(RxInternalOperatorsOperatorZip_Zip *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorZip_Zip_InnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorZip")
