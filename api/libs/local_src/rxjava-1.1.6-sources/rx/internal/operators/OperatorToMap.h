//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorToMap.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToMap")
#ifdef RESTRICT_RxInternalOperatorsOperatorToMap
#define INCLUDE_ALL_RxInternalOperatorsOperatorToMap 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorToMap 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorToMap

#if !defined (RxInternalOperatorsOperatorToMap_) && (INCLUDE_ALL_RxInternalOperatorsOperatorToMap || defined(INCLUDE_RxInternalOperatorsOperatorToMap))
#define RxInternalOperatorsOperatorToMap_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc1;

/*!
 @brief Maps the elements of the source observable into a java.util.Map instance and
 emits that once the source observable completes.
 - seealso: <a href="https://github.com/ReactiveX/RxJava/issues/96">Issue #96</a>
 */
@interface RxInternalOperatorsOperatorToMap : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc1> keySelector_;
  id<RxFunctionsFunc1> valueSelector_;
}

#pragma mark Public

/*!
 @brief ToMap with key selector, value selector and default HashMap factory.
 @param keySelector the function extracting the map-key from the main value
 @param valueSelector the function extracting the map-value from the main value
 */
- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector;

/*!
 @brief ToMap with key selector, value selector and custom Map factory.
 @param keySelector the function extracting the map-key from the main value
 @param valueSelector the function extracting the map-value from the main value
 @param mapFactory function that returns a Map instance to store keys and values into
 */
- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)valueSelector
                    withRxFunctionsFunc0:(id<RxFunctionsFunc0>)mapFactory;

- (RxSubscriber *)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToMap)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorToMap, keySelector_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorToMap, valueSelector_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(RxInternalOperatorsOperatorToMap *self, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap *new_RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap *create_RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc0_(RxInternalOperatorsOperatorToMap *self, id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc0> mapFactory);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap *new_RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc0_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc0> mapFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap *create_RxInternalOperatorsOperatorToMap_initWithRxFunctionsFunc1_withRxFunctionsFunc1_withRxFunctionsFunc0_(id<RxFunctionsFunc1> keySelector, id<RxFunctionsFunc1> valueSelector, id<RxFunctionsFunc0> mapFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorToMap)

#endif

#if !defined (RxInternalOperatorsOperatorToMap_DefaultToMapFactory_) && (INCLUDE_ALL_RxInternalOperatorsOperatorToMap || defined(INCLUDE_RxInternalOperatorsOperatorToMap_DefaultToMapFactory))
#define RxInternalOperatorsOperatorToMap_DefaultToMapFactory_

#define RESTRICT_RxFunctionsFunc0 1
#define INCLUDE_RxFunctionsFunc0 1
#include "rx/functions/Func0.h"

@protocol JavaUtilMap;

/*!
 @brief The default map factory.
 */
@interface RxInternalOperatorsOperatorToMap_DefaultToMapFactory : NSObject < RxFunctionsFunc0 >

#pragma mark Public

- (instancetype)init;

- (id<JavaUtilMap>)call;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToMap_DefaultToMapFactory)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToMap_DefaultToMapFactory_init(RxInternalOperatorsOperatorToMap_DefaultToMapFactory *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap_DefaultToMapFactory *new_RxInternalOperatorsOperatorToMap_DefaultToMapFactory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToMap_DefaultToMapFactory *create_RxInternalOperatorsOperatorToMap_DefaultToMapFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorToMap_DefaultToMapFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToMap")
