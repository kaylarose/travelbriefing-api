//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorBufferWithStartEndObservable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable")
#ifdef RESTRICT_RxInternalOperatorsOperatorBufferWithStartEndObservable
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorBufferWithStartEndObservable

#if !defined (RxInternalOperatorsOperatorBufferWithStartEndObservable_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithStartEndObservable))
#define RxInternalOperatorsOperatorBufferWithStartEndObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxObservable;
@class RxSubscriber;
@protocol RxFunctionsFunc1;

/*!
 @brief This operation takes
 values from the specified <code>Observable</code> source and stores them in the currently active chunks.
 Initially there are no chunks active.
 <p>
 Chunks can be created by pushing a <code>TOpening</code> value to the "bufferOpenings"
 <code>Observable</code>. This creates a new buffer which will then start recording values which are produced
 by the "source" <code>Observable</code>. Additionally the "bufferClosingSelector" will be used to construct an
 <code>Observable</code> which can produce values. When it does so it will close this (and only this) newly
 created buffer. When the source <code>Observable</code> completes or produces an error, all chunks are
 emitted, and the event is propagated to all subscribed <code>Observer</code>s.
 </p><p>
 Note that when using this operation <strong>multiple overlapping chunks</strong> could be active at any
 one point.
 </p>
 */
@interface RxInternalOperatorsOperatorBufferWithStartEndObservable : NSObject < RxObservable_Operator > {
 @public
  RxObservable *bufferOpening_;
  id<RxFunctionsFunc1> bufferClosing_;
}

#pragma mark Public

/*!
 @param bufferOpenings
 an <code>Observable</code> which when it produces a <code>TOpening</code> value will create a
 new buffer which instantly starts recording the "source" <code>Observable</code>
 @param bufferClosingSelector
 a <code>Func1</code> object which produces <code>Observable</code>s. These <code>Observable</code>s determine
 when a buffer is emitted and replaced by simply producing an object.
 */
- (instancetype)initWithRxObservable:(RxObservable *)bufferOpenings
                withRxFunctionsFunc1:(id<RxFunctionsFunc1>)bufferClosingSelector;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithStartEndObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithStartEndObservable, bufferOpening_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithStartEndObservable, bufferClosing_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithStartEndObservable_initWithRxObservable_withRxFunctionsFunc1_(RxInternalOperatorsOperatorBufferWithStartEndObservable *self, RxObservable *bufferOpenings, id<RxFunctionsFunc1> bufferClosingSelector);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithStartEndObservable *new_RxInternalOperatorsOperatorBufferWithStartEndObservable_initWithRxObservable_withRxFunctionsFunc1_(RxObservable *bufferOpenings, id<RxFunctionsFunc1> bufferClosingSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithStartEndObservable *create_RxInternalOperatorsOperatorBufferWithStartEndObservable_initWithRxObservable_withRxFunctionsFunc1_(RxObservable *bufferOpenings, id<RxFunctionsFunc1> bufferClosingSelector);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithStartEndObservable)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber))
#define RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorBufferWithStartEndObservable;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilList;

@interface RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  /*!
   @brief Guarded by this.
   */
  id<JavaUtilList> chunks_;
  /*!
   @brief Guarded by this.
   */
  jboolean done_;
  RxSubscriptionsCompositeSubscription *closingSubscriptions_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithStartEndObservable:(RxInternalOperatorsOperatorBufferWithStartEndObservable *)outer$
                                                               withRxSubscriber:(RxSubscriber *)child;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (void)endBufferWithJavaUtilList:(id<JavaUtilList>)toEnd;

- (void)startBufferWithId:(id)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber, chunks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber, closingSubscriptions_, RxSubscriptionsCompositeSubscription *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithStartEndObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber *self, RxInternalOperatorsOperatorBufferWithStartEndObservable *outer$, RxSubscriber *child);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber *new_RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithStartEndObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithStartEndObservable *outer$, RxSubscriber *child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber *create_RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithStartEndObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithStartEndObservable *outer$, RxSubscriber *child);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithStartEndObservable_BufferingSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithStartEndObservable")
