//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeTimerPeriodically.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeTimerPeriodically
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeTimerPeriodically

#if !defined (RxInternalOperatorsOnSubscribeTimerPeriodically_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically || defined(INCLUDE_RxInternalOperatorsOnSubscribeTimerPeriodically))
#define RxInternalOperatorsOnSubscribeTimerPeriodically_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

/*!
 @brief Emit 0L after the initial period and ever increasing number after each period.
 - seealso: <a href="http://msdn.microsoft.com/en-us/library/system.reactive.linq.observable.timer.aspx">MSDN Observable.Timer</a>
 */
@interface RxInternalOperatorsOnSubscribeTimerPeriodically : NSObject < RxObservable_OnSubscribe > {
 @public
  jlong initialDelay_;
  jlong period_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)initialDelay
                    withLong:(jlong)period
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeTimerPeriodically)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeTimerPeriodically, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeTimerPeriodically *self, jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *new_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeTimerPeriodically *create_RxInternalOperatorsOnSubscribeTimerPeriodically_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeTimerPeriodically)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeTimerPeriodically")
