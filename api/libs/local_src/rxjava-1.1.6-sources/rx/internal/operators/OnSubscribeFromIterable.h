//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeFromIterable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeFromIterable
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeFromIterable

#if !defined (RxInternalOperatorsOnSubscribeFromIterable_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromIterable))
#define RxInternalOperatorsOnSubscribeFromIterable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol JavaLangIterable;

/*!
 @brief Converts an <code>Iterable</code> sequence into an <code>Observable</code>.
 <p>
 <img width="640" height="310" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/toObservable.png" alt="" />
 <p>
 You can convert any object that supports the Iterable interface into an Observable that emits each item in
 the object, with the <code>toObservable</code> operation.
 */
@interface RxInternalOperatorsOnSubscribeFromIterable : NSObject < RxObservable_OnSubscribe > {
 @public
  id<JavaLangIterable> is_;
}

#pragma mark Public

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)iterable;

- (void)callWithId:(RxSubscriber *)o;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromIterable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeFromIterable, is_, id<JavaLangIterable>)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(RxInternalOperatorsOnSubscribeFromIterable *self, id<JavaLangIterable> iterable);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable *new_RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> iterable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable *create_RxInternalOperatorsOnSubscribeFromIterable_initWithJavaLangIterable_(id<JavaLangIterable> iterable);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromIterable)

#endif

#if !defined (RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable || defined(INCLUDE_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer))
#define RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@class RxSubscriber;
@protocol JavaUtilIterator;

@interface RxInternalOperatorsOnSubscribeFromIterable_IterableProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer >

#pragma mark Public

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithRxSubscriber:(RxSubscriber *)o
                withJavaUtilIterator:(id<JavaUtilIterator>)it;

- (void)fastpath;

- (void)slowpathWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *self, RxSubscriber *o, id<JavaUtilIterator> it);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *new_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxSubscriber *o, id<JavaUtilIterator> it) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeFromIterable_IterableProducer *create_RxInternalOperatorsOnSubscribeFromIterable_IterableProducer_initWithRxSubscriber_withJavaUtilIterator_(RxSubscriber *o, id<JavaUtilIterator> it);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeFromIterable_IterableProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeFromIterable")
