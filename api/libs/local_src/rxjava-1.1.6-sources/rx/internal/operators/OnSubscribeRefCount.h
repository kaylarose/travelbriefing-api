//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeRefCount.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeRefCount")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeRefCount
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeRefCount 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeRefCount 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeRefCount

#if !defined (RxInternalOperatorsOnSubscribeRefCount_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeRefCount || defined(INCLUDE_RxInternalOperatorsOnSubscribeRefCount))
#define RxInternalOperatorsOnSubscribeRefCount_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentLocksReentrantLock;
@class RxObservablesConnectableObservable;
@class RxSubscriber;
@class RxSubscriptionsCompositeSubscription;

/*!
 @brief Returns an observable sequence that stays connected to the source as long as
 there is at least one subscription to the observable sequence.
 */
@interface RxInternalOperatorsOnSubscribeRefCount : NSObject < RxObservable_OnSubscribe > {
 @public
  volatile_id baseSubscription_;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount_;
  /*!
   @brief Use this lock for every subscription and disconnect action.
   */
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

#pragma mark Public

/*!
 @brief Constructor.
 @param source
 observable to apply ref count to
 */
- (instancetype)initWithRxObservablesConnectableObservable:(RxObservablesConnectableObservable *)source;

- (void)callWithId:(RxSubscriber *)subscriber;

#pragma mark Package-Private

- (void)doSubscribeWithRxSubscriber:(RxSubscriber *)subscriber
withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)currentBase;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeRefCount)

J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, baseSubscription_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeRefCount, lock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxInternalOperatorsOnSubscribeRefCount *self, RxObservablesConnectableObservable *source);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeRefCount *new_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeRefCount *create_RxInternalOperatorsOnSubscribeRefCount_initWithRxObservablesConnectableObservable_(RxObservablesConnectableObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeRefCount)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeRefCount")
