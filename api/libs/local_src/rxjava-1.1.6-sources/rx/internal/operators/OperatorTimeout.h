//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorTimeout.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTimeout")
#ifdef RESTRICT_RxInternalOperatorsOperatorTimeout
#define INCLUDE_ALL_RxInternalOperatorsOperatorTimeout 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorTimeout 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorTimeout

#if !defined (RxInternalOperatorsOperatorTimeout_) && (INCLUDE_ALL_RxInternalOperatorsOperatorTimeout || defined(INCLUDE_RxInternalOperatorsOperatorTimeout))
#define RxInternalOperatorsOperatorTimeout_

#define RESTRICT_RxInternalOperatorsOperatorTimeoutBase 1
#define INCLUDE_RxInternalOperatorsOperatorTimeoutBase 1
#include "rx/internal/operators/OperatorTimeoutBase.h"

@class JavaUtilConcurrentTimeUnit;
@class RxObservable;
@class RxScheduler;

/*!
 @brief Applies a timeout policy for each element in the observable sequence, using
 the specified scheduler to run timeout timers.
 If the next element isn't
 received within the specified timeout duration starting from its predecessor,
 the other observable sequence is used to produce future messages from that
 point on.
 */
@interface RxInternalOperatorsOperatorTimeout : RxInternalOperatorsOperatorTimeoutBase

#pragma mark Public

- (instancetype)initWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
            withRxObservable:(RxObservable *)other
             withRxScheduler:(RxScheduler *)scheduler;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorTimeout)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(RxInternalOperatorsOperatorTimeout *self, jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorTimeout *new_RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorTimeout *create_RxInternalOperatorsOperatorTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_withRxObservable_withRxScheduler_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit, RxObservable *other, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorTimeout")
