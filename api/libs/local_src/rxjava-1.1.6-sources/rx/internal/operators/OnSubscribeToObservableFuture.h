//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeToObservableFuture.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeToObservableFuture
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeToObservableFuture

#if !defined (RxInternalOperatorsOnSubscribeToObservableFuture_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture || defined(INCLUDE_RxInternalOperatorsOnSubscribeToObservableFuture))
#define RxInternalOperatorsOnSubscribeToObservableFuture_

@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentFuture;
@protocol RxObservable_OnSubscribe;

/*!
 @brief Converts a <code>Future</code> into an <code>Observable</code>.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/from.Future.png" alt="">
 <p>
 You can convert any object that supports the <code>Future</code> interface into an <code>Observable</code> that emits
 the return value of the <code>get</code> method of that object, by using this operator.
 <p>
 This is blocking so the <code>Subscription</code> returned when calling
 <code>Observable.unsafeSubscribe(Observer)</code> does nothing.
 */
@interface RxInternalOperatorsOnSubscribeToObservableFuture : NSObject

#pragma mark Public

+ (id<RxObservable_OnSubscribe>)toObservableFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that;

+ (id<RxObservable_OnSubscribe>)toObservableFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that
                                                                      withLong:(jlong)time
                                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFuture)

FOUNDATION_EXPORT id<RxObservable_OnSubscribe> RxInternalOperatorsOnSubscribeToObservableFuture_toObservableFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT id<RxObservable_OnSubscribe> RxInternalOperatorsOnSubscribeToObservableFuture_toObservableFutureWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeToObservableFuture)

#endif

#if !defined (RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture || defined(INCLUDE_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture))
#define RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxSubscriber;
@protocol JavaUtilConcurrentFuture;

@interface RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture : NSObject < RxObservable_OnSubscribe > {
 @public
  id<JavaUtilConcurrentFuture> that_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that;

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)that
                                        withLong:(jlong)time
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)callWithId:(RxSubscriber *)subscriber;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture, that_, id<JavaUtilConcurrentFuture>)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *self, id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *new_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *create_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> that);

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *self, id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *new_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture *create_RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture_initWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> that, jlong time, JavaUtilConcurrentTimeUnit *unit);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeToObservableFuture_ToObservableFuture)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeToObservableFuture")
