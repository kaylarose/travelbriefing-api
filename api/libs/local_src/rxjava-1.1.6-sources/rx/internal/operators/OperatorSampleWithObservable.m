//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorSampleWithObservable.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/Observable.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/internal/operators/OperatorSampleWithObservable.h"
#include "rx/observers/SerializedSubscriber.h"

@interface RxInternalOperatorsOperatorSampleWithObservable_$1 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
  RxObserversSerializedSubscriber *val$s_;
  JavaUtilConcurrentAtomicAtomicReference *val$main_;
}

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxObserversSerializedSubscriber:(RxObserversSerializedSubscriber *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleWithObservable_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$1, val$value_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$1, val$s_, RxObserversSerializedSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$1, val$main_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorSampleWithObservable_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleWithObservable_$1 *new_RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleWithObservable_$1 *create_RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSampleWithObservable_$1)

@interface RxInternalOperatorsOperatorSampleWithObservable_$2 : RxSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$value_;
  RxObserversSerializedSubscriber *val$s_;
  RxSubscriber *val$samplerSub_;
}

- (void)onNextWithId:(id)t;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onCompleted;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxObserversSerializedSubscriber:(RxObserversSerializedSubscriber *)capture$1
                                               withRxSubscriber:(RxSubscriber *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleWithObservable_$2)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$2, val$value_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$2, val$s_, RxObserversSerializedSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithObservable_$2, val$samplerSub_, RxSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSampleWithObservable_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2);

__attribute__((unused)) static RxInternalOperatorsOperatorSampleWithObservable_$2 *new_RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorSampleWithObservable_$2 *create_RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSampleWithObservable_$2)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorSampleWithObservable)

id RxInternalOperatorsOperatorSampleWithObservable_EMPTY_TOKEN;

@implementation RxInternalOperatorsOperatorSampleWithObservable

+ (id)EMPTY_TOKEN {
  return RxInternalOperatorsOperatorSampleWithObservable_EMPTY_TOKEN;
}

- (instancetype)initWithRxObservable:(RxObservable *)sampler {
  RxInternalOperatorsOperatorSampleWithObservable_initWithRxObservable_(self, sampler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxObserversSerializedSubscriber *s = new_RxObserversSerializedSubscriber_initWithRxSubscriber_(child);
  JavaUtilConcurrentAtomicAtomicReference *value = new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(RxInternalOperatorsOperatorSampleWithObservable_EMPTY_TOKEN);
  JavaUtilConcurrentAtomicAtomicReference *main = new_JavaUtilConcurrentAtomicAtomicReference_init();
  RxSubscriber *samplerSub = new_RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(value, s, main);
  RxSubscriber *result = new_RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(value, s, samplerSub);
  [main lazySetWithId:result];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:result];
  [child addWithRxSubscription:samplerSub];
  (void) [((RxObservable *) nil_chk(sampler_)) unsafeSubscribeWithRxSubscriber:samplerSub];
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservable:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "callWithId:", "LRxSubscriber;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sampler_", "LRxObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "EMPTY_TOKEN", "LNSObject;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservable;", "(Lrx/Observable<TU;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "Lrx/Observable<TU;>;", &RxInternalOperatorsOperatorSampleWithObservable_EMPTY_TOKEN, "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleWithObservable = { "OperatorSampleWithObservable", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, 7, -1 };
  return &_RxInternalOperatorsOperatorSampleWithObservable;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorSampleWithObservable class]) {
    RxInternalOperatorsOperatorSampleWithObservable_EMPTY_TOKEN = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorSampleWithObservable)
  }
}

@end

void RxInternalOperatorsOperatorSampleWithObservable_initWithRxObservable_(RxInternalOperatorsOperatorSampleWithObservable *self, RxObservable *sampler) {
  NSObject_init(self);
  self->sampler_ = sampler;
}

RxInternalOperatorsOperatorSampleWithObservable *new_RxInternalOperatorsOperatorSampleWithObservable_initWithRxObservable_(RxObservable *sampler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleWithObservable, initWithRxObservable_, sampler)
}

RxInternalOperatorsOperatorSampleWithObservable *create_RxInternalOperatorsOperatorSampleWithObservable_initWithRxObservable_(RxObservable *sampler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleWithObservable, initWithRxObservable_, sampler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleWithObservable)

@implementation RxInternalOperatorsOperatorSampleWithObservable_$1

- (void)onNextWithId:(id)t {
  id localValue = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) getAndSetWithId:JreLoadStatic(RxInternalOperatorsOperatorSampleWithObservable, EMPTY_TOKEN)];
  if (localValue != JreLoadStatic(RxInternalOperatorsOperatorSampleWithObservable, EMPTY_TOKEN)) {
    id v = localValue;
    [((RxObserversSerializedSubscriber *) nil_chk(val$s_)) onNextWithId:v];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxObserversSerializedSubscriber *) nil_chk(val$s_)) onErrorWithNSException:e];
  [((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$main_)) get])) unsubscribe];
}

- (void)onCompleted {
  [self onNextWithId:nil];
  [((RxObserversSerializedSubscriber *) nil_chk(val$s_)) onCompleted];
  [((id<RxSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$main_)) get])) unsubscribe];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxObserversSerializedSubscriber:(RxObserversSerializedSubscriber *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onNextWithId:", "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithJavaUtilConcurrentAtomicAtomicReference:withRxObserversSerializedSubscriber:withJavaUtilConcurrentAtomicAtomicReference:", NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$s_", "LRxObserversSerializedSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "val$main_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TU;)V", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LRxObserversSerializedSubscriber;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lrx/observers/SerializedSubscriber<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "Lrx/observers/SerializedSubscriber<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/Subscription;>;", "LRxInternalOperatorsOperatorSampleWithObservable;", "callWithId:", "Lrx/Subscriber<TU;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleWithObservable_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 3, 10, -1, 11, 12, -1 };
  return &_RxInternalOperatorsOperatorSampleWithObservable_$1;
}

@end

void RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(RxInternalOperatorsOperatorSampleWithObservable_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  self->val$value_ = capture$0;
  self->val$s_ = capture$1;
  self->val$main_ = capture$2;
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorSampleWithObservable_$1 *new_RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleWithObservable_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorSampleWithObservable_$1 *create_RxInternalOperatorsOperatorSampleWithObservable_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleWithObservable_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleWithObservable_$1)

@implementation RxInternalOperatorsOperatorSampleWithObservable_$2

- (void)onNextWithId:(id)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$value_)) setWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxObserversSerializedSubscriber *) nil_chk(val$s_)) onErrorWithNSException:e];
  [((RxSubscriber *) nil_chk(val$samplerSub_)) unsubscribe];
}

- (void)onCompleted {
  [((RxSubscriber *) nil_chk(val$samplerSub_)) onNextWithId:nil];
  [((RxObserversSerializedSubscriber *) nil_chk(val$s_)) onCompleted];
  [val$samplerSub_ unsubscribe];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                            withRxObserversSerializedSubscriber:(RxObserversSerializedSubscriber *)capture$1
                                               withRxSubscriber:(RxSubscriber *)capture$2 {
  RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onNextWithId:", "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithJavaUtilConcurrentAtomicAtomicReference:withRxObserversSerializedSubscriber:withRxSubscriber:", NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$s_", "LRxObserversSerializedSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "val$samplerSub_", "LRxSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LRxObserversSerializedSubscriber;LRxSubscriber;", "(Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;Lrx/observers/SerializedSubscriber<TT;>;Lrx/Subscriber<TU;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "Lrx/observers/SerializedSubscriber<TT;>;", "Lrx/Subscriber<TU;>;", "LRxInternalOperatorsOperatorSampleWithObservable;", "callWithId:", "Lrx/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleWithObservable_$2 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 4, 3, 10, -1, 11, 12, -1 };
  return &_RxInternalOperatorsOperatorSampleWithObservable_$2;
}

@end

void RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(RxInternalOperatorsOperatorSampleWithObservable_$2 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2) {
  self->val$value_ = capture$0;
  self->val$s_ = capture$1;
  self->val$samplerSub_ = capture$2;
  RxSubscriber_init(self);
}

RxInternalOperatorsOperatorSampleWithObservable_$2 *new_RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleWithObservable_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_, capture$0, capture$1, capture$2)
}

RxInternalOperatorsOperatorSampleWithObservable_$2 *create_RxInternalOperatorsOperatorSampleWithObservable_$2_initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_(JavaUtilConcurrentAtomicAtomicReference *capture$0, RxObserversSerializedSubscriber *capture$1, RxSubscriber *capture$2) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleWithObservable_$2, initWithJavaUtilConcurrentAtomicAtomicReference_withRxObserversSerializedSubscriber_withRxSubscriber_, capture$0, capture$1, capture$2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleWithObservable_$2)
