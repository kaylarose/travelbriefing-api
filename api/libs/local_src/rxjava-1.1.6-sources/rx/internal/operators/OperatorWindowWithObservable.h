//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorWindowWithObservable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable")
#ifdef RESTRICT_RxInternalOperatorsOperatorWindowWithObservable
#define INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorWindowWithObservable

#if !defined (RxInternalOperatorsOperatorWindowWithObservable_) && (INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable || defined(INCLUDE_RxInternalOperatorsOperatorWindowWithObservable))
#define RxInternalOperatorsOperatorWindowWithObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxInternalOperatorsNotificationLite;
@class RxObservable;
@class RxSubscriber;

/*!
 @brief Creates non-overlapping windows of items where each window is terminated by
 an event from a secondary observable and a new window is started immediately.
 */
@interface RxInternalOperatorsOperatorWindowWithObservable : NSObject < RxObservable_Operator > {
 @public
  RxObservable *other_;
}

+ (id)NEXT_SUBJECT;

+ (RxInternalOperatorsNotificationLite *)nl;

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)other;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable, other_, RxObservable *)

/*!
 @brief Indicate the current subject should complete and a new subject be emitted.
 */
inline id RxInternalOperatorsOperatorWindowWithObservable_get_NEXT_SUBJECT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id RxInternalOperatorsOperatorWindowWithObservable_NEXT_SUBJECT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorWindowWithObservable, NEXT_SUBJECT, id)

/*!
 @brief For error and completion indication.
 */
inline RxInternalOperatorsNotificationLite *RxInternalOperatorsOperatorWindowWithObservable_get_nl();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalOperatorsNotificationLite *RxInternalOperatorsOperatorWindowWithObservable_nl;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorWindowWithObservable, nl, RxInternalOperatorsNotificationLite *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorWindowWithObservable_initWithRxObservable_(RxInternalOperatorsOperatorWindowWithObservable *self, RxObservable *other);

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable *new_RxInternalOperatorsOperatorWindowWithObservable_initWithRxObservable_(RxObservable *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable *create_RxInternalOperatorsOperatorWindowWithObservable_initWithRxObservable_(RxObservable *other);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorWindowWithObservable)

#endif

#if !defined (RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable || defined(INCLUDE_RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber))
#define RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxObservable;
@protocol JavaUtilList;
@protocol RxObserver;

/*!
 @brief Observes the source.
 */
@interface RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  id guard_;
  /*!
   @brief Accessed from the serialized part.
   */
  id<RxObserver> consumer_;
  /*!
   @brief Accessed from the serialized part.
   */
  RxObservable *producer_SourceSubscriber_;
  /*!
   @brief Guarded by guard.
   */
  jboolean emitting_;
  /*!
   @brief Guarded by guard.
   */
  id<JavaUtilList> queue_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onStart;

#pragma mark Package-Private

- (void)complete;

- (void)createNewWindow;

- (void)drainWithJavaUtilList:(id<JavaUtilList>)queue;

- (void)emitValueWithId:(id)t;

- (void)errorWithNSException:(NSException *)e;

- (void)replaceSubject;

- (void)replaceWindow;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber, guard_, id)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber, consumer_, id<RxObserver>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber, producer_SourceSubscriber_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber, queue_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_initWithRxSubscriber_(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *self, RxSubscriber *child);

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *new_RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_initWithRxSubscriber_(RxSubscriber *child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *create_RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_initWithRxSubscriber_(RxSubscriber *child);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber)

#endif

#if !defined (RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable || defined(INCLUDE_RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber))
#define RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber;

/*!
 @brief Observes the boundary.
 */
@interface RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber : RxSubscriber {
 @public
  RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *sub_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
withRxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber:(RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *)sub;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onStart;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber, sub_, RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber_initWithRxSubscriber_withRxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_(RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber *self, RxSubscriber *child, RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *sub);

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber *new_RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber_initWithRxSubscriber_withRxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_(RxSubscriber *child, RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *sub) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber *create_RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber_initWithRxSubscriber_withRxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber_(RxSubscriber *child, RxInternalOperatorsOperatorWindowWithObservable_SourceSubscriber *sub);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorWindowWithObservable_BoundarySubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorWindowWithObservable")
