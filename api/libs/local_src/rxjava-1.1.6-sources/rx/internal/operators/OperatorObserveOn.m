//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorObserveOn.java
//

#include "J2ObjC_source.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "rx/Observable.h"
#include "rx/Producer.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/MissingBackpressureException.h"
#include "rx/functions/Action0.h"
#include "rx/internal/operators/BackpressureUtils.h"
#include "rx/internal/operators/NotificationLite.h"
#include "rx/internal/operators/OperatorObserveOn.h"
#include "rx/internal/schedulers/ImmediateScheduler.h"
#include "rx/internal/schedulers/TrampolineScheduler.h"
#include "rx/internal/util/RxRingBuffer.h"
#include "rx/internal/util/atomic/SpscAtomicArrayQueue.h"
#include "rx/internal/util/unsafe/SpscArrayQueue.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"
#include "rx/plugins/RxJavaErrorHandler.h"
#include "rx/plugins/RxJavaPlugins.h"
#include "rx/schedulers/Schedulers.h"

@interface RxInternalOperatorsOperatorObserveOn () {
 @public
  RxScheduler *scheduler_;
  jboolean delayError_;
  jint bufferSize_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn, scheduler_, RxScheduler *)

/*!
 @brief Observe through individual queue per observer.
 */
@interface RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber : RxSubscriber < RxFunctionsAction0 > {
 @public
  RxSubscriber *child_;
  RxScheduler_Worker *recursiveScheduler_;
  RxInternalOperatorsNotificationLite *on_;
  jboolean delayError_;
  id<JavaUtilQueue> queue_;
  /*!
   @brief The emission threshold that should trigger a replenishing request.
   */
  jint limit_;
  volatile_jboolean finished_;
  JavaUtilConcurrentAtomicAtomicLong *requested_ObserveOnSubscriber_;
  JavaUtilConcurrentAtomicAtomicLong *counter_;
  /*!
   @brief The single exception if not null, should be written before setting finished (release) and read after
 reading finished (acquire).
   */
  NSException *error_;
  /*!
   @brief Remembers how many elements have been emitted before the requests run out.
   */
  jlong emitted_;
}

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                   withRxSubscriber:(RxSubscriber *)child
                        withBoolean:(jboolean)delayError
                            withInt:(jint)bufferSize;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)onNextWithId:(id)t;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)schedule;

- (void)call;

- (jboolean)checkTerminatedWithBoolean:(jboolean)done
                           withBoolean:(jboolean)isEmpty
                      withRxSubscriber:(RxSubscriber *)a
                     withJavaUtilQueue:(id<JavaUtilQueue>)q;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, recursiveScheduler_, RxScheduler_Worker *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, on_, RxInternalOperatorsNotificationLite *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, requested_ObserveOnSubscriber_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, counter_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, error_, NSException *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *self, RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *create_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber)

@interface RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 : NSObject < RxProducer > {
 @public
  RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *this$0_;
}

- (void)requestWithLong:(jlong)n;

- (instancetype)initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber:(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1, this$0_, RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *self, RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *create_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1)

@interface RxInternalOperatorsOperatorObserveOn_$1 : NSObject < RxObservable_Operator > {
 @public
  jint val$n_;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

- (instancetype)initWithInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorObserveOn_$1)

__attribute__((unused)) static void RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(RxInternalOperatorsOperatorObserveOn_$1 *self, jint capture$0);

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_$1 *new_RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOperatorObserveOn_$1 *create_RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(jint capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorObserveOn_$1)

@implementation RxInternalOperatorsOperatorObserveOn

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                        withBoolean:(jboolean)delayError {
  RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(self, scheduler, delayError);
  return self;
}

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                        withBoolean:(jboolean)delayError
                            withInt:(jint)bufferSize {
  RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(self, scheduler, delayError, bufferSize);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  if ([scheduler_ isKindOfClass:[RxInternalSchedulersImmediateScheduler class]]) {
    return child;
  }
  else if ([scheduler_ isKindOfClass:[RxInternalSchedulersTrampolineScheduler class]]) {
    return child;
  }
  else {
    RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *parent = new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(scheduler_, child, delayError_, bufferSize_);
    [parent init__];
    return parent;
  }
}

+ (id<RxObservable_Operator>)rebatchWithInt:(jint)n {
  return RxInternalOperatorsOperatorObserveOn_rebatchWithInt_(n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxScheduler:withBoolean:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "initWithRxScheduler:withBoolean:withInt:", NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { "callWithId:", "LRxSubscriber;", 0x1, 2, 3, -1, 4, -1, -1 },
    { "rebatchWithInt:", "LRxObservable_Operator;", 0x9, 5, 6, -1, 7, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;Z", "LRxScheduler;ZI", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "rebatch", "I", "<T:Ljava/lang/Object;>(I)Lrx/Observable$Operator<TT;TT;>;", "LRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOn = { "OperatorObserveOn", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, 8, -1, 9, -1 };
  return &_RxInternalOperatorsOperatorObserveOn;
}

@end

void RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxInternalOperatorsOperatorObserveOn *self, RxScheduler *scheduler, jboolean delayError) {
  RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(self, scheduler, delayError, JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

RxInternalOperatorsOperatorObserveOn *new_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxScheduler *scheduler, jboolean delayError) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOn, initWithRxScheduler_withBoolean_, scheduler, delayError)
}

RxInternalOperatorsOperatorObserveOn *create_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_(RxScheduler *scheduler, jboolean delayError) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOn, initWithRxScheduler_withBoolean_, scheduler, delayError)
}

void RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxInternalOperatorsOperatorObserveOn *self, RxScheduler *scheduler, jboolean delayError, jint bufferSize) {
  NSObject_init(self);
  self->scheduler_ = scheduler;
  self->delayError_ = delayError;
  self->bufferSize_ = (bufferSize > 0) ? bufferSize : JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE);
}

RxInternalOperatorsOperatorObserveOn *new_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxScheduler *scheduler, jboolean delayError, jint bufferSize) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOn, initWithRxScheduler_withBoolean_withInt_, scheduler, delayError, bufferSize)
}

RxInternalOperatorsOperatorObserveOn *create_RxInternalOperatorsOperatorObserveOn_initWithRxScheduler_withBoolean_withInt_(RxScheduler *scheduler, jboolean delayError, jint bufferSize) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOn, initWithRxScheduler_withBoolean_withInt_, scheduler, delayError, bufferSize)
}

id<RxObservable_Operator> RxInternalOperatorsOperatorObserveOn_rebatchWithInt_(jint n) {
  RxInternalOperatorsOperatorObserveOn_initialize();
  return new_RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(n);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorObserveOn)

@implementation RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber

- (instancetype)initWithRxScheduler:(RxScheduler *)scheduler
                   withRxSubscriber:(RxSubscriber *)child
                        withBoolean:(jboolean)delayError
                            withInt:(jint)bufferSize {
  RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(self, scheduler, child, delayError, bufferSize);
  return self;
}

- (void)init__ {
  RxSubscriber *localChild = child_;
  [((RxSubscriber *) nil_chk(localChild)) setProducerWithRxProducer:new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(self)];
  [localChild addWithRxSubscription:recursiveScheduler_];
  [localChild addWithRxSubscription:self];
}

- (void)onNextWithId:(id)t {
  if ([self isUnsubscribed] || JreLoadVolatileBoolean(&finished_)) {
    return;
  }
  if (![((id<JavaUtilQueue>) nil_chk(queue_)) offerWithId:[((RxInternalOperatorsNotificationLite *) nil_chk(on_)) nextWithId:t]]) {
    [self onErrorWithNSException:new_RxExceptionsMissingBackpressureException_init()];
    return;
  }
  [self schedule];
}

- (void)onCompleted {
  if ([self isUnsubscribed] || JreLoadVolatileBoolean(&finished_)) {
    return;
  }
  JreAssignVolatileBoolean(&finished_, true);
  [self schedule];
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([self isUnsubscribed] || JreLoadVolatileBoolean(&finished_)) {
    [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:e];
    return;
  }
  error_ = e;
  JreAssignVolatileBoolean(&finished_, true);
  [self schedule];
}

- (void)schedule {
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(counter_)) getAndIncrement] == 0) {
    (void) [((RxScheduler_Worker *) nil_chk(recursiveScheduler_)) scheduleWithRxFunctionsAction0:self];
  }
}

- (void)call {
  jlong missed = 1LL;
  jlong currentEmission = emitted_;
  id<JavaUtilQueue> q = self->queue_;
  RxSubscriber *localChild = self->child_;
  RxInternalOperatorsNotificationLite *localOn = self->on_;
  for (; ; ) {
    jlong requestAmount = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_ObserveOnSubscriber_)) get];
    while (requestAmount != currentEmission) {
      jboolean done = JreLoadVolatileBoolean(&finished_);
      id v = [((id<JavaUtilQueue>) nil_chk(q)) poll];
      jboolean empty = v == nil;
      if ([self checkTerminatedWithBoolean:done withBoolean:empty withRxSubscriber:localChild withJavaUtilQueue:q]) {
        return;
      }
      if (empty) {
        break;
      }
      [((RxSubscriber *) nil_chk(localChild)) onNextWithId:[((RxInternalOperatorsNotificationLite *) nil_chk(localOn)) getValueWithId:v]];
      currentEmission++;
      if (currentEmission == limit_) {
        requestAmount = RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_ObserveOnSubscriber_, currentEmission);
        [self requestWithLong:currentEmission];
        currentEmission = 0LL;
      }
    }
    if (requestAmount == currentEmission) {
      if ([self checkTerminatedWithBoolean:JreLoadVolatileBoolean(&finished_) withBoolean:[((id<JavaUtilQueue>) nil_chk(q)) isEmpty] withRxSubscriber:localChild withJavaUtilQueue:q]) {
        return;
      }
    }
    emitted_ = currentEmission;
    missed = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(counter_)) addAndGetWithLong:-missed];
    if (missed == 0LL) {
      break;
    }
  }
}

- (jboolean)checkTerminatedWithBoolean:(jboolean)done
                           withBoolean:(jboolean)isEmpty
                      withRxSubscriber:(RxSubscriber *)a
                     withJavaUtilQueue:(id<JavaUtilQueue>)q {
  if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
    [((id<JavaUtilQueue>) nil_chk(q)) clear];
    return true;
  }
  if (done) {
    if (delayError_) {
      if (isEmpty) {
        NSException *e = error_;
        @try {
          if (e != nil) {
            [a onErrorWithNSException:e];
          }
          else {
            [a onCompleted];
          }
        }
        @finally {
          [((RxScheduler_Worker *) nil_chk(recursiveScheduler_)) unsubscribe];
        }
      }
    }
    else {
      NSException *e = error_;
      if (e != nil) {
        [((id<JavaUtilQueue>) nil_chk(q)) clear];
        @try {
          [a onErrorWithNSException:e];
        }
        @finally {
          [((RxScheduler_Worker *) nil_chk(recursiveScheduler_)) unsubscribe];
        }
        return true;
      }
      else if (isEmpty) {
        @try {
          [a onCompleted];
        }
        @finally {
          [((RxScheduler_Worker *) nil_chk(recursiveScheduler_)) unsubscribe];
        }
        return true;
      }
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxScheduler:withRxSubscriber:withBoolean:withInt:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "init__", "V", 0x0, 2, -1, -1, -1, -1, -1 },
    { "onNextWithId:", "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { "schedule", "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "checkTerminatedWithBoolean:withBoolean:withRxSubscriber:withJavaUtilQueue:", "Z", 0x0, 8, 9, -1, 10, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "child_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "recursiveScheduler_", "LRxScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "on_", "LRxInternalOperatorsNotificationLite;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "requested_ObserveOnSubscriber_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, 14, -1, -1, -1 },
    { "counter_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "emitted_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxScheduler;LRxSubscriber;ZI", "(Lrx/Scheduler;Lrx/Subscriber<-TT;>;ZI)V", "init", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "checkTerminated", "ZZLRxSubscriber;LJavaUtilQueue;", "(ZZLrx/Subscriber<-TT;>;Ljava/util/Queue<Ljava/lang/Object;>;)Z", "Lrx/Subscriber<-TT;>;", "Lrx/internal/operators/NotificationLite<TT;>;", "Ljava/util/Queue<Ljava/lang/Object;>;", "requested", "LRxInternalOperatorsOperatorObserveOn;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/functions/Action0;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber = { "ObserveOnSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1a, 8, 11, 15, -1, -1, 16, -1 };
  return &_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber;
}

@end

void RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *self, RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize) {
  RxSubscriber_init(self);
  self->requested_ObserveOnSubscriber_ = new_JavaUtilConcurrentAtomicAtomicLong_init();
  self->counter_ = new_JavaUtilConcurrentAtomicAtomicLong_init();
  self->child_ = child;
  self->recursiveScheduler_ = [((RxScheduler *) nil_chk(scheduler)) createWorker];
  self->delayError_ = delayError;
  self->on_ = RxInternalOperatorsNotificationLite_instance();
  jint calculatedSize = (bufferSize > 0) ? bufferSize : JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE);
  self->limit_ = calculatedSize - (JreRShift32(calculatedSize, 2));
  if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    self->queue_ = new_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(calculatedSize);
  }
  else {
    self->queue_ = new_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(calculatedSize);
  }
  [self requestWithLong:calculatedSize];
}

RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, initWithRxScheduler_withRxSubscriber_withBoolean_withInt_, scheduler, child, delayError, bufferSize)
}

RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *create_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxScheduler *scheduler, RxSubscriber *child, jboolean delayError, jint bufferSize) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber, initWithRxScheduler_withRxSubscriber_withBoolean_withInt_, scheduler, child, delayError, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber)

@implementation RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1

- (void)requestWithLong:(jlong)n {
  if (n > 0LL) {
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(this$0_->requested_ObserveOnSubscriber_, n);
    [this$0_ schedule];
  }
}

- (instancetype)initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber:(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *)outer$ {
  RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "requestWithLong:", "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { "initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber:", NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "request", "J", "LRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber;", "init__" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1;
}

@end

void RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *self, RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1, initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_, outer$)
}

RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1 *create_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1_initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1, initWithRxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_$1)

@implementation RxInternalOperatorsOperatorObserveOn_$1

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber *parent = new_RxInternalOperatorsOperatorObserveOn_ObserveOnSubscriber_initWithRxScheduler_withRxSubscriber_withBoolean_withInt_(RxSchedulersSchedulers_immediate(), child, false, val$n_);
  [parent init__];
  return parent;
}

- (instancetype)initWithInt:(jint)capture$0 {
  RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "callWithId:", "LRxSubscriber;", 0x1, 0, 1, -1, 2, -1, -1 },
    { "initWithInt:", NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$n_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "I", "LRxInternalOperatorsOperatorObserveOn;", "rebatchWithInt:", "Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorObserveOn_$1 = { "", "rx.internal.operators", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_RxInternalOperatorsOperatorObserveOn_$1;
}

@end

void RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(RxInternalOperatorsOperatorObserveOn_$1 *self, jint capture$0) {
  self->val$n_ = capture$0;
  NSObject_init(self);
}

RxInternalOperatorsOperatorObserveOn_$1 *new_RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorObserveOn_$1, initWithInt_, capture$0)
}

RxInternalOperatorsOperatorObserveOn_$1 *create_RxInternalOperatorsOperatorObserveOn_$1_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorObserveOn_$1, initWithInt_, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorObserveOn_$1)
