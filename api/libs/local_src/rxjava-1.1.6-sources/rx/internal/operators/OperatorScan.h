//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorScan.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorScan")
#ifdef RESTRICT_RxInternalOperatorsOperatorScan
#define INCLUDE_ALL_RxInternalOperatorsOperatorScan 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorScan 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorScan

#if !defined (RxInternalOperatorsOperatorScan_) && (INCLUDE_ALL_RxInternalOperatorsOperatorScan || defined(INCLUDE_RxInternalOperatorsOperatorScan))
#define RxInternalOperatorsOperatorScan_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc2;

/*!
 @brief Returns an Observable that applies a function to the first item emitted by a source Observable, then feeds
 the result of that function along with the second item emitted by an Observable into the same function, and
 so on until all items have been emitted by the source Observable, emitting the result of each of these
 iterations.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/scan.png" alt="">
 <p>
 This sort of function is sometimes called an accumulator.
 <p>
 Note that when you pass a seed to <code>scan</code> the resulting Observable will emit that seed as its
 first emitted item.
 */
@interface RxInternalOperatorsOperatorScan : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc2> accumulator_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)initialValueFactory
                    withRxFunctionsFunc2:(id<RxFunctionsFunc2>)accumulator;

/*!
 @brief Applies an accumulator function over an observable sequence and returns each intermediate result with the
 specified source and accumulator.
 @param accumulator
 an accumulator function to be invoked on each element from the sequence
 - seealso: <a href="http://msdn.microsoft.com/en-us/library/hh211665.aspx">Observable.Scan(TSource) Method (IObservable(TSource), Func(TSource, TSource, TSource))</a>
 */
- (instancetype)initWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)accumulator;

/*!
 @brief Applies an accumulator function over an observable sequence and returns each intermediate result with the
 specified source and accumulator.
 @param initialValue
 the initial (seed) accumulator value
 @param accumulator
 an accumulator function to be invoked on each element from the sequence
 - seealso: <a href="http://msdn.microsoft.com/en-us/library/hh212007.aspx">Observable.Scan(TSource, TAccumulate) Method (IObservable(TSource), TAccumulate, Func(TAccumulate, TSource,
     *      TAccumulate))</a>
 */
- (instancetype)initWithId:(id)initialValue
      withRxFunctionsFunc2:(id<RxFunctionsFunc2>)accumulator;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorScan)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorScan, accumulator_, id<RxFunctionsFunc2>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorScan_initWithId_withRxFunctionsFunc2_(RxInternalOperatorsOperatorScan *self, id initialValue, id<RxFunctionsFunc2> accumulator);

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *new_RxInternalOperatorsOperatorScan_initWithId_withRxFunctionsFunc2_(id initialValue, id<RxFunctionsFunc2> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *create_RxInternalOperatorsOperatorScan_initWithId_withRxFunctionsFunc2_(id initialValue, id<RxFunctionsFunc2> accumulator);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc0_withRxFunctionsFunc2_(RxInternalOperatorsOperatorScan *self, id<RxFunctionsFunc0> initialValueFactory, id<RxFunctionsFunc2> accumulator);

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *new_RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc0_withRxFunctionsFunc2_(id<RxFunctionsFunc0> initialValueFactory, id<RxFunctionsFunc2> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *create_RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc0_withRxFunctionsFunc2_(id<RxFunctionsFunc0> initialValueFactory, id<RxFunctionsFunc2> accumulator);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc2_(RxInternalOperatorsOperatorScan *self, id<RxFunctionsFunc2> accumulator);

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *new_RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan *create_RxInternalOperatorsOperatorScan_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> accumulator);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorScan)

#endif

#if !defined (RxInternalOperatorsOperatorScan_InitialProducer_) && (INCLUDE_ALL_RxInternalOperatorsOperatorScan || defined(INCLUDE_RxInternalOperatorsOperatorScan_InitialProducer))
#define RxInternalOperatorsOperatorScan_InitialProducer_

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@class JavaUtilConcurrentAtomicAtomicLong;
@class RxSubscriber;
@protocol JavaUtilQueue;

@interface RxInternalOperatorsOperatorScan_InitialProducer : NSObject < RxProducer, RxObserver > {
 @public
  RxSubscriber *child_;
  id<JavaUtilQueue> queue_;
  jboolean emitting_;
  /*!
   @brief Missed a terminal event.
   */
  jboolean missed_;
  /*!
   @brief Missed a request.
   */
  jlong missedRequested_;
  /*!
   @brief The current requested amount.
   */
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  /*!
   @brief The current producer.
   */
  volatile_id producer_;
  volatile_jboolean done_;
  NSException *error_;
}

#pragma mark Public

- (instancetype)initWithId:(id)initialValue
          withRxSubscriber:(RxSubscriber *)child;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)requestWithLong:(jlong)n;

- (void)setProducerWithRxProducer:(id<RxProducer>)p;

#pragma mark Package-Private

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
                      withRxSubscriber:(RxSubscriber *)child;

- (void)emit;

- (void)emitLoop;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorScan_InitialProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorScan_InitialProducer, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorScan_InitialProducer, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorScan_InitialProducer, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorScan_InitialProducer, producer_, id<RxProducer>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorScan_InitialProducer, error_, NSException *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorScan_InitialProducer_initWithId_withRxSubscriber_(RxInternalOperatorsOperatorScan_InitialProducer *self, id initialValue, RxSubscriber *child);

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan_InitialProducer *new_RxInternalOperatorsOperatorScan_InitialProducer_initWithId_withRxSubscriber_(id initialValue, RxSubscriber *child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorScan_InitialProducer *create_RxInternalOperatorsOperatorScan_InitialProducer_initWithId_withRxSubscriber_(id initialValue, RxSubscriber *child);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorScan_InitialProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorScan")
