//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorSampleWithTime.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime")
#ifdef RESTRICT_RxInternalOperatorsOperatorSampleWithTime
#define INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorSampleWithTime

#if !defined (RxInternalOperatorsOperatorSampleWithTime_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime || defined(INCLUDE_RxInternalOperatorsOperatorSampleWithTime))
#define RxInternalOperatorsOperatorSampleWithTime_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler;
@class RxSubscriber;

/*!
 @brief Returns an Observable that emits the results of sampling the items emitted by the source
 Observable at a specified time interval.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/sample.png" alt="">
 */
@interface RxInternalOperatorsOperatorSampleWithTime : NSObject < RxObservable_Operator > {
 @public
  jlong time_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSampleWithTime)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithTime, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithTime, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorSampleWithTime *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSampleWithTime *new_RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSampleWithTime *create_RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSampleWithTime)

#endif

#if !defined (RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime || defined(INCLUDE_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber))
#define RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

#define RESTRICT_RxFunctionsAction0 1
#define INCLUDE_RxFunctionsAction0 1
#include "rx/functions/Action0.h"

@class JavaUtilConcurrentAtomicAtomicReference;

/*!
 @brief The source subscriber and sampler.
 */
@interface RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber : RxSubscriber < RxFunctionsAction0 > {
 @public
  /*!
   @brief The shared value between the observer and the timed action.
   */
  JavaUtilConcurrentAtomicAtomicReference *value_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)subscriber;

- (void)call;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onStart;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber, value_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *self, RxSubscriber *subscriber);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *new_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxSubscriber *subscriber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *create_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxSubscriber *subscriber);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSampleWithTime")
