//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorToObservableList.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToObservableList")
#ifdef RESTRICT_RxInternalOperatorsOperatorToObservableList
#define INCLUDE_ALL_RxInternalOperatorsOperatorToObservableList 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorToObservableList 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorToObservableList

#if !defined (RxInternalOperatorsOperatorToObservableList_) && (INCLUDE_ALL_RxInternalOperatorsOperatorToObservableList || defined(INCLUDE_RxInternalOperatorsOperatorToObservableList))
#define RxInternalOperatorsOperatorToObservableList_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief Returns an <code>Observable</code> that emits a single item, a list composed of all the items emitted by the
 source <code>Observable</code>.
 <p>
 <img width="640" height="305" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/toList.png" alt="">
 <p>
 Normally, an <code>Observable</code> that returns multiple items will do so by invoking its subscriber's
 <code>onNext</code> method for each such item. You can change this behavior, instructing the
 <code>Observable</code> to compose a list of all of these multiple items and then to invoke the subscriber's
 <code>onNext</code> method once, passing it the entire list, by using this operator.
 <p>
 Be careful not to use this operator on <code>Observable</code>s that emit infinite or very large numbers of items,
 as you do not have the option to unsubscribe.
 */
@interface RxInternalOperatorsOperatorToObservableList : NSObject < RxObservable_Operator >

#pragma mark Public

- (RxSubscriber *)callWithId:(RxSubscriber *)o;

/*!
 @return a singleton instance of this stateless operator.
 */
+ (RxInternalOperatorsOperatorToObservableList *)instance;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorToObservableList)

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableList *RxInternalOperatorsOperatorToObservableList_instance();

FOUNDATION_EXPORT void RxInternalOperatorsOperatorToObservableList_init(RxInternalOperatorsOperatorToObservableList *self);

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableList *new_RxInternalOperatorsOperatorToObservableList_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorToObservableList *create_RxInternalOperatorsOperatorToObservableList_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorToObservableList)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorToObservableList")
