//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorBufferWithSingleObservable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable")
#ifdef RESTRICT_RxInternalOperatorsOperatorBufferWithSingleObservable
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorBufferWithSingleObservable

#if !defined (RxInternalOperatorsOperatorBufferWithSingleObservable_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSingleObservable))
#define RxInternalOperatorsOperatorBufferWithSingleObservable_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxObservable;
@class RxSubscriber;
@protocol RxFunctionsFunc0;

/*!
 @brief This operation takes
 values from the specified <code>Observable</code> source and stores them in a buffer until the
 <code>Observable</code> constructed using the <code>Func0</code> argument, produces a value.
 The buffer is then
 emitted, and a new buffer is created to replace it. A new <code>Observable</code> will be constructed using
 the provided <code>Func0</code> object, which will determine when this new buffer is emitted. When the source
 <code>Observable</code> completes or produces an error, the current buffer is emitted, and the event is
 propagated to all subscribed <code>Observer</code>s.
 <p>
 Note that this operation only produces <strong>non-overlapping chunks</strong>. At all times there is
 exactly one buffer actively storing values.
 </p>
 */
@interface RxInternalOperatorsOperatorBufferWithSingleObservable : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc0> bufferClosingSelector_;
  jint initialCapacity_;
}

#pragma mark Public

/*!
 @param bufferClosingSelector
 a <code>Func0</code> object which produces <code>Observable</code>s. These <code>Observable</code>s determine
 when a buffer is emitted and replaced by simply producing an object.
 @param initialCapacity the initial capacity of each buffer
 */
- (instancetype)initWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)bufferClosingSelector
                                 withInt:(jint)initialCapacity;

/*!
 @param bufferClosing
 An <code>Observable</code> to determine
 when a buffer is emitted and replaced by simply producing an object.
 @param initialCapacity the initial capacity of each buffer
 */
- (instancetype)initWithRxObservable:(RxObservable *)bufferClosing
                             withInt:(jint)initialCapacity;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSingleObservable)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSingleObservable, bufferClosingSelector_, id<RxFunctionsFunc0>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxFunctionsFunc0_withInt_(RxInternalOperatorsOperatorBufferWithSingleObservable *self, id<RxFunctionsFunc0> bufferClosingSelector, jint initialCapacity);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable *new_RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxFunctionsFunc0_withInt_(id<RxFunctionsFunc0> bufferClosingSelector, jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable *create_RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxFunctionsFunc0_withInt_(id<RxFunctionsFunc0> bufferClosingSelector, jint initialCapacity);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxObservable_withInt_(RxInternalOperatorsOperatorBufferWithSingleObservable *self, RxObservable *bufferClosing, jint initialCapacity);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable *new_RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxObservable_withInt_(RxObservable *bufferClosing, jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable *create_RxInternalOperatorsOperatorBufferWithSingleObservable_initWithRxObservable_withInt_(RxObservable *bufferClosing, jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSingleObservable)

#endif

#if !defined (RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable || defined(INCLUDE_RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber))
#define RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorBufferWithSingleObservable;
@protocol JavaUtilList;

@interface RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  /*!
   @brief Guarded by this.
   */
  id<JavaUtilList> chunk_;
  /*!
   @brief Guarded by this.
   */
  jboolean done_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorBufferWithSingleObservable:(RxInternalOperatorsOperatorBufferWithSingleObservable *)outer$
                                                             withRxSubscriber:(RxSubscriber *)child;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (void)emit;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber, chunk_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithSingleObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber *self, RxInternalOperatorsOperatorBufferWithSingleObservable *outer$, RxSubscriber *child);

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber *new_RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithSingleObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithSingleObservable *outer$, RxSubscriber *child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber *create_RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber_initWithRxInternalOperatorsOperatorBufferWithSingleObservable_withRxSubscriber_(RxInternalOperatorsOperatorBufferWithSingleObservable *outer$, RxSubscriber *child);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorBufferWithSingleObservable_BufferingSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorBufferWithSingleObservable")
