//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeLift.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeLift")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeLift
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeLift 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeLift 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeLift

#if !defined (RxInternalOperatorsOnSubscribeLift_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeLift || defined(INCLUDE_RxInternalOperatorsOnSubscribeLift))
#define RxInternalOperatorsOnSubscribeLift_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class RxPluginsRxJavaObservableExecutionHook;
@class RxSubscriber;
@protocol RxObservable_Operator;

/*!
 @brief Transforms the downstream Subscriber into a Subscriber via an operator
 callback and calls the parent OnSubscribe.call() method with it.
 */
@interface RxInternalOperatorsOnSubscribeLift : NSObject < RxObservable_OnSubscribe > {
 @public
  id<RxObservable_OnSubscribe> parent_;
  id<RxObservable_Operator> operator__;
}

+ (RxPluginsRxJavaObservableExecutionHook *)hook;

#pragma mark Public

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)parent
                       withRxObservable_Operator:(id<RxObservable_Operator>)operator_;

- (void)callWithId:(RxSubscriber *)o;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOnSubscribeLift)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeLift, parent_, id<RxObservable_OnSubscribe>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeLift, operator__, id<RxObservable_Operator>)

inline RxPluginsRxJavaObservableExecutionHook *RxInternalOperatorsOnSubscribeLift_get_hook();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxPluginsRxJavaObservableExecutionHook *RxInternalOperatorsOnSubscribeLift_hook;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOnSubscribeLift, hook, RxPluginsRxJavaObservableExecutionHook *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeLift_initWithRxObservable_OnSubscribe_withRxObservable_Operator_(RxInternalOperatorsOnSubscribeLift *self, id<RxObservable_OnSubscribe> parent, id<RxObservable_Operator> operator_);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeLift *new_RxInternalOperatorsOnSubscribeLift_initWithRxObservable_OnSubscribe_withRxObservable_Operator_(id<RxObservable_OnSubscribe> parent, id<RxObservable_Operator> operator_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeLift *create_RxInternalOperatorsOnSubscribeLift_initWithRxObservable_OnSubscribe_withRxObservable_Operator_(id<RxObservable_OnSubscribe> parent, id<RxObservable_Operator> operator_);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeLift)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeLift")
