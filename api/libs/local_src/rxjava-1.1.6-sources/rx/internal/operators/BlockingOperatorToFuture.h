//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/BlockingOperatorToFuture.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToFuture")
#ifdef RESTRICT_RxInternalOperatorsBlockingOperatorToFuture
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToFuture 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToFuture 1
#endif
#undef RESTRICT_RxInternalOperatorsBlockingOperatorToFuture

#if !defined (RxInternalOperatorsBlockingOperatorToFuture_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToFuture || defined(INCLUDE_RxInternalOperatorsBlockingOperatorToFuture))
#define RxInternalOperatorsBlockingOperatorToFuture_

@class RxObservable;
@protocol JavaUtilConcurrentFuture;

/*!
 @brief Returns a Future representing the single value emitted by an Observable.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.toFuture.png" alt="">
 <p>
 The toFuture operation throws an exception if the Observable emits more than one item. If the
 Observable may emit more than item, use <code>toList().toFuture()</code>.
 */
@interface RxInternalOperatorsBlockingOperatorToFuture : NSObject

#pragma mark Public

/*!
 @brief Returns a Future that expects a single item from the observable.
 @param that
 an observable sequence to get a Future for.
 @return the Future to retrieve a single elements from an Observable
 */
+ (id<JavaUtilConcurrentFuture>)toFutureWithRxObservable:(RxObservable *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorToFuture)

FOUNDATION_EXPORT id<JavaUtilConcurrentFuture> RxInternalOperatorsBlockingOperatorToFuture_toFutureWithRxObservable_(RxObservable *that);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToFuture)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToFuture")
