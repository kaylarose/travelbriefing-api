//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorSampleWithTime.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/internal/operators/OperatorSampleWithTime.h"
#include "rx/observers/SerializedSubscriber.h"

@interface RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber () {
 @public
  RxSubscriber *subscriber_SamplerSubscriber_;
}

- (void)emitIfNonEmpty;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber, subscriber_SamplerSubscriber_, RxSubscriber *)

/*!
 @brief Indicates that no value is available.
 */
inline id RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_get_EMPTY_TOKEN();
static id RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber, EMPTY_TOKEN, id)

__attribute__((unused)) static void RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_emitIfNonEmpty(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *self);

@implementation RxInternalOperatorsOperatorSampleWithTime

- (instancetype)initWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
             withRxScheduler:(RxScheduler *)scheduler {
  RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(self, time, unit, scheduler);
  return self;
}

- (RxSubscriber *)callWithId:(RxSubscriber *)child {
  RxObserversSerializedSubscriber *s = new_RxObserversSerializedSubscriber_initWithRxSubscriber_(child);
  RxScheduler_Worker *worker = [((RxScheduler *) nil_chk(scheduler_)) createWorker];
  [((RxSubscriber *) nil_chk(child)) addWithRxSubscription:worker];
  RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *sampler = new_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(s);
  [child addWithRxSubscription:sampler];
  (void) [((RxScheduler_Worker *) nil_chk(worker)) schedulePeriodicallyWithRxFunctionsAction0:sampler withLong:time_ withLong:time_ withJavaUtilConcurrentTimeUnit:unit_];
  return sampler;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "callWithId:", "LRxSubscriber;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLJavaUtilConcurrentTimeUnit;LRxScheduler;", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)Lrx/Subscriber<-TT;>;", "LRxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$Operator<TT;TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleWithTime = { "OperatorSampleWithTime", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, 4, -1, 5, -1 };
  return &_RxInternalOperatorsOperatorSampleWithTime;
}

@end

void RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOperatorSampleWithTime *self, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  NSObject_init(self);
  self->time_ = time;
  self->unit_ = unit;
  self->scheduler_ = scheduler;
}

RxInternalOperatorsOperatorSampleWithTime *new_RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleWithTime, initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, time, unit, scheduler)
}

RxInternalOperatorsOperatorSampleWithTime *create_RxInternalOperatorsOperatorSampleWithTime_initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleWithTime, initWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_, time, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleWithTime)

J2OBJC_INITIALIZED_DEFN(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber)

@implementation RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber

- (instancetype)initWithRxSubscriber:(RxSubscriber *)subscriber {
  RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(self, subscriber);
  return self;
}

- (void)onStart {
  [self requestWithLong:JavaLangLong_MAX_VALUE];
}

- (void)onNextWithId:(id)t {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(value_)) setWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubscriber *) nil_chk(subscriber_SamplerSubscriber_)) onErrorWithNSException:e];
  [self unsubscribe];
}

- (void)onCompleted {
  RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_emitIfNonEmpty(self);
  [((RxSubscriber *) nil_chk(subscriber_SamplerSubscriber_)) onCompleted];
  [self unsubscribe];
}

- (void)call {
  RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_emitIfNonEmpty(self);
}

- (void)emitIfNonEmpty {
  RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_emitIfNonEmpty(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "onStart", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onNextWithId:", "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "emitIfNonEmpty", "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "subscriber_SamplerSubscriber_", "LRxSubscriber;", .constantValue.asLong = 0, 0x12, 7, -1, 8, -1 },
    { "EMPTY_TOKEN", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "value_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "subscriber", "Lrx/Subscriber<-TT;>;", &RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN, "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "LRxInternalOperatorsOperatorSampleWithTime;", "<T:Ljava/lang/Object;>Lrx/Subscriber<TT;>;Lrx/functions/Action0;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber = { "SamplerSubscriber", "rx.internal.operators", ptrTable, methods, fields, 7, 0x18, 7, 3, 11, -1, -1, 12, -1 };
  return &_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber;
}

+ (void)initialize {
  if (self == [RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber class]) {
    RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber)
  }
}

@end

void RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *self, RxSubscriber *subscriber) {
  RxSubscriber_init(self);
  self->value_ = new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN);
  self->subscriber_SamplerSubscriber_ = subscriber;
}

RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *new_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxSubscriber *subscriber) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber, initWithRxSubscriber_, subscriber)
}

RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *create_RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_initWithRxSubscriber_(RxSubscriber *subscriber) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber, initWithRxSubscriber_, subscriber)
}

void RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_emitIfNonEmpty(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber *self) {
  id localValue = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->value_)) getAndSetWithId:RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN];
  if (localValue != RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber_EMPTY_TOKEN) {
    @try {
      id v = localValue;
      [((RxSubscriber *) nil_chk(self->subscriber_SamplerSubscriber_)) onNextWithId:v];
    }
    @catch (NSException *e) {
      RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(e, self);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOperatorSampleWithTime_SamplerSubscriber)
