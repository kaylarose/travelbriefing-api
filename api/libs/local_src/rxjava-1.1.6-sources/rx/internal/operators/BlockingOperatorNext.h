//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/BlockingOperatorNext.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext")
#ifdef RESTRICT_RxInternalOperatorsBlockingOperatorNext
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext 1
#endif
#undef RESTRICT_RxInternalOperatorsBlockingOperatorNext

#if !defined (RxInternalOperatorsBlockingOperatorNext_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext || defined(INCLUDE_RxInternalOperatorsBlockingOperatorNext))
#define RxInternalOperatorsBlockingOperatorNext_

@class RxObservable;
@protocol JavaLangIterable;

/*!
 @brief Returns an Iterable that blocks until the Observable emits another item, then returns that item.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.next.png" alt="">
 */
@interface RxInternalOperatorsBlockingOperatorNext : NSObject

#pragma mark Public

/*!
 @brief Returns an <code>Iterable</code> that blocks until the <code>Observable</code> emits another item, then returns
 that item.
 @param items
 the <code>Observable</code> to observe
 @return an <code>Iterable</code> that behaves like a blocking version of <code>items</code>
 */
+ (id<JavaLangIterable>)nextWithRxObservable:(RxObservable *)items;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNext)

FOUNDATION_EXPORT id<JavaLangIterable> RxInternalOperatorsBlockingOperatorNext_nextWithRxObservable_(RxObservable *items);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorNext)

#endif

#if !defined (RxInternalOperatorsBlockingOperatorNext_NextIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext || defined(INCLUDE_RxInternalOperatorsBlockingOperatorNext_NextIterator))
#define RxInternalOperatorsBlockingOperatorNext_NextIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class RxInternalOperatorsBlockingOperatorNext_NextObserver;
@class RxObservable;

@interface RxInternalOperatorsBlockingOperatorNext_NextIterator : NSObject < JavaUtilIterator >

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype)initWithRxObservable:(RxObservable *)items
withRxInternalOperatorsBlockingOperatorNext_NextObserver:(RxInternalOperatorsBlockingOperatorNext_NextObserver *)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorNext_NextIterator)

FOUNDATION_EXPORT void RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxInternalOperatorsBlockingOperatorNext_NextIterator *self, RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer);

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorNext_NextIterator *new_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorNext_NextIterator *create_RxInternalOperatorsBlockingOperatorNext_NextIterator_initWithRxObservable_withRxInternalOperatorsBlockingOperatorNext_NextObserver_(RxObservable *items, RxInternalOperatorsBlockingOperatorNext_NextObserver *observer);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorNext_NextIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorNext")
