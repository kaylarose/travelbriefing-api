//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorSkipWhile.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSkipWhile")
#ifdef RESTRICT_RxInternalOperatorsOperatorSkipWhile
#define INCLUDE_ALL_RxInternalOperatorsOperatorSkipWhile 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorSkipWhile 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorSkipWhile

#if !defined (RxInternalOperatorsOperatorSkipWhile_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSkipWhile || defined(INCLUDE_RxInternalOperatorsOperatorSkipWhile))
#define RxInternalOperatorsOperatorSkipWhile_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc1;
@protocol RxFunctionsFunc2;

/*!
 @brief Skips any emitted source items as long as the specified condition holds true.
 Emits all further source items
 as soon as the condition becomes false.
 */
@interface RxInternalOperatorsOperatorSkipWhile : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc2> predicate_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)predicate;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

/*!
 @brief Convert to Func2 type predicate.
 @param predicate the single argument predicate function
 @return The two argument function which ignores its second parameter
 */
+ (id<RxFunctionsFunc2>)toPredicate2WithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorSkipWhile)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorSkipWhile, predicate_, id<RxFunctionsFunc2>)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorSkipWhile_initWithRxFunctionsFunc2_(RxInternalOperatorsOperatorSkipWhile *self, id<RxFunctionsFunc2> predicate);

FOUNDATION_EXPORT RxInternalOperatorsOperatorSkipWhile *new_RxInternalOperatorsOperatorSkipWhile_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorSkipWhile *create_RxInternalOperatorsOperatorSkipWhile_initWithRxFunctionsFunc2_(id<RxFunctionsFunc2> predicate);

FOUNDATION_EXPORT id<RxFunctionsFunc2> RxInternalOperatorsOperatorSkipWhile_toPredicate2WithRxFunctionsFunc1_(id<RxFunctionsFunc1> predicate);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSkipWhile)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSkipWhile")
