//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/CompletableOnSubscribeConcat.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat")
#ifdef RESTRICT_RxInternalOperatorsCompletableOnSubscribeConcat
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat 0
#else
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat 1
#endif
#undef RESTRICT_RxInternalOperatorsCompletableOnSubscribeConcat

#if !defined (RxInternalOperatorsCompletableOnSubscribeConcat_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeConcat))
#define RxInternalOperatorsCompletableOnSubscribeConcat_

#define RESTRICT_RxCompletable 1
#define INCLUDE_RxCompletable_CompletableOnSubscribe 1
#include "rx/Completable.h"

@class RxObservable;
@protocol RxCompletable_CompletableSubscriber;

@interface RxInternalOperatorsCompletableOnSubscribeConcat : NSObject < RxCompletable_CompletableOnSubscribe > {
 @public
  RxObservable *sources_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)sources
                             withInt:(jint)prefetch;

- (void)callWithId:(id<RxCompletable_CompletableSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeConcat)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat, sources_, RxObservable *)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxInternalOperatorsCompletableOnSubscribeConcat *self, RxObservable *sources, jint prefetch);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat *new_RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxObservable *sources, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat *create_RxInternalOperatorsCompletableOnSubscribeConcat_initWithRxObservable_withInt_(RxObservable *sources, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeConcat)

#endif

#if !defined (RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber))
#define RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class RxCompletable;
@class RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber;
@class RxInternalUtilUnsafeSpscArrayQueue;
@class RxSubscriptionsSerialSubscription;
@protocol RxCompletable_CompletableSubscriber;

@interface RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber : RxSubscriber {
 @public
  id<RxCompletable_CompletableSubscriber> actual_;
  jint prefetch_;
  RxSubscriptionsSerialSubscription *sr_;
  RxInternalUtilUnsafeSpscArrayQueue *queue_;
  volatile_jboolean done_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *inner_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

#pragma mark Public

- (instancetype)initWithRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)actual
                                                    withInt:(jint)prefetch;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(RxCompletable *)t;

#pragma mark Package-Private

- (void)innerComplete;

- (void)innerErrorWithNSException:(NSException *)e;

- (void)next;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, actual_, id<RxCompletable_CompletableSubscriber>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, sr_, RxSubscriptionsSerialSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, queue_, RxInternalUtilUnsafeSpscArrayQueue *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, inner_, RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *self, id<RxCompletable_CompletableSubscriber> actual, jint prefetch);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *new_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_(id<RxCompletable_CompletableSubscriber> actual, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *create_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_(id<RxCompletable_CompletableSubscriber> actual, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber)

#endif

#if !defined (RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber))
#define RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_

#define RESTRICT_RxCompletable 1
#define INCLUDE_RxCompletable_CompletableSubscriber 1
#include "rx/Completable.h"

@class RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber;
@protocol RxSubscription;

@interface RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber : NSObject < RxCompletable_CompletableSubscriber >

#pragma mark Public

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

#pragma mark Package-Private

- (instancetype)initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber:(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *self, RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *new_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber *create_RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber_initWithRxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeConcat_CompletableConcatSubscriber_ConcatInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeConcat")
