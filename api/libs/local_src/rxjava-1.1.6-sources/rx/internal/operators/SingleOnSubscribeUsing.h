//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/SingleOnSubscribeUsing.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeUsing")
#ifdef RESTRICT_RxInternalOperatorsSingleOnSubscribeUsing
#define INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeUsing 0
#else
#define INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeUsing 1
#endif
#undef RESTRICT_RxInternalOperatorsSingleOnSubscribeUsing

#if !defined (RxInternalOperatorsSingleOnSubscribeUsing_) && (INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeUsing || defined(INCLUDE_RxInternalOperatorsSingleOnSubscribeUsing))
#define RxInternalOperatorsSingleOnSubscribeUsing_

#define RESTRICT_RxSingle 1
#define INCLUDE_RxSingle_OnSubscribe 1
#include "rx/Single.h"

@class RxSingleSubscriber;
@protocol RxFunctionsAction1;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc1;

/*!
 @brief Generates a resource, derives a Single from it and disposes that resource once the
 Single terminates.
 */
@interface RxInternalOperatorsSingleOnSubscribeUsing : NSObject < RxSingle_OnSubscribe > {
 @public
  id<RxFunctionsFunc0> resourceFactory_;
  id<RxFunctionsFunc1> singleFactory_;
  id<RxFunctionsAction1> disposeAction_;
  jboolean disposeEagerly_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFactory
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)observableFactory
                  withRxFunctionsAction1:(id<RxFunctionsAction1>)disposeAction
                             withBoolean:(jboolean)disposeEagerly;

- (void)callWithId:(RxSingleSubscriber *)child;

#pragma mark Package-Private

- (void)handleSubscriptionTimeErrorWithRxSingleSubscriber:(RxSingleSubscriber *)t
                                                   withId:(id)resource
                                          withNSException:(NSException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsSingleOnSubscribeUsing)

J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOnSubscribeUsing, resourceFactory_, id<RxFunctionsFunc0>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOnSubscribeUsing, singleFactory_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsSingleOnSubscribeUsing, disposeAction_, id<RxFunctionsAction1>)

FOUNDATION_EXPORT void RxInternalOperatorsSingleOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(RxInternalOperatorsSingleOnSubscribeUsing *self, id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> disposeAction, jboolean disposeEagerly);

FOUNDATION_EXPORT RxInternalOperatorsSingleOnSubscribeUsing *new_RxInternalOperatorsSingleOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> disposeAction, jboolean disposeEagerly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsSingleOnSubscribeUsing *create_RxInternalOperatorsSingleOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> disposeAction, jboolean disposeEagerly);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsSingleOnSubscribeUsing)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsSingleOnSubscribeUsing")
