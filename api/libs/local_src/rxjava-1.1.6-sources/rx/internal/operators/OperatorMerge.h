//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorMerge.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMerge")
#ifdef RESTRICT_RxInternalOperatorsOperatorMerge
#define INCLUDE_ALL_RxInternalOperatorsOperatorMerge 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorMerge 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorMerge

#if !defined (RxInternalOperatorsOperatorMerge_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMerge || defined(INCLUDE_RxInternalOperatorsOperatorMerge))
#define RxInternalOperatorsOperatorMerge_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;

/*!
 @brief Flattens a list of <code>Observable</code>s into one <code>Observable</code>, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png" alt="">
 <p>
 You can combine the items emitted by multiple <code>Observable</code>s so that they act like a single <code>Observable</code>, by using the merge operation.
 <p>
 The <code>instance(true)</code> call behaves like <code>OperatorMerge</code> except that if any of the merged Observables notify of
 an error via <code>onError</code>, <code>mergeDelayError</code> will refrain from propagating that error
 notification until all of the merged Observables have finished emitting items.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/mergeDelayError.png" alt="">
 <p>
 Even if multiple merged Observables send <code>onError</code> notifications, <code>mergeDelayError</code> will
 only invoke the <code>onError</code> method of its Observers once.
 <p>
 This operation allows an Observer to receive all successfully emitted items from all of the
 source Observables without being interrupted by an error notification from one of them.
 <p>
 <em>Note:</em> If this is used on an Observable that never completes, it will never call <code>onError</code> and will effectively swallow errors.
 */
@interface RxInternalOperatorsOperatorMerge : NSObject < RxObservable_Operator > {
 @public
  jboolean delayErrors_;
  jint maxConcurrent_;
}

#pragma mark Public

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

/*!
 @param delayErrors should the merge delay errors?
 @return a singleton instance of this stateless operator.
 */
+ (RxInternalOperatorsOperatorMerge *)instanceWithBoolean:(jboolean)delayErrors;

/*!
 @brief Creates a new instance of the operator with the given delayError and maxConcurrency settings.
 @param delayErrors
 @param maxConcurrent the maximum number of concurrent subscriptions or Integer.MAX_VALUE for unlimited
 @return the Operator instance with the given settings
 */
+ (RxInternalOperatorsOperatorMerge *)instanceWithBoolean:(jboolean)delayErrors
                                                  withInt:(jint)maxConcurrent;

#pragma mark Package-Private

- (instancetype)initWithBoolean:(jboolean)delayErrors
                        withInt:(jint)maxConcurrent;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMerge)

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_instanceWithBoolean_(jboolean delayErrors);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge *RxInternalOperatorsOperatorMerge_instanceWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent);

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(RxInternalOperatorsOperatorMerge *self, jboolean delayErrors, jint maxConcurrent);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge *new_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge *create_RxInternalOperatorsOperatorMerge_initWithBoolean_withInt_(jboolean delayErrors, jint maxConcurrent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMerge)

#endif

#if !defined (RxInternalOperatorsOperatorMerge_MergeProducer_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMerge || defined(INCLUDE_RxInternalOperatorsOperatorMerge_MergeProducer))
#define RxInternalOperatorsOperatorMerge_MergeProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@class RxInternalOperatorsOperatorMerge_MergeSubscriber;

@interface RxInternalOperatorsOperatorMerge_MergeProducer : JavaUtilConcurrentAtomicAtomicLong < RxProducer > {
 @public
  RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber_;
}

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:(RxInternalOperatorsOperatorMerge_MergeSubscriber *)subscriber;

- (jlong)producedWithInt:(jint)n;

- (void)requestWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorMerge_MergeProducer)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeProducer, subscriber_, RxInternalOperatorsOperatorMerge_MergeSubscriber *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeProducer *self, RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_MergeProducer *new_RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_MergeProducer *create_RxInternalOperatorsOperatorMerge_MergeProducer_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_(RxInternalOperatorsOperatorMerge_MergeSubscriber *subscriber);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMerge_MergeProducer)

#endif

#if !defined (RxInternalOperatorsOperatorMerge_MergeSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMerge || defined(INCLUDE_RxInternalOperatorsOperatorMerge_MergeSubscriber))
#define RxInternalOperatorsOperatorMerge_MergeSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class IOSObjectArray;
@class JavaUtilConcurrentConcurrentLinkedQueue;
@class RxInternalOperatorsNotificationLite;
@class RxInternalOperatorsOperatorMerge_InnerSubscriber;
@class RxInternalOperatorsOperatorMerge_MergeProducer;
@class RxObservable;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilQueue;

/*!
 @brief The subscriber that observes Observables.
 */
@interface RxInternalOperatorsOperatorMerge_MergeSubscriber : RxSubscriber {
 @public
  RxSubscriber *child_;
  jboolean delayErrors_;
  jint maxConcurrent_;
  RxInternalOperatorsOperatorMerge_MergeProducer *producer_MergeSubscriber_;
  volatile_id queue_;
  /*!
   @brief Tracks the active subscriptions to sources.
   */
  volatile_id subscriptions_MergeSubscriber_;
  /*!
   @brief Due to the emission loop, we need to store errors somewhere if !
   delayErrors. 
   */
  volatile_id errors_;
  RxInternalOperatorsNotificationLite *nl_;
  volatile_jboolean done_;
  /*!
   @brief Guarded by this.
   */
  jboolean emitting_;
  /*!
   @brief Guarded by this.
   */
  jboolean missed_;
  id innerGuard_;
  /*!
   @brief Copy-on-write array, guarded by innerGuard.
   */
  volatile_id innerSubscribers_;
  /*!
   @brief Used to generate unique InnerSubscriber IDs.
   Modified from onNext only. 
   */
  jlong uniqueId_;
  /*!
   @brief Which was the last InnerSubscriber that emitted?
   Accessed if emitting == true. 
   */
  jlong lastId_;
  /*!
   @brief What was its index in the innerSubscribers array?
   Accessed if emitting == true. 
   */
  jint lastIndex_;
  jint scalarEmissionLimit_;
  jint scalarEmissionCount_;
}

+ (IOSObjectArray *)EMPTY;

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                         withBoolean:(jboolean)delayErrors
                             withInt:(jint)maxConcurrent;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxObservable *)t;

- (void)requestMoreWithLong:(jlong)n;

#pragma mark Protected

- (void)emitScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                                withId:(id)value
                                                              withLong:(jlong)r;

- (void)emitScalarWithId:(id)value
                withLong:(jlong)r;

- (void)queueScalarWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                                 withId:(id)value;

- (void)queueScalarWithId:(id)value;

#pragma mark Package-Private

- (void)addInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)inner;

/*!
 @brief Check if the operator reached some terminal state: child unsubscribed,
 an error was reported and we don't delay errors.
 @return true if the child unsubscribed or there are errors available and merge doesn't delay errors.
 */
- (jboolean)checkTerminate;

- (void)emit;

- (void)emitEmpty;

/*!
 @brief The standard emission loop serializing events and requests.
 */
- (void)emitLoop;

- (RxSubscriptionsCompositeSubscription *)getOrCreateComposite;

- (id<JavaUtilQueue>)getOrCreateErrorQueue;

- (void)removeInnerWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)inner;

/*!
 @brief Tries to emit the value directly to the child if
 no concurrent emission is happening at the moment.
 <p>
 Since the scalar-value queue optimization applies
 to both the main source and the inner subscribers,
 we handle things in a shared manner.
 @param subscriber
 @param value
 */
- (void)tryEmitWithRxInternalOperatorsOperatorMerge_InnerSubscriber:(RxInternalOperatorsOperatorMerge_InnerSubscriber *)subscriber
                                                             withId:(id)value;

/*!
 @brief Tries to emit the value directly to the child if
 no concurrent emission is happening at the moment.
 <p>
 Since the scalar-value queue optimization applies
 to both the main source and the inner subscribers,
 we handle things in a shared manner.
 @param subscriber
 @param value
 */
- (void)tryEmitWithId:(id)value;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorMerge_MergeSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, producer_MergeSubscriber_, RxInternalOperatorsOperatorMerge_MergeProducer *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, queue_, id<JavaUtilQueue>)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, subscriptions_MergeSubscriber_, RxSubscriptionsCompositeSubscription *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, errors_, JavaUtilConcurrentConcurrentLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, nl_, RxInternalOperatorsNotificationLite *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, innerGuard_, id)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorMerge_MergeSubscriber, innerSubscribers_, IOSObjectArray *)

/*!
 @brief An empty array to avoid creating new empty arrays in removeInner.
 */
inline IOSObjectArray *RxInternalOperatorsOperatorMerge_MergeSubscriber_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxInternalOperatorsOperatorMerge_MergeSubscriber_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorMerge_MergeSubscriber, EMPTY, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxInternalOperatorsOperatorMerge_MergeSubscriber *self, RxSubscriber *child, jboolean delayErrors, jint maxConcurrent);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_MergeSubscriber *new_RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxSubscriber *child, jboolean delayErrors, jint maxConcurrent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_MergeSubscriber *create_RxInternalOperatorsOperatorMerge_MergeSubscriber_initWithRxSubscriber_withBoolean_withInt_(RxSubscriber *child, jboolean delayErrors, jint maxConcurrent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMerge_MergeSubscriber)

#endif

#if !defined (RxInternalOperatorsOperatorMerge_InnerSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsOperatorMerge || defined(INCLUDE_RxInternalOperatorsOperatorMerge_InnerSubscriber))
#define RxInternalOperatorsOperatorMerge_InnerSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class RxInternalOperatorsOperatorMerge_MergeSubscriber;
@class RxInternalUtilRxRingBuffer;

@interface RxInternalOperatorsOperatorMerge_InnerSubscriber : RxSubscriber {
 @public
  RxInternalOperatorsOperatorMerge_MergeSubscriber *parent_;
  jlong id__;
  volatile_jboolean done_;
  volatile_id queue_;
  jint outstanding_;
}

+ (jint)limit;

#pragma mark Public

- (instancetype)initWithRxInternalOperatorsOperatorMerge_MergeSubscriber:(RxInternalOperatorsOperatorMerge_MergeSubscriber *)parent
                                                                withLong:(jlong)id_;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onStart;

- (void)requestMoreWithLong:(jlong)n;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorMerge_InnerSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorMerge_InnerSubscriber, parent_, RxInternalOperatorsOperatorMerge_MergeSubscriber *)
J2OBJC_VOLATILE_FIELD_SETTER(RxInternalOperatorsOperatorMerge_InnerSubscriber, queue_, RxInternalUtilRxRingBuffer *)

inline jint RxInternalOperatorsOperatorMerge_InnerSubscriber_get_limit();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalOperatorsOperatorMerge_InnerSubscriber_limit;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalOperatorsOperatorMerge_InnerSubscriber, limit, jint)

FOUNDATION_EXPORT void RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_InnerSubscriber *self, RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_);

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_InnerSubscriber *new_RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorMerge_InnerSubscriber *create_RxInternalOperatorsOperatorMerge_InnerSubscriber_initWithRxInternalOperatorsOperatorMerge_MergeSubscriber_withLong_(RxInternalOperatorsOperatorMerge_MergeSubscriber *parent, jlong id_);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorMerge_InnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorMerge")
