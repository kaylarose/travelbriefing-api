//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/CompletableOnSubscribeTimeout.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeTimeout")
#ifdef RESTRICT_RxInternalOperatorsCompletableOnSubscribeTimeout
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeTimeout 0
#else
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeTimeout 1
#endif
#undef RESTRICT_RxInternalOperatorsCompletableOnSubscribeTimeout

#if !defined (RxInternalOperatorsCompletableOnSubscribeTimeout_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeTimeout || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeTimeout))
#define RxInternalOperatorsCompletableOnSubscribeTimeout_

#define RESTRICT_RxCompletable 1
#define INCLUDE_RxCompletable_CompletableOnSubscribe 1
#include "rx/Completable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxCompletable;
@class RxScheduler;
@protocol RxCompletable_CompletableSubscriber;

@interface RxInternalOperatorsCompletableOnSubscribeTimeout : NSObject < RxCompletable_CompletableOnSubscribe > {
 @public
  RxCompletable *source_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
  RxCompletable *other_;
}

#pragma mark Public

- (instancetype)initWithRxCompletable:(RxCompletable *)source
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                      withRxScheduler:(RxScheduler *)scheduler
                    withRxCompletable:(RxCompletable *)other;

- (void)callWithId:(id<RxCompletable_CompletableSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeTimeout)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeTimeout, source_, RxCompletable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeTimeout, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeTimeout, scheduler_, RxScheduler *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeTimeout, other_, RxCompletable *)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxInternalOperatorsCompletableOnSubscribeTimeout *self, RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeTimeout *new_RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeTimeout *create_RxInternalOperatorsCompletableOnSubscribeTimeout_initWithRxCompletable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_withRxCompletable_(RxCompletable *source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler, RxCompletable *other);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeTimeout")
