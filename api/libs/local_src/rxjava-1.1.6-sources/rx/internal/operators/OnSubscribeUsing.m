//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeUsing.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "rx/Observable.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/exceptions/CompositeException.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/functions/Action0.h"
#include "rx/functions/Action1.h"
#include "rx/functions/Func0.h"
#include "rx/functions/Func1.h"
#include "rx/internal/operators/OnSubscribeUsing.h"
#include "rx/observers/Subscribers.h"

@interface RxInternalOperatorsOnSubscribeUsing () {
 @public
  id<RxFunctionsFunc0> resourceFactory_;
  id<RxFunctionsFunc1> observableFactory_;
  id<RxFunctionsAction1> dispose_;
  jboolean disposeEagerly_;
}

- (NSException *)disposeWithRxFunctionsAction0:(id<RxFunctionsAction0>)disposeOnceOnly;

@end

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsing, resourceFactory_, id<RxFunctionsFunc0>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsing, observableFactory_, id<RxFunctionsFunc1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsing, dispose_, id<RxFunctionsAction1>)

__attribute__((unused)) static NSException *RxInternalOperatorsOnSubscribeUsing_disposeWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsing *self, id<RxFunctionsAction0> disposeOnceOnly);

@interface RxInternalOperatorsOnSubscribeUsing_DisposeAction : JavaUtilConcurrentAtomicAtomicBoolean < RxFunctionsAction0, RxSubscription > {
 @public
  id<RxFunctionsAction1> dispose_;
  id resource_;
}

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)dispose
                                    withId:(id)resource;

- (void)call;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeUsing_DisposeAction)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsing_DisposeAction, dispose_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeUsing_DisposeAction, resource_, id)

inline jlong RxInternalOperatorsOnSubscribeUsing_DisposeAction_get_serialVersionUID();
#define RxInternalOperatorsOnSubscribeUsing_DisposeAction_serialVersionUID 4262875056400218316LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalOperatorsOnSubscribeUsing_DisposeAction, serialVersionUID, jlong)

__attribute__((unused)) static void RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(RxInternalOperatorsOnSubscribeUsing_DisposeAction *self, id<RxFunctionsAction1> dispose, id resource);

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsing_DisposeAction *new_RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(id<RxFunctionsAction1> dispose, id resource) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalOperatorsOnSubscribeUsing_DisposeAction *create_RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(id<RxFunctionsAction1> dispose, id resource);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeUsing_DisposeAction)

@implementation RxInternalOperatorsOnSubscribeUsing

- (instancetype)initWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFactory
                    withRxFunctionsFunc1:(id<RxFunctionsFunc1>)observableFactory
                  withRxFunctionsAction1:(id<RxFunctionsAction1>)dispose
                             withBoolean:(jboolean)disposeEagerly {
  RxInternalOperatorsOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(self, resourceFactory, observableFactory, dispose, disposeEagerly);
  return self;
}

- (void)callWithId:(RxSubscriber *)subscriber {
  @try {
    id resource = [((id<RxFunctionsFunc0>) nil_chk(resourceFactory_)) call];
    RxInternalOperatorsOnSubscribeUsing_DisposeAction *disposeOnceOnly = new_RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(dispose_, resource);
    [((RxSubscriber *) nil_chk(subscriber)) addWithRxSubscription:disposeOnceOnly];
    RxObservable *source;
    @try {
      source = [((id<RxFunctionsFunc1>) nil_chk(observableFactory_)) callWithId:resource];
    }
    @catch (NSException *e) {
      NSException *disposeError = RxInternalOperatorsOnSubscribeUsing_disposeWithRxFunctionsAction0_(self, disposeOnceOnly);
      RxExceptionsExceptions_throwIfFatalWithNSException_(e);
      RxExceptionsExceptions_throwIfFatalWithNSException_(disposeError);
      if (disposeError != nil) {
        [subscriber onErrorWithNSException:new_RxExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray newArrayWithObjects:(id[]){ e, disposeError } count:2 type:NSException_class_()])];
      }
      else {
        [subscriber onErrorWithNSException:e];
      }
      return;
    }
    RxObservable *observable;
    if (disposeEagerly_) {
      observable = [((RxObservable *) nil_chk(source)) doOnTerminateWithRxFunctionsAction0:disposeOnceOnly];
    }
    else {
      observable = [((RxObservable *) nil_chk(source)) doAfterTerminateWithRxFunctionsAction0:disposeOnceOnly];
    }
    @try {
      (void) [((RxObservable *) nil_chk(observable)) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_wrapWithRxSubscriber_(subscriber)];
    }
    @catch (NSException *e) {
      NSException *disposeError = RxInternalOperatorsOnSubscribeUsing_disposeWithRxFunctionsAction0_(self, disposeOnceOnly);
      RxExceptionsExceptions_throwIfFatalWithNSException_(e);
      RxExceptionsExceptions_throwIfFatalWithNSException_(disposeError);
      if (disposeError != nil) [subscriber onErrorWithNSException:new_RxExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray newArrayWithObjects:(id[]){ e, disposeError } count:2 type:NSException_class_()])];
      else [subscriber onErrorWithNSException:e];
    }
  }
  @catch (NSException *e) {
    RxExceptionsExceptions_throwOrReportWithNSException_withRxObserver_(e, subscriber);
  }
}

- (NSException *)disposeWithRxFunctionsAction0:(id<RxFunctionsAction0>)disposeOnceOnly {
  return RxInternalOperatorsOnSubscribeUsing_disposeWithRxFunctionsAction0_(self, disposeOnceOnly);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsFunc0:withRxFunctionsFunc1:withRxFunctionsAction1:withBoolean:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "callWithId:", "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { "disposeWithRxFunctionsAction0:", "LNSException;", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "resourceFactory_", "LRxFunctionsFunc0;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "observableFactory_", "LRxFunctionsFunc1;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "dispose_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "disposeEagerly_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsFunc0;LRxFunctionsFunc1;LRxFunctionsAction1;Z", "(Lrx/functions/Func0<TResource;>;Lrx/functions/Func1<-TResource;+Lrx/Observable<+TT;>;>;Lrx/functions/Action1<-TResource;>;Z)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "dispose", "LRxFunctionsAction0;", "Lrx/functions/Func0<TResource;>;", "Lrx/functions/Func1<-TResource;+Lrx/Observable<+TT;>;>;", "Lrx/functions/Action1<-TResource;>;", "LRxInternalOperatorsOnSubscribeUsing_DisposeAction;", "<T:Ljava/lang/Object;Resource:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsing = { "OnSubscribeUsing", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 3, 4, -1, 10, -1, 11, -1 };
  return &_RxInternalOperatorsOnSubscribeUsing;
}

@end

void RxInternalOperatorsOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(RxInternalOperatorsOnSubscribeUsing *self, id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> dispose, jboolean disposeEagerly) {
  NSObject_init(self);
  self->resourceFactory_ = resourceFactory;
  self->observableFactory_ = observableFactory;
  self->dispose_ = dispose;
  self->disposeEagerly_ = disposeEagerly;
}

RxInternalOperatorsOnSubscribeUsing *new_RxInternalOperatorsOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> dispose, jboolean disposeEagerly) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsing, initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_, resourceFactory, observableFactory, dispose, disposeEagerly)
}

RxInternalOperatorsOnSubscribeUsing *create_RxInternalOperatorsOnSubscribeUsing_initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> observableFactory, id<RxFunctionsAction1> dispose, jboolean disposeEagerly) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsing, initWithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_, resourceFactory, observableFactory, dispose, disposeEagerly)
}

NSException *RxInternalOperatorsOnSubscribeUsing_disposeWithRxFunctionsAction0_(RxInternalOperatorsOnSubscribeUsing *self, id<RxFunctionsAction0> disposeOnceOnly) {
  @try {
    [((id<RxFunctionsAction0>) nil_chk(disposeOnceOnly)) call];
    return nil;
  }
  @catch (NSException *e) {
    return e;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeUsing)

@implementation RxInternalOperatorsOnSubscribeUsing_DisposeAction

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)dispose
                                    withId:(id)resource {
  RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(self, dispose, resource);
  return self;
}

- (void)call {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    @try {
      [((id<RxFunctionsAction1>) nil_chk(dispose_)) callWithId:resource_];
    }
    @finally {
      resource_ = nil;
      dispose_ = nil;
    }
  }
}

- (jboolean)isUnsubscribed {
  return [self get];
}

- (void)unsubscribe {
  [self call];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsAction1:withId:", NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalOperatorsOnSubscribeUsing_DisposeAction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "dispose_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "resource_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction1;LNSObject;", "(Lrx/functions/Action1<-TResource;>;TResource;)V", "Lrx/functions/Action1<-TResource;>;", "TResource;", "LRxInternalOperatorsOnSubscribeUsing;", "<Resource:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lrx/functions/Action0;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeUsing_DisposeAction = { "DisposeAction", "rx.internal.operators", ptrTable, methods, fields, 7, 0x1a, 4, 3, 4, -1, -1, 5, -1 };
  return &_RxInternalOperatorsOnSubscribeUsing_DisposeAction;
}

@end

void RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(RxInternalOperatorsOnSubscribeUsing_DisposeAction *self, id<RxFunctionsAction1> dispose, id resource) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  self->dispose_ = dispose;
  self->resource_ = resource;
  [self lazySetWithBoolean:false];
}

RxInternalOperatorsOnSubscribeUsing_DisposeAction *new_RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(id<RxFunctionsAction1> dispose, id resource) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeUsing_DisposeAction, initWithRxFunctionsAction1_withId_, dispose, resource)
}

RxInternalOperatorsOnSubscribeUsing_DisposeAction *create_RxInternalOperatorsOnSubscribeUsing_DisposeAction_initWithRxFunctionsAction1_withId_(id<RxFunctionsAction1> dispose, id resource) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeUsing_DisposeAction, initWithRxFunctionsAction1_withId_, dispose, resource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeUsing_DisposeAction)
