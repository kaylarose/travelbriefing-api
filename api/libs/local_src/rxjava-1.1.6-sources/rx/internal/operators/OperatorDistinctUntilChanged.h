//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorDistinctUntilChanged.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDistinctUntilChanged")
#ifdef RESTRICT_RxInternalOperatorsOperatorDistinctUntilChanged
#define INCLUDE_ALL_RxInternalOperatorsOperatorDistinctUntilChanged 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorDistinctUntilChanged 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorDistinctUntilChanged

#if !defined (RxInternalOperatorsOperatorDistinctUntilChanged_) && (INCLUDE_ALL_RxInternalOperatorsOperatorDistinctUntilChanged || defined(INCLUDE_RxInternalOperatorsOperatorDistinctUntilChanged))
#define RxInternalOperatorsOperatorDistinctUntilChanged_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_Operator 1
#include "rx/Observable.h"

@class RxSubscriber;
@protocol RxFunctionsFunc1;

/*!
 @brief Returns an Observable that emits all sequentially distinct items emitted by the source.
 */
@interface RxInternalOperatorsOperatorDistinctUntilChanged : NSObject < RxObservable_Operator > {
 @public
  id<RxFunctionsFunc1> keySelector_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)keySelector;

- (RxSubscriber *)callWithId:(RxSubscriber *)child;

/*!
 @brief Returns a singleton instance of OperatorDistinctUntilChanged that was built using 
 the identity function for comparison (<code>new OperatorDistinctUntilChanged(UtilityFunctions.identity())</code>).
 @return Operator that emits sequentially distinct values only using the identity function for comparison
 */
+ (RxInternalOperatorsOperatorDistinctUntilChanged *)instance;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOperatorDistinctUntilChanged)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOperatorDistinctUntilChanged, keySelector_, id<RxFunctionsFunc1>)

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinctUntilChanged *RxInternalOperatorsOperatorDistinctUntilChanged_instance();

FOUNDATION_EXPORT void RxInternalOperatorsOperatorDistinctUntilChanged_initWithRxFunctionsFunc1_(RxInternalOperatorsOperatorDistinctUntilChanged *self, id<RxFunctionsFunc1> keySelector);

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinctUntilChanged *new_RxInternalOperatorsOperatorDistinctUntilChanged_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOperatorDistinctUntilChanged *create_RxInternalOperatorsOperatorDistinctUntilChanged_initWithRxFunctionsFunc1_(id<RxFunctionsFunc1> keySelector);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorDistinctUntilChanged)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorDistinctUntilChanged")
