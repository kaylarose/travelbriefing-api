//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/BlockingOperatorToIterator.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator")
#ifdef RESTRICT_RxInternalOperatorsBlockingOperatorToIterator
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator 1
#endif
#undef RESTRICT_RxInternalOperatorsBlockingOperatorToIterator

#if !defined (RxInternalOperatorsBlockingOperatorToIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator || defined(INCLUDE_RxInternalOperatorsBlockingOperatorToIterator))
#define RxInternalOperatorsBlockingOperatorToIterator_

@class RxObservable;
@protocol JavaUtilIterator;

/*!
 @brief Returns an Iterator that iterates over all items emitted by a specified Observable.
 <p>
 <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.toIterator.png" alt="">
 <p>
 - seealso: <a href="https://github.com/ReactiveX/RxJava/issues/50">Issue #50</a>
 */
@interface RxInternalOperatorsBlockingOperatorToIterator : NSObject

#pragma mark Public

/*!
 @brief Returns an iterator that iterates all values of the observable.
 @param source the source Observable
 @return the iterator that could be used to iterate over the elements of the observable.
 */
+ (id<JavaUtilIterator>)toIteratorWithRxObservable:(RxObservable *)source;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator)

FOUNDATION_EXPORT id<JavaUtilIterator> RxInternalOperatorsBlockingOperatorToIterator_toIteratorWithRxObservable_(RxObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator)

#endif

#if !defined (RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator || defined(INCLUDE_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator))
#define RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class RxNotification;

@interface RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator : RxSubscriber < JavaUtilIterator >

+ (jint)LIMIT;

#pragma mark Public

- (instancetype)init;

- (jboolean)hasNext;

- (id)next;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxNotification *)args;

- (void)onStart;

- (void)remove;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator)

inline jint RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_get_LIMIT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_LIMIT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator, LIMIT, jint)

FOUNDATION_EXPORT void RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *self);

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *new_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator *create_RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorToIterator_SubscriberIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorToIterator")
