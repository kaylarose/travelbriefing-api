//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/CompletableOnSubscribeMerge.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge")
#ifdef RESTRICT_RxInternalOperatorsCompletableOnSubscribeMerge
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge 0
#else
#define INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge 1
#endif
#undef RESTRICT_RxInternalOperatorsCompletableOnSubscribeMerge

#if !defined (RxInternalOperatorsCompletableOnSubscribeMerge_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeMerge))
#define RxInternalOperatorsCompletableOnSubscribeMerge_

#define RESTRICT_RxCompletable 1
#define INCLUDE_RxCompletable_CompletableOnSubscribe 1
#include "rx/Completable.h"

@class RxObservable;
@protocol JavaUtilQueue;
@protocol RxCompletable_CompletableSubscriber;

@interface RxInternalOperatorsCompletableOnSubscribeMerge : NSObject < RxCompletable_CompletableOnSubscribe > {
 @public
  RxObservable *source_;
  jint maxConcurrency_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)source
                             withInt:(jint)maxConcurrency
                         withBoolean:(jboolean)delayErrors;

- (void)callWithId:(id<RxCompletable_CompletableSubscriber>)s;

/*!
 @brief Collects the Throwables from the queue, adding subsequent Throwables as suppressed to
 the first Throwable and returns it.
 @param q the queue to drain
 @return the Throwable containing all other Throwables as suppressed
 */
+ (NSException *)collectErrorsWithJavaUtilQueue:(id<JavaUtilQueue>)q;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeMerge)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge, source_, RxObservable *)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeMerge_initWithRxObservable_withInt_withBoolean_(RxInternalOperatorsCompletableOnSubscribeMerge *self, RxObservable *source, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeMerge *new_RxInternalOperatorsCompletableOnSubscribeMerge_initWithRxObservable_withInt_withBoolean_(RxObservable *source, jint maxConcurrency, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeMerge *create_RxInternalOperatorsCompletableOnSubscribeMerge_initWithRxObservable_withInt_withBoolean_(RxObservable *source, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT NSException *RxInternalOperatorsCompletableOnSubscribeMerge_collectErrorsWithJavaUtilQueue_(id<JavaUtilQueue> q);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeMerge)

#endif

#if !defined (RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber_) && (INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge || defined(INCLUDE_RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber))
#define RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentAtomicAtomicReference;
@class RxCompletable;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilQueue;
@protocol RxCompletable_CompletableSubscriber;

@interface RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber : RxSubscriber {
 @public
  id<RxCompletable_CompletableSubscriber> actual_;
  RxSubscriptionsCompositeSubscription *set_;
  jint maxConcurrency_;
  jboolean delayErrors_;
  volatile_jboolean done_;
  JavaUtilConcurrentAtomicAtomicReference *errors_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

#pragma mark Public

- (instancetype)initWithRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)actual
                                                    withInt:(jint)maxConcurrency
                                                withBoolean:(jboolean)delayErrors;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(RxCompletable *)t;

#pragma mark Package-Private

- (id<JavaUtilQueue>)getOrCreateErrors;

- (void)terminate;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber)

J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber, actual_, id<RxCompletable_CompletableSubscriber>)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber, set_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber, errors_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_withBoolean_(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber *self, id<RxCompletable_CompletableSubscriber> actual, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber *new_RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_withBoolean_(id<RxCompletable_CompletableSubscriber> actual, jint maxConcurrency, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber *create_RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber_initWithRxCompletable_CompletableSubscriber_withInt_withBoolean_(id<RxCompletable_CompletableSubscriber> actual, jint maxConcurrency, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsCompletableOnSubscribeMerge_CompletableMergeSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsCompletableOnSubscribeMerge")
