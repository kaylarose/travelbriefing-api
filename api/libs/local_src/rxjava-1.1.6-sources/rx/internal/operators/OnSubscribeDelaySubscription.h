//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeDelaySubscription.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeDelaySubscription")
#ifdef RESTRICT_RxInternalOperatorsOnSubscribeDelaySubscription
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeDelaySubscription 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOnSubscribeDelaySubscription 1
#endif
#undef RESTRICT_RxInternalOperatorsOnSubscribeDelaySubscription

#if !defined (RxInternalOperatorsOnSubscribeDelaySubscription_) && (INCLUDE_ALL_RxInternalOperatorsOnSubscribeDelaySubscription || defined(INCLUDE_RxInternalOperatorsOnSubscribeDelaySubscription))
#define RxInternalOperatorsOnSubscribeDelaySubscription_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class JavaUtilConcurrentTimeUnit;
@class RxObservable;
@class RxScheduler;
@class RxSubscriber;

/*!
 @brief Delays the subscription to the source by the given amount, running on the given scheduler.
 */
@interface RxInternalOperatorsOnSubscribeDelaySubscription : NSObject < RxObservable_OnSubscribe > {
 @public
  RxObservable *source_;
  jlong time_;
  JavaUtilConcurrentTimeUnit *unit_;
  RxScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithRxObservable:(RxObservable *)source
                            withLong:(jlong)time
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withRxScheduler:(RxScheduler *)scheduler;

- (void)callWithId:(RxSubscriber *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsOnSubscribeDelaySubscription)

J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, source_, RxObservable *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsOnSubscribeDelaySubscription, scheduler_, RxScheduler *)

FOUNDATION_EXPORT void RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxInternalOperatorsOnSubscribeDelaySubscription *self, RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeDelaySubscription *new_RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsOnSubscribeDelaySubscription *create_RxInternalOperatorsOnSubscribeDelaySubscription_initWithRxObservable_withLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(RxObservable *source, jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOnSubscribeDelaySubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOnSubscribeDelaySubscription")
