//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OnSubscribeAutoConnect.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "rx/Subscriber.h"
#include "rx/Subscription.h"
#include "rx/functions/Action1.h"
#include "rx/internal/operators/OnSubscribeAutoConnect.h"
#include "rx/observables/ConnectableObservable.h"
#include "rx/observers/Subscribers.h"

@implementation RxInternalOperatorsOnSubscribeAutoConnect

- (instancetype)initWithRxObservablesConnectableObservable:(RxObservablesConnectableObservable *)source
                                                   withInt:(jint)numberOfSubscribers
                                    withRxFunctionsAction1:(id<RxFunctionsAction1>)connection {
  RxInternalOperatorsOnSubscribeAutoConnect_initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_(self, source, numberOfSubscribers, connection);
  return self;
}

- (void)callWithId:(RxSubscriber *)child {
  (void) [((RxObservablesConnectableObservable *) nil_chk(source_)) unsafeSubscribeWithRxSubscriber:RxObserversSubscribers_wrapWithRxSubscriber_(child)];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(clients_)) incrementAndGet] == numberOfSubscribers_) {
    [source_ connectWithRxFunctionsAction1:connection_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxObservablesConnectableObservable:withInt:withRxFunctionsAction1:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "callWithId:", "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LRxObservablesConnectableObservable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "numberOfSubscribers_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "connection_", "LRxFunctionsAction1;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "clients_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxObservablesConnectableObservable;ILRxFunctionsAction1;", "(Lrx/observables/ConnectableObservable<+TT;>;ILrx/functions/Action1<-Lrx/Subscription;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "Lrx/observables/ConnectableObservable<+TT;>;", "Lrx/functions/Action1<-Lrx/Subscription;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/Observable$OnSubscribe<TT;>;" };
  static const J2ObjcClassInfo _RxInternalOperatorsOnSubscribeAutoConnect = { "OnSubscribeAutoConnect", "rx.internal.operators", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, 7, -1 };
  return &_RxInternalOperatorsOnSubscribeAutoConnect;
}

@end

void RxInternalOperatorsOnSubscribeAutoConnect_initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_(RxInternalOperatorsOnSubscribeAutoConnect *self, RxObservablesConnectableObservable *source, jint numberOfSubscribers, id<RxFunctionsAction1> connection) {
  NSObject_init(self);
  if (numberOfSubscribers <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"numberOfSubscribers > 0 required");
  }
  self->source_ = source;
  self->numberOfSubscribers_ = numberOfSubscribers;
  self->connection_ = connection;
  self->clients_ = new_JavaUtilConcurrentAtomicAtomicInteger_init();
}

RxInternalOperatorsOnSubscribeAutoConnect *new_RxInternalOperatorsOnSubscribeAutoConnect_initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_(RxObservablesConnectableObservable *source, jint numberOfSubscribers, id<RxFunctionsAction1> connection) {
  J2OBJC_NEW_IMPL(RxInternalOperatorsOnSubscribeAutoConnect, initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_, source, numberOfSubscribers, connection)
}

RxInternalOperatorsOnSubscribeAutoConnect *create_RxInternalOperatorsOnSubscribeAutoConnect_initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_(RxObservablesConnectableObservable *source, jint numberOfSubscribers, id<RxFunctionsAction1> connection) {
  J2OBJC_CREATE_IMPL(RxInternalOperatorsOnSubscribeAutoConnect, initWithRxObservablesConnectableObservable_withInt_withRxFunctionsAction1_, source, numberOfSubscribers, connection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalOperatorsOnSubscribeAutoConnect)
