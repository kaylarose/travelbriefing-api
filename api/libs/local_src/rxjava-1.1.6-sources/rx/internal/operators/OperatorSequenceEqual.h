//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/OperatorSequenceEqual.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSequenceEqual")
#ifdef RESTRICT_RxInternalOperatorsOperatorSequenceEqual
#define INCLUDE_ALL_RxInternalOperatorsOperatorSequenceEqual 0
#else
#define INCLUDE_ALL_RxInternalOperatorsOperatorSequenceEqual 1
#endif
#undef RESTRICT_RxInternalOperatorsOperatorSequenceEqual

#if !defined (RxInternalOperatorsOperatorSequenceEqual_) && (INCLUDE_ALL_RxInternalOperatorsOperatorSequenceEqual || defined(INCLUDE_RxInternalOperatorsOperatorSequenceEqual))
#define RxInternalOperatorsOperatorSequenceEqual_

@class RxObservable;
@protocol RxFunctionsFunc2;

/*!
 @brief Returns an <code>Observable</code> that emits a single <code>Boolean</code> value that indicates whether two source
 <code>Observable</code>s emit sequences of items that are equivalent to each other.
 */
@interface RxInternalOperatorsOperatorSequenceEqual : NSObject

+ (id)LOCAL_ONCOMPLETED;

#pragma mark Public

/*!
 @brief Tests whether two <code>Observable</code> sequences are identical, emitting <code>true</code> if both sequences
 complete without differing, and <code>false</code> if the two sequences diverge at any point.
 @param first
 the first of the two <code>Observable</code>s to compare
 @param second
 the second of the two <code>Observable</code>s to compare
 @param equality
 a function that tests emissions from each <code>Observable</code> for equality
 @return an <code>Observable</code> that emits <code>true</code> if <code>first</code> and <code>second</code> complete
 after emitting equal sequences of items, <code>false</code> if at any point in their sequences the
 two <code>Observable</code>s emit a non-equal item.
 */
+ (RxObservable *)sequenceEqualWithRxObservable:(RxObservable *)first
                               withRxObservable:(RxObservable *)second
                           withRxFunctionsFunc2:(id<RxFunctionsFunc2>)equality;

#pragma mark Package-Private

+ (RxObservable *)materializeLiteWithRxObservable:(RxObservable *)source;

@end

J2OBJC_STATIC_INIT(RxInternalOperatorsOperatorSequenceEqual)

/*!
 @brief NotificationLite doesn't work as zip uses it.
 */
inline id RxInternalOperatorsOperatorSequenceEqual_get_LOCAL_ONCOMPLETED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id RxInternalOperatorsOperatorSequenceEqual_LOCAL_ONCOMPLETED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalOperatorsOperatorSequenceEqual, LOCAL_ONCOMPLETED, id)

FOUNDATION_EXPORT RxObservable *RxInternalOperatorsOperatorSequenceEqual_materializeLiteWithRxObservable_(RxObservable *source);

FOUNDATION_EXPORT RxObservable *RxInternalOperatorsOperatorSequenceEqual_sequenceEqualWithRxObservable_withRxObservable_withRxFunctionsFunc2_(RxObservable *first, RxObservable *second, id<RxFunctionsFunc2> equality);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsOperatorSequenceEqual)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsOperatorSequenceEqual")
