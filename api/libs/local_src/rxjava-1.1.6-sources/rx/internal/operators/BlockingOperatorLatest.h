//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/operators/BlockingOperatorLatest.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest")
#ifdef RESTRICT_RxInternalOperatorsBlockingOperatorLatest
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest 0
#else
#define INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest 1
#endif
#undef RESTRICT_RxInternalOperatorsBlockingOperatorLatest

#if !defined (RxInternalOperatorsBlockingOperatorLatest_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest || defined(INCLUDE_RxInternalOperatorsBlockingOperatorLatest))
#define RxInternalOperatorsBlockingOperatorLatest_

@class RxObservable;
@protocol JavaLangIterable;

/*!
 @brief Wait for and iterate over the latest values of the source observable.
 If the source works faster than the
 iterator, values may be skipped, but not the <code>onError</code> or <code>onCompleted</code> events.
 */
@interface RxInternalOperatorsBlockingOperatorLatest : NSObject

#pragma mark Public

/*!
 @brief Returns an <code>Iterable</code> that blocks until or unless the <code>Observable</code> emits an item that has not
 been returned by the <code>Iterable</code>, then returns that item
 @param source
 the source <code>Observable</code>
 @return an <code>Iterable</code> that blocks until or unless the <code>Observable</code> emits an item that has not
 been returned by the <code>Iterable</code>, then returns that item
 */
+ (id<JavaLangIterable>)latestWithRxObservable:(RxObservable *)source;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorLatest)

FOUNDATION_EXPORT id<JavaLangIterable> RxInternalOperatorsBlockingOperatorLatest_latestWithRxObservable_(RxObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorLatest)

#endif

#if !defined (RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_) && (INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest || defined(INCLUDE_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator))
#define RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@class JavaUtilConcurrentSemaphore;
@class RxNotification;

/*!
 @brief Observer of source, iterator for output.
 */
@interface RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator : RxSubscriber < JavaUtilIterator > {
 @public
  JavaUtilConcurrentSemaphore *notify_;
  JavaUtilConcurrentAtomicAtomicReference *value_;
  RxNotification *iNotif_;
}

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RxNotification *)args;

- (void)remove;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator)

J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator, notify_, JavaUtilConcurrentSemaphore *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator, value_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator, iNotif_, RxNotification *)

FOUNDATION_EXPORT void RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *self);

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *new_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator *create_RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalOperatorsBlockingOperatorLatest_LatestObserverIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalOperatorsBlockingOperatorLatest")
