//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/RxRingBuffer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Queue.h"
#include "rx/Observer.h"
#include "rx/exceptions/MissingBackpressureException.h"
#include "rx/internal/operators/NotificationLite.h"
#include "rx/internal/util/ObjectPool.h"
#include "rx/internal/util/PlatformDependent.h"
#include "rx/internal/util/RxRingBuffer.h"
#include "rx/internal/util/SynchronizedQueue.h"
#include "rx/internal/util/unsafe/SpmcArrayQueue.h"
#include "rx/internal/util/unsafe/SpscArrayQueue.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"

@interface RxInternalUtilRxRingBuffer () {
 @public
  id<JavaUtilQueue> queue_;
  jint size_;
  RxInternalUtilObjectPool *pool_;
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                              withInt:(jint)size;

- (instancetype)initWithRxInternalUtilObjectPool:(RxInternalUtilObjectPool *)pool
                                         withInt:(jint)size;

@end

J2OBJC_FIELD_SETTER(RxInternalUtilRxRingBuffer, queue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(RxInternalUtilRxRingBuffer, pool_, RxInternalUtilObjectPool *)

/*!
 @brief Queue implementation testing that led to current choices of data structures:
 With synchronized LinkedList
 @code
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 19118392.046  1002814.238    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    17891.641      252.747    ops/s
  With MpscPaddedQueue (single consumer, so failing 1 unit test)
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 22164483.238  3035027.348    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    23154.303      602.548    ops/s
  With ConcurrentLinkedQueue (tracking count separately)
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 17353906.092   378756.411    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    19224.411     1010.610    ops/s
  With ConcurrentLinkedQueue (using queue.size() method for count)
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 23951121.098  1982380.330    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5     1142.351       33.592    ops/s
  With SynchronizedQueue (synchronized LinkedList ... no object pooling)
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5 33231667.136   685757.510    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    74623.614     5493.766    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 22907359.257   707026.632    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    22222.410      320.829    ops/s
  With ArrayBlockingQueue
  Benchmark                                            Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5  2389804.664    68990.804    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    27384.274     1411.789    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 26497037.559    91176.247    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    17985.144      237.771    ops/s
  With ArrayBlockingQueue and Object Pool
  Benchmark                                            Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5 12465685.522   399070.770    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    27701.294      395.217    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 26399625.086   695639.436    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    17985.427      253.190    ops/s
  With SpscArrayQueue (single consumer, so failing 1 unit test)
  - requires access to Unsafe
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5  1922996.035    49183.766    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    70890.186     1382.550    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 80637811.605  3509706.954    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    71822.453     4127.660    ops/s
  With SpscArrayQueue and Object Pool (object pool improves createUseAndDestroy1 by 10x)
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5 25220069.264  1329078.785    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    72313.457     3535.447    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1       thrpt         5 81863840.884  2191416.069    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    73140.822     1528.764    ops/s
  With SpmcArrayQueue
  - requires access to Unsafe
  Benchmark                                            Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.spmcCreateUseAndDestroy1       thrpt         5 27630345.474   769219.142    ops/s
  r.i.RxRingBufferPerf.spmcCreateUseAndDestroy1000    thrpt         5    80052.046     4059.541    ops/s
  r.i.RxRingBufferPerf.spmcRingBufferAddRemove1       thrpt         5 44449524.222   563068.793    ops/s
  r.i.RxRingBufferPerf.spmcRingBufferAddRemove1000    thrpt         5    65231.253     1805.732    ops/s
  With SpmcArrayQueue and ObjectPool (object pool improves createUseAndDestroy1 by 10x)
  Benchmark                                        Mode   Samples        Score  Score error    Units
  r.i.RxRingBufferPerf.createUseAndDestroy1       thrpt         5 18489343.061  1011872.825    ops/s
  r.i.RxRingBufferPerf.createUseAndDestroy1000    thrpt         5    46416.434     1439.144    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove        thrpt         5 38280945.847  1071801.279    ops/s
  r.i.RxRingBufferPerf.ringBufferAddRemove1000    thrpt         5    42337.663     1052.231    ops/s
  --------------
  When UnsafeAccess.isUnsafeAvailable() == true we can use the Spmc/SpscArrayQueue implementations.
 @endcode
 */
inline RxInternalOperatorsNotificationLite *RxInternalUtilRxRingBuffer_get_on();
static RxInternalOperatorsNotificationLite *RxInternalUtilRxRingBuffer_on;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalUtilRxRingBuffer, on, RxInternalOperatorsNotificationLite *)

__attribute__((unused)) static void RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(RxInternalUtilRxRingBuffer *self, id<JavaUtilQueue> queue, jint size);

__attribute__((unused)) static RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(id<JavaUtilQueue> queue, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(id<JavaUtilQueue> queue, jint size);

__attribute__((unused)) static void RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilRxRingBuffer *self, RxInternalUtilObjectPool *pool, jint size);

__attribute__((unused)) static RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilObjectPool *pool, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilObjectPool *pool, jint size);

@interface RxInternalUtilRxRingBuffer_$1 : RxInternalUtilObjectPool

- (RxInternalUtilUnsafeSpscArrayQueue *)createObject;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilRxRingBuffer_$1)

__attribute__((unused)) static void RxInternalUtilRxRingBuffer_$1_init(RxInternalUtilRxRingBuffer_$1 *self);

__attribute__((unused)) static RxInternalUtilRxRingBuffer_$1 *new_RxInternalUtilRxRingBuffer_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilRxRingBuffer_$1 *create_RxInternalUtilRxRingBuffer_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilRxRingBuffer_$1)

@interface RxInternalUtilRxRingBuffer_$2 : RxInternalUtilObjectPool

- (RxInternalUtilUnsafeSpmcArrayQueue *)createObject;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilRxRingBuffer_$2)

__attribute__((unused)) static void RxInternalUtilRxRingBuffer_$2_init(RxInternalUtilRxRingBuffer_$2 *self);

__attribute__((unused)) static RxInternalUtilRxRingBuffer_$2 *new_RxInternalUtilRxRingBuffer_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalUtilRxRingBuffer_$2 *create_RxInternalUtilRxRingBuffer_$2_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilRxRingBuffer_$2)

J2OBJC_INITIALIZED_DEFN(RxInternalUtilRxRingBuffer)

jint RxInternalUtilRxRingBuffer__size = 128;
jint RxInternalUtilRxRingBuffer_SIZE;
RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_SPSC_POOL;
RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_SPMC_POOL;

@implementation RxInternalUtilRxRingBuffer

+ (jint)_size {
  return RxInternalUtilRxRingBuffer__size;
}

+ (void)set_size:(jint)value {
  RxInternalUtilRxRingBuffer__size = value;
}

+ (jint)SIZE {
  return RxInternalUtilRxRingBuffer_SIZE;
}

+ (RxInternalUtilObjectPool *)SPSC_POOL {
  return RxInternalUtilRxRingBuffer_SPSC_POOL;
}

+ (void)setSPSC_POOL:(RxInternalUtilObjectPool *)value {
  RxInternalUtilRxRingBuffer_SPSC_POOL = value;
}

+ (RxInternalUtilObjectPool *)SPMC_POOL {
  return RxInternalUtilRxRingBuffer_SPMC_POOL;
}

+ (void)setSPMC_POOL:(RxInternalUtilObjectPool *)value {
  RxInternalUtilRxRingBuffer_SPMC_POOL = value;
}

+ (RxInternalUtilRxRingBuffer *)getSpscInstance {
  return RxInternalUtilRxRingBuffer_getSpscInstance();
}

+ (RxInternalUtilRxRingBuffer *)getSpmcInstance {
  return RxInternalUtilRxRingBuffer_getSpmcInstance();
}

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                              withInt:(jint)size {
  RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(self, queue, size);
  return self;
}

- (instancetype)initWithRxInternalUtilObjectPool:(RxInternalUtilObjectPool *)pool
                                         withInt:(jint)size {
  RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(self, pool, size);
  return self;
}

- (void)release__ {
  @synchronized(self) {
    id<JavaUtilQueue> q = queue_;
    RxInternalUtilObjectPool *p = pool_;
    if (p != nil && q != nil) {
      [q clear];
      queue_ = nil;
      [p returnObjectWithId:q];
    }
  }
}

- (void)unsubscribe {
  [self release__];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilRxRingBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onNextWithId:(id)o {
  jboolean iae = false;
  jboolean mbe = false;
  @synchronized(self) {
    id<JavaUtilQueue> q = queue_;
    if (q != nil) {
      mbe = ![q offerWithId:[((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) nextWithId:o]];
    }
    else {
      iae = true;
    }
  }
  if (iae) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"This instance has been unsubscribed and the queue is no longer usable.");
  }
  if (mbe) {
    @throw new_RxExceptionsMissingBackpressureException_init();
  }
}

- (void)onCompleted {
  if (JreLoadVolatileId(&terminalState_) == nil) {
    (void) JreVolatileStrongAssign(&terminalState_, [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) completed]);
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if (JreLoadVolatileId(&terminalState_) == nil) {
    (void) JreVolatileStrongAssign(&terminalState_, [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) errorWithNSException:t]);
  }
}

- (jint)available {
  return size_ - [self count];
}

- (jint)capacity {
  return size_;
}

- (jint)count {
  id<JavaUtilQueue> q = queue_;
  if (q == nil) {
    return 0;
  }
  return [q size];
}

- (jboolean)isEmpty {
  id<JavaUtilQueue> q = queue_;
  if (q == nil) {
    return true;
  }
  return [q isEmpty];
}

- (id)poll {
  id o;
  @synchronized(self) {
    id<JavaUtilQueue> q = queue_;
    if (q == nil) {
      return nil;
    }
    o = [q poll];
    id ts = JreLoadVolatileId(&terminalState_);
    if (o == nil && ts != nil && [q peek] == nil) {
      o = ts;
      (void) JreVolatileStrongAssign(&terminalState_, nil);
    }
  }
  return o;
}

- (id)peek {
  id o;
  @synchronized(self) {
    id<JavaUtilQueue> q = queue_;
    if (q == nil) {
      return nil;
    }
    o = [q peek];
    id ts = JreLoadVolatileId(&terminalState_);
    if (o == nil && ts != nil && [q peek] == nil) {
      o = ts;
    }
  }
  return o;
}

- (jboolean)isCompletedWithId:(id)o {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) isCompletedWithId:o];
}

- (jboolean)isErrorWithId:(id)o {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) isErrorWithId:o];
}

- (id)getValueWithId:(id)o {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) getValueWithId:o];
}

- (jboolean)acceptWithId:(id)o
          withRxObserver:(id<RxObserver>)child {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) acceptWithRxObserver:child withId:o];
}

- (NSException *)asErrorWithId:(id)o {
  return [((RxInternalOperatorsNotificationLite *) nil_chk(RxInternalUtilRxRingBuffer_on)) getErrorWithId:o];
}

- (jboolean)isUnsubscribed {
  return queue_ == nil;
}

- (void)__javaClone:(RxInternalUtilRxRingBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&terminalState_, &original->terminalState_);
}

- (void)dealloc {
  JreReleaseVolatile(&terminalState_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSpscInstance", "LRxInternalUtilRxRingBuffer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { "getSpmcInstance", "LRxInternalUtilRxRingBuffer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { "initWithJavaUtilQueue:withInt:", NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { "initWithRxInternalUtilObjectPool:withInt:", NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { "release__", "V", 0x21, 4, -1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { "onNextWithId:", "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { "available", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "capacity", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "count", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "poll", "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "peek", "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isCompletedWithId:", "Z", 0x1, 10, 6, -1, -1, -1, -1 },
    { "isErrorWithId:", "Z", 0x1, 11, 6, -1, -1, -1, -1 },
    { "getValueWithId:", "LNSObject;", 0x1, 12, 6, -1, -1, -1, -1 },
    { "acceptWithId:withRxObserver:", "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { "asErrorWithId:", "LNSException;", 0x1, 15, 6, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "on", "LRxInternalOperatorsNotificationLite;", .constantValue.asLong = 0, 0x1a, -1, 16, 17, -1 },
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pool_", "LRxInternalUtilObjectPool;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "terminalState_", "LNSObject;", .constantValue.asLong = 0, 0x41, -1, -1, -1, -1 },
    { "_size", "I", .constantValue.asLong = 0, 0x8, -1, 20, -1, -1 },
    { "SIZE", "I", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "SPSC_POOL", "LRxInternalUtilObjectPool;", .constantValue.asLong = 0, 0x9, -1, 22, 19, -1 },
    { "SPMC_POOL", "LRxInternalUtilObjectPool;", .constantValue.asLong = 0, 0x9, -1, 23, 19, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilQueue;I", "(Ljava/util/Queue<Ljava/lang/Object;>;I)V", "LRxInternalUtilObjectPool;I", "(Lrx/internal/util/ObjectPool<Ljava/util/Queue<Ljava/lang/Object;>;>;I)V", "release", "onNext", "LNSObject;", "LRxExceptionsMissingBackpressureException;", "onError", "LNSException;", "isCompleted", "isError", "getValue", "accept", "LNSObject;LRxObserver;", "asError", &RxInternalUtilRxRingBuffer_on, "Lrx/internal/operators/NotificationLite<Ljava/lang/Object;>;", "Ljava/util/Queue<Ljava/lang/Object;>;", "Lrx/internal/util/ObjectPool<Ljava/util/Queue<Ljava/lang/Object;>;>;", &RxInternalUtilRxRingBuffer__size, &RxInternalUtilRxRingBuffer_SIZE, &RxInternalUtilRxRingBuffer_SPSC_POOL, &RxInternalUtilRxRingBuffer_SPMC_POOL };
  static const J2ObjcClassInfo _RxInternalUtilRxRingBuffer = { "RxRingBuffer", "rx.internal.util", ptrTable, methods, fields, 7, 0x1, 22, 9, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilRxRingBuffer;
}

+ (void)initialize {
  if (self == [RxInternalUtilRxRingBuffer class]) {
    RxInternalUtilRxRingBuffer_on = RxInternalOperatorsNotificationLite_instance();
    {
      if (RxInternalUtilPlatformDependent_isAndroid()) {
        RxInternalUtilRxRingBuffer__size = 16;
      }
      NSString *sizeFromProperty = JavaLangSystem_getPropertyWithNSString_(@"rx.ring-buffer.size");
      if (sizeFromProperty != nil) {
        @try {
          RxInternalUtilRxRingBuffer__size = JavaLangInteger_parseIntWithNSString_(sizeFromProperty);
        }
        @catch (JavaLangException *e) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$", @"Failed to set 'rx.buffer.size' with value ", sizeFromProperty, @" => ", [((JavaLangException *) nil_chk(e)) getMessage])];
        }
      }
    }
    RxInternalUtilRxRingBuffer_SIZE = RxInternalUtilRxRingBuffer__size;
    RxInternalUtilRxRingBuffer_SPSC_POOL = new_RxInternalUtilRxRingBuffer_$1_init();
    RxInternalUtilRxRingBuffer_SPMC_POOL = new_RxInternalUtilRxRingBuffer_$2_init();
    J2OBJC_SET_INITIALIZED(RxInternalUtilRxRingBuffer)
  }
}

@end

RxInternalUtilRxRingBuffer *RxInternalUtilRxRingBuffer_getSpscInstance() {
  RxInternalUtilRxRingBuffer_initialize();
  if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return new_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilRxRingBuffer_SPSC_POOL, RxInternalUtilRxRingBuffer_SIZE);
  }
  else {
    return new_RxInternalUtilRxRingBuffer_init();
  }
}

RxInternalUtilRxRingBuffer *RxInternalUtilRxRingBuffer_getSpmcInstance() {
  RxInternalUtilRxRingBuffer_initialize();
  if (RxInternalUtilUnsafeUnsafeAccess_isUnsafeAvailable()) {
    return new_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilRxRingBuffer_SPMC_POOL, RxInternalUtilRxRingBuffer_SIZE);
  }
  else {
    return new_RxInternalUtilRxRingBuffer_init();
  }
}

void RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(RxInternalUtilRxRingBuffer *self, id<JavaUtilQueue> queue, jint size) {
  NSObject_init(self);
  self->queue_ = queue;
  self->pool_ = nil;
  self->size_ = size;
}

RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(id<JavaUtilQueue> queue, jint size) {
  J2OBJC_NEW_IMPL(RxInternalUtilRxRingBuffer, initWithJavaUtilQueue_withInt_, queue, size)
}

RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(id<JavaUtilQueue> queue, jint size) {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxRingBuffer, initWithJavaUtilQueue_withInt_, queue, size)
}

void RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilRxRingBuffer *self, RxInternalUtilObjectPool *pool, jint size) {
  NSObject_init(self);
  self->pool_ = pool;
  self->queue_ = [((RxInternalUtilObjectPool *) nil_chk(pool)) borrowObject];
  self->size_ = size;
}

RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilObjectPool *pool, jint size) {
  J2OBJC_NEW_IMPL(RxInternalUtilRxRingBuffer, initWithRxInternalUtilObjectPool_withInt_, pool, size)
}

RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_initWithRxInternalUtilObjectPool_withInt_(RxInternalUtilObjectPool *pool, jint size) {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxRingBuffer, initWithRxInternalUtilObjectPool_withInt_, pool, size)
}

void RxInternalUtilRxRingBuffer_init(RxInternalUtilRxRingBuffer *self) {
  RxInternalUtilRxRingBuffer_initWithJavaUtilQueue_withInt_(self, new_RxInternalUtilSynchronizedQueue_initWithInt_(RxInternalUtilRxRingBuffer_SIZE), RxInternalUtilRxRingBuffer_SIZE);
}

RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilRxRingBuffer, init)
}

RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxRingBuffer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilRxRingBuffer)

@implementation RxInternalUtilRxRingBuffer_$1

- (RxInternalUtilUnsafeSpscArrayQueue *)createObject {
  return new_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilRxRingBuffer_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObject", "LRxInternalUtilUnsafeSpscArrayQueue;", 0x4, -1, -1, -1, 0, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/internal/util/unsafe/SpscArrayQueue<Ljava/lang/Object;>;", "LRxInternalUtilRxRingBuffer;", "Lrx/internal/util/ObjectPool<Ljava/util/Queue<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalUtilRxRingBuffer_$1 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, -1, 2, -1 };
  return &_RxInternalUtilRxRingBuffer_$1;
}

@end

void RxInternalUtilRxRingBuffer_$1_init(RxInternalUtilRxRingBuffer_$1 *self) {
  RxInternalUtilObjectPool_init(self);
}

RxInternalUtilRxRingBuffer_$1 *new_RxInternalUtilRxRingBuffer_$1_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilRxRingBuffer_$1, init)
}

RxInternalUtilRxRingBuffer_$1 *create_RxInternalUtilRxRingBuffer_$1_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxRingBuffer_$1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilRxRingBuffer_$1)

@implementation RxInternalUtilRxRingBuffer_$2

- (RxInternalUtilUnsafeSpmcArrayQueue *)createObject {
  return new_RxInternalUtilUnsafeSpmcArrayQueue_initWithInt_(JreLoadStatic(RxInternalUtilRxRingBuffer, SIZE));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilRxRingBuffer_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObject", "LRxInternalUtilUnsafeSpmcArrayQueue;", 0x4, -1, -1, -1, 0, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/internal/util/unsafe/SpmcArrayQueue<Ljava/lang/Object;>;", "LRxInternalUtilRxRingBuffer;", "Lrx/internal/util/ObjectPool<Ljava/util/Queue<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _RxInternalUtilRxRingBuffer_$2 = { "", "rx.internal.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, -1, 2, -1 };
  return &_RxInternalUtilRxRingBuffer_$2;
}

@end

void RxInternalUtilRxRingBuffer_$2_init(RxInternalUtilRxRingBuffer_$2 *self) {
  RxInternalUtilObjectPool_init(self);
}

RxInternalUtilRxRingBuffer_$2 *new_RxInternalUtilRxRingBuffer_$2_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilRxRingBuffer_$2, init)
}

RxInternalUtilRxRingBuffer_$2 *create_RxInternalUtilRxRingBuffer_$2_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilRxRingBuffer_$2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilRxRingBuffer_$2)
