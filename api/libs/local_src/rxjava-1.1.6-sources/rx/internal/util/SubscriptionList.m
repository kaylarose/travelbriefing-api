//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/SubscriptionList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "rx/Subscription.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/internal/util/SubscriptionList.h"

@interface RxInternalUtilSubscriptionList () {
 @public
  JavaUtilLinkedList *subscriptions_;
  volatile_jboolean unsubscribed_;
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions;

@end

J2OBJC_FIELD_SETTER(RxInternalUtilSubscriptionList, subscriptions_, JavaUtilLinkedList *)

__attribute__((unused)) static void RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions);

@implementation RxInternalUtilSubscriptionList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilSubscriptionList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRxSubscriptionArray:(IOSObjectArray *)subscriptions {
  RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(self, subscriptions);
  return self;
}

- (instancetype)initWithRxSubscription:(id<RxSubscription>)s {
  RxInternalUtilSubscriptionList_initWithRxSubscription_(self, s);
  return self;
}

- (jboolean)isUnsubscribed {
  return JreLoadVolatileBoolean(&unsubscribed_);
}

- (void)addWithRxSubscription:(id<RxSubscription>)s {
  if ([((id<RxSubscription>) nil_chk(s)) isUnsubscribed]) {
    return;
  }
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&unsubscribed_)) {
        JavaUtilLinkedList *subs = subscriptions_;
        if (subs == nil) {
          subs = new_JavaUtilLinkedList_init();
          subscriptions_ = subs;
        }
        [subs addWithId:s];
        return;
      }
    }
  }
  [s unsubscribe];
}

- (void)removeWithRxSubscription:(id<RxSubscription>)s {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    jboolean unsubscribe = false;
    @synchronized(self) {
      JavaUtilLinkedList *subs = subscriptions_;
      if (JreLoadVolatileBoolean(&unsubscribed_) || subs == nil) {
        return;
      }
      unsubscribe = [subs removeWithId:s];
    }
    if (unsubscribe) {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
  }
}

- (void)unsubscribe {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    id<JavaUtilList> list;
    @synchronized(self) {
      if (JreLoadVolatileBoolean(&unsubscribed_)) {
        return;
      }
      JreAssignVolatileBoolean(&unsubscribed_, true);
      list = subscriptions_;
      subscriptions_ = nil;
    }
    RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(list);
  }
}

+ (void)unsubscribeFromAllWithJavaUtilCollection:(id<JavaUtilCollection>)subscriptions {
  RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(subscriptions);
}

- (void)clear {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    id<JavaUtilList> list;
    @synchronized(self) {
      list = subscriptions_;
      subscriptions_ = nil;
    }
    RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(list);
  }
}

- (jboolean)hasSubscriptions {
  if (!JreLoadVolatileBoolean(&unsubscribed_)) {
    @synchronized(self) {
      return !JreLoadVolatileBoolean(&unsubscribed_) && subscriptions_ != nil && ![subscriptions_ isEmpty];
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithRxSubscriptionArray:", NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { "initWithRxSubscription:", NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "addWithRxSubscription:", "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { "removeWithRxSubscription:", "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "unsubscribeFromAllWithJavaUtilCollection:", "V", 0xa, 4, 5, -1, 6, -1, -1 },
    { "clear", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasSubscriptions", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "subscriptions_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "unsubscribed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LRxSubscription;", "LRxSubscription;", "add", "remove", "unsubscribeFromAll", "LJavaUtilCollection;", "(Ljava/util/Collection<Lrx/Subscription;>;)V", "Ljava/util/LinkedList<Lrx/Subscription;>;" };
  static const J2ObjcClassInfo _RxInternalUtilSubscriptionList = { "SubscriptionList", "rx.internal.util", ptrTable, methods, fields, 7, 0x11, 10, 2, -1, -1, -1, -1, -1 };
  return &_RxInternalUtilSubscriptionList;
}

@end

void RxInternalUtilSubscriptionList_init(RxInternalUtilSubscriptionList *self) {
  NSObject_init(self);
}

RxInternalUtilSubscriptionList *new_RxInternalUtilSubscriptionList_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionList, init)
}

RxInternalUtilSubscriptionList *create_RxInternalUtilSubscriptionList_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionList, init)
}

void RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(RxInternalUtilSubscriptionList *self, IOSObjectArray *subscriptions) {
  NSObject_init(self);
  self->subscriptions_ = new_JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(subscriptions));
}

RxInternalUtilSubscriptionList *new_RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionList, initWithRxSubscriptionArray_, subscriptions)
}

RxInternalUtilSubscriptionList *create_RxInternalUtilSubscriptionList_initWithRxSubscriptionArray_(IOSObjectArray *subscriptions) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionList, initWithRxSubscriptionArray_, subscriptions)
}

void RxInternalUtilSubscriptionList_initWithRxSubscription_(RxInternalUtilSubscriptionList *self, id<RxSubscription> s) {
  NSObject_init(self);
  self->subscriptions_ = new_JavaUtilLinkedList_init();
  [self->subscriptions_ addWithId:s];
}

RxInternalUtilSubscriptionList *new_RxInternalUtilSubscriptionList_initWithRxSubscription_(id<RxSubscription> s) {
  J2OBJC_NEW_IMPL(RxInternalUtilSubscriptionList, initWithRxSubscription_, s)
}

RxInternalUtilSubscriptionList *create_RxInternalUtilSubscriptionList_initWithRxSubscription_(id<RxSubscription> s) {
  J2OBJC_CREATE_IMPL(RxInternalUtilSubscriptionList, initWithRxSubscription_, s)
}

void RxInternalUtilSubscriptionList_unsubscribeFromAllWithJavaUtilCollection_(id<JavaUtilCollection> subscriptions) {
  RxInternalUtilSubscriptionList_initialize();
  if (subscriptions == nil) {
    return;
  }
  id<JavaUtilList> es = nil;
  for (id<RxSubscription> __strong s in subscriptions) {
    @try {
      [((id<RxSubscription>) nil_chk(s)) unsubscribe];
    }
    @catch (NSException *e) {
      if (es == nil) {
        es = new_JavaUtilArrayList_init();
      }
      [es addWithId:e];
    }
  }
  RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(es);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilSubscriptionList)
