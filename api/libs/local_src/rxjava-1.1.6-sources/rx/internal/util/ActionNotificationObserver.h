//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/ActionNotificationObserver.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilActionNotificationObserver")
#ifdef RESTRICT_RxInternalUtilActionNotificationObserver
#define INCLUDE_ALL_RxInternalUtilActionNotificationObserver 0
#else
#define INCLUDE_ALL_RxInternalUtilActionNotificationObserver 1
#endif
#undef RESTRICT_RxInternalUtilActionNotificationObserver

#if !defined (RxInternalUtilActionNotificationObserver_) && (INCLUDE_ALL_RxInternalUtilActionNotificationObserver || defined(INCLUDE_RxInternalUtilActionNotificationObserver))
#define RxInternalUtilActionNotificationObserver_

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@protocol RxFunctionsAction1;

/*!
 @brief An Observer that forwards the onXXX method calls to a notification callback
 by transforming each signal type into Notifications.
 */
@interface RxInternalUtilActionNotificationObserver : NSObject < RxObserver > {
 @public
  id<RxFunctionsAction1> onNotification_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsAction1:(id<RxFunctionsAction1>)onNotification;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilActionNotificationObserver)

J2OBJC_FIELD_SETTER(RxInternalUtilActionNotificationObserver, onNotification_, id<RxFunctionsAction1>)

FOUNDATION_EXPORT void RxInternalUtilActionNotificationObserver_initWithRxFunctionsAction1_(RxInternalUtilActionNotificationObserver *self, id<RxFunctionsAction1> onNotification);

FOUNDATION_EXPORT RxInternalUtilActionNotificationObserver *new_RxInternalUtilActionNotificationObserver_initWithRxFunctionsAction1_(id<RxFunctionsAction1> onNotification) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilActionNotificationObserver *create_RxInternalUtilActionNotificationObserver_initWithRxFunctionsAction1_(id<RxFunctionsAction1> onNotification);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilActionNotificationObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilActionNotificationObserver")
