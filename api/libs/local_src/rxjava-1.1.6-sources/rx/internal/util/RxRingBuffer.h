//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/RxRingBuffer.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilRxRingBuffer")
#ifdef RESTRICT_RxInternalUtilRxRingBuffer
#define INCLUDE_ALL_RxInternalUtilRxRingBuffer 0
#else
#define INCLUDE_ALL_RxInternalUtilRxRingBuffer 1
#endif
#undef RESTRICT_RxInternalUtilRxRingBuffer

#if !defined (RxInternalUtilRxRingBuffer_) && (INCLUDE_ALL_RxInternalUtilRxRingBuffer || defined(INCLUDE_RxInternalUtilRxRingBuffer))
#define RxInternalUtilRxRingBuffer_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class RxInternalUtilObjectPool;
@protocol RxObserver;

/*!
 @brief This assumes Spsc or Spmc usage.
 This means only a single producer calling the on* methods. This is the Rx
 contract of an Observer (see http://reactivex.io/documentation/contract.html). Concurrent invocations of
 on* methods will not be thread-safe.
 */
@interface RxInternalUtilRxRingBuffer : NSObject < RxSubscription > {
 @public
  /*!
   @brief We store the terminal state separately so it doesn't count against the size.
   We don't just +1 the size since some of the queues require sizes that are a power of 2.
 This is a subjective thing ... wanting to keep the size (ie 1024) the actual number of onNext
 that can be sent rather than something like 1023 onNext + 1 terminal event. It also simplifies
 checking that we have received only 1 terminal event, as we don't need to peek at the last item
 or retain a boolean flag.
   */
  volatile_id terminalState_;
}

+ (jint)_size;

+ (void)set_size:(jint)value;

+ (jint)SIZE;

+ (RxInternalUtilObjectPool *)SPSC_POOL;

+ (void)setSPSC_POOL:(RxInternalUtilObjectPool *)value;

+ (RxInternalUtilObjectPool *)SPMC_POOL;

+ (void)setSPMC_POOL:(RxInternalUtilObjectPool *)value;

#pragma mark Public

- (jboolean)acceptWithId:(id)o
          withRxObserver:(id<RxObserver>)child;

- (NSException *)asErrorWithId:(id)o;

- (jint)available;

- (jint)capacity;

- (jint)count;

+ (RxInternalUtilRxRingBuffer *)getSpmcInstance;

+ (RxInternalUtilRxRingBuffer *)getSpscInstance;

- (id)getValueWithId:(id)o;

- (jboolean)isCompletedWithId:(id)o;

- (jboolean)isEmpty;

- (jboolean)isErrorWithId:(id)o;

- (jboolean)isUnsubscribed;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)t;

/*!
 @param o
 @throws MissingBackpressureException
 if more onNext are sent than have been requested
 */
- (void)onNextWithId:(id)o;

- (id)peek;

- (id)poll;

- (void)release__;

- (void)unsubscribe;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxInternalUtilRxRingBuffer)

J2OBJC_VOLATILE_FIELD_SETTER(RxInternalUtilRxRingBuffer, terminalState_, id)

/*!
 @brief 128 was chosen as the default based on the numbers below.
 A stream processing system may benefit from increasing to 512+.
 @code
  ./gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 1 .*OperatorObserveOnPerf.*'
  1024
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   100642.874    24676.478    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     4095.901       90.730    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        9.797        4.982    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 15536155.489   758579.454    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   156257.341     6324.176    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      157.099        7.143    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    16864.641     1826.877    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     4269.317      169.480    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       13.393        1.047    ops/s
  512
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    98945.980    48050.282    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     4111.149       95.987    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       12.483        3.067    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16032469.143   620157.818    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   157997.290     5097.718    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      156.462        7.728    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    15813.984     8260.170    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     4358.334      251.609    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       13.647        0.613    ops/s
  256
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   108489.834     2688.489    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     4526.674      728.019    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       13.372        0.457    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16435113.709   311602.627    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   157611.204    13146.108    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      158.346        2.500    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    16976.775      968.191    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     6238.210     2060.387    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       13.465        0.566    ops/s
  128
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   106887.027    29307.913    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     6713.891      202.989    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       11.929        0.187    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16055774.724   350633.068    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   153403.821    17976.156    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      153.559       20.178    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    17172.274      236.816    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     7073.555      595.990    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       11.855        1.093    ops/s
  32
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   106128.589    20986.201    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     6396.607       73.627    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        7.643        0.668    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16012419.447   409004.521    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   157907.001     5772.849    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      155.308       23.853    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    16927.513      606.692    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     5191.084      244.876    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5        8.288        0.217    ops/s
  16
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   109974.741      839.064    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     4538.912      173.561    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        5.420        0.111    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16017466.785   768748.695    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   157934.065    13479.575    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      155.922       17.781    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    14903.686     3325.205    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     3784.776     1054.131    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5        5.624        0.130    ops/s
  2
  Benchmark                                         (size)   Mode   Samples        Score  Score error    Units
  r.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   112663.216      899.005    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5      899.737        9.460    ops/s
  r.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        0.999        0.100    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 16087325.336   783206.227    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   156747.025     4880.489    ops/s
  r.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      156.645        3.810    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    15958.711      673.895    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5      884.624       47.692    ops/s
  r.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5        1.173        0.100    ops/s
 
@endcode
 */
inline jint RxInternalUtilRxRingBuffer_get__size();
inline jint RxInternalUtilRxRingBuffer_set__size(jint value);
inline jint *RxInternalUtilRxRingBuffer_getRef__size();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalUtilRxRingBuffer__size;
J2OBJC_STATIC_FIELD_PRIMITIVE(RxInternalUtilRxRingBuffer, _size, jint)

inline jint RxInternalUtilRxRingBuffer_get_SIZE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalUtilRxRingBuffer_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilRxRingBuffer, SIZE, jint)

inline RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_get_SPSC_POOL();
inline RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_set_SPSC_POOL(RxInternalUtilObjectPool *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_SPSC_POOL;
J2OBJC_STATIC_FIELD_OBJ(RxInternalUtilRxRingBuffer, SPSC_POOL, RxInternalUtilObjectPool *)

inline RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_get_SPMC_POOL();
inline RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_set_SPMC_POOL(RxInternalUtilObjectPool *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalUtilObjectPool *RxInternalUtilRxRingBuffer_SPMC_POOL;
J2OBJC_STATIC_FIELD_OBJ(RxInternalUtilRxRingBuffer, SPMC_POOL, RxInternalUtilObjectPool *)

FOUNDATION_EXPORT RxInternalUtilRxRingBuffer *RxInternalUtilRxRingBuffer_getSpscInstance();

FOUNDATION_EXPORT RxInternalUtilRxRingBuffer *RxInternalUtilRxRingBuffer_getSpmcInstance();

FOUNDATION_EXPORT void RxInternalUtilRxRingBuffer_init(RxInternalUtilRxRingBuffer *self);

FOUNDATION_EXPORT RxInternalUtilRxRingBuffer *new_RxInternalUtilRxRingBuffer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilRxRingBuffer *create_RxInternalUtilRxRingBuffer_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilRxRingBuffer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilRxRingBuffer")
