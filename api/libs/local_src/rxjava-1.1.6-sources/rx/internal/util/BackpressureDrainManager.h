//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/BackpressureDrainManager.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilBackpressureDrainManager")
#ifdef RESTRICT_RxInternalUtilBackpressureDrainManager
#define INCLUDE_ALL_RxInternalUtilBackpressureDrainManager 0
#else
#define INCLUDE_ALL_RxInternalUtilBackpressureDrainManager 1
#endif
#undef RESTRICT_RxInternalUtilBackpressureDrainManager

#if !defined (RxInternalUtilBackpressureDrainManager_) && (INCLUDE_ALL_RxInternalUtilBackpressureDrainManager || defined(INCLUDE_RxInternalUtilBackpressureDrainManager))
#define RxInternalUtilBackpressureDrainManager_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@protocol RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;

/*!
 @brief Manages the producer-backpressure-consumer interplay by
 matching up available elements with requested elements and/or
 terminal events.
 @since 1.1.0
 */
@interface RxInternalUtilBackpressureDrainManager : JavaUtilConcurrentAtomicAtomicLong < RxProducer > {
 @public
  /*!
   @brief Indicates if one is in emitting phase, guarded by this.
   */
  jboolean emitting_;
  /*!
   @brief Indicates a terminal state.
   */
  volatile_jboolean terminated_;
  /*!
   @brief Indicates an error state, barrier is provided via terminated.
   */
  NSException *exception_;
  /*!
   @brief The callbacks to manage the drain.
   */
  id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual_;
}

#pragma mark Public

/*!
 @brief Constructs a backpressure drain manager with 0 requestedCount,
 no terminal event and not emitting.
 @param actual he queue callback to check for new element availability
 */
- (instancetype)initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback:(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>)actual;

/*!
 @brief Try to drain the "queued" elements and terminal events
 by considering the available and requested event counts.
 */
- (void)drain;

/*!
 @brief Checks if a terminal state has been reached.
 @return true if a terminal state has been reached
 */
- (jboolean)isTerminated;

- (void)requestWithLong:(jlong)n;

/*!
 @brief Move into a terminal state.
 Call drain() anytime after.
 */
- (void)terminate;

/*!
 @brief Move into a terminal state with an exception.
 Call drain() anytime after.
 <p>Serialized access is expected with respect to
 element emission.
 @param error the exception to deliver
 */
- (void)terminateWithNSException:(NSException *)error;

/*!
 @brief Move into a terminal state and drain.
 */
- (void)terminateAndDrain;

/*!
 @brief Move into a terminal state with an exception and drain.
 <p>Serialized access is expected with respect to
 element emission.
 @param error the exception to deliver
 */
- (void)terminateAndDrainWithNSException:(NSException *)error;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilBackpressureDrainManager)

J2OBJC_FIELD_SETTER(RxInternalUtilBackpressureDrainManager, exception_, NSException *)
J2OBJC_FIELD_SETTER(RxInternalUtilBackpressureDrainManager, actual_, id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>)

FOUNDATION_EXPORT void RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(RxInternalUtilBackpressureDrainManager *self, id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual);

FOUNDATION_EXPORT RxInternalUtilBackpressureDrainManager *new_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilBackpressureDrainManager *create_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilBackpressureDrainManager)

#endif

#if !defined (RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_) && (INCLUDE_ALL_RxInternalUtilBackpressureDrainManager || defined(INCLUDE_RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback))
#define RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_

/*!
 @brief Interface representing the minimal callbacks required
 to operate the drain part of a backpressure system.
 */
@protocol RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback < JavaObject >

/*!
 @brief Override this method to peek for the next element,
 null meaning no next element available now.
 <p>It will be called plain and while holding this object's monitor.
 @return the next element or null if no next element available
 */
- (id)peek;

/*!
 @brief Override this method to poll (consume) the next element,
 null meaning no next element available now.
 @return the next element or null if no next element available
 */
- (id)poll;

/*!
 @brief Override this method to deliver an element to downstream.
 The logic ensures that this happens only in the right conditions.
 @param value the value to deliver, not null
 @return true indicates that one should terminate the emission loop unconditionally
 and not deliver any further elements or terminal events.
 */
- (jboolean)acceptWithId:(id)value;

/*!
 @brief Override this method to deliver a normal or exceptional
 terminal event.
 @param exception if not null, contains the terminal exception
 */
- (void)completeWithNSException:(NSException *)exception;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback)

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilBackpressureDrainManager")
