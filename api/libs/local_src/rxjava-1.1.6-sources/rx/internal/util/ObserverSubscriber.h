//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/ObserverSubscriber.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilObserverSubscriber")
#ifdef RESTRICT_RxInternalUtilObserverSubscriber
#define INCLUDE_ALL_RxInternalUtilObserverSubscriber 0
#else
#define INCLUDE_ALL_RxInternalUtilObserverSubscriber 1
#endif
#undef RESTRICT_RxInternalUtilObserverSubscriber

#if !defined (RxInternalUtilObserverSubscriber_) && (INCLUDE_ALL_RxInternalUtilObserverSubscriber || defined(INCLUDE_RxInternalUtilObserverSubscriber))
#define RxInternalUtilObserverSubscriber_

#define RESTRICT_RxSubscriber 1
#define INCLUDE_RxSubscriber 1
#include "rx/Subscriber.h"

@protocol RxObserver;

/*!
 @brief Wraps an Observer and forwards the onXXX method calls to it.
 */
@interface RxInternalUtilObserverSubscriber : RxSubscriber {
 @public
  id<RxObserver> observer_;
}

#pragma mark Public

- (instancetype)initWithRxObserver:(id<RxObserver>)observer;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilObserverSubscriber)

J2OBJC_FIELD_SETTER(RxInternalUtilObserverSubscriber, observer_, id<RxObserver>)

FOUNDATION_EXPORT void RxInternalUtilObserverSubscriber_initWithRxObserver_(RxInternalUtilObserverSubscriber *self, id<RxObserver> observer);

FOUNDATION_EXPORT RxInternalUtilObserverSubscriber *new_RxInternalUtilObserverSubscriber_initWithRxObserver_(id<RxObserver> observer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilObserverSubscriber *create_RxInternalUtilObserverSubscriber_initWithRxObserver_(id<RxObserver> observer);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilObserverSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilObserverSubscriber")
