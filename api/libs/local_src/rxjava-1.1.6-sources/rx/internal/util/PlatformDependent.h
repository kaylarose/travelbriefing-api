//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/PlatformDependent.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilPlatformDependent")
#ifdef RESTRICT_RxInternalUtilPlatformDependent
#define INCLUDE_ALL_RxInternalUtilPlatformDependent 0
#else
#define INCLUDE_ALL_RxInternalUtilPlatformDependent 1
#endif
#undef RESTRICT_RxInternalUtilPlatformDependent

#if !defined (RxInternalUtilPlatformDependent_) && (INCLUDE_ALL_RxInternalUtilPlatformDependent || defined(INCLUDE_RxInternalUtilPlatformDependent))
#define RxInternalUtilPlatformDependent_

@class JavaLangClassLoader;

/*!
 @brief Allow platform dependent logic such as checks for Android.
 Modeled after Netty with some code copy/pasted from: https://github.com/netty/netty/blob/master/common/src/main/java/io/netty/util/internal/PlatformDependent.java
 */
@interface RxInternalUtilPlatformDependent : NSObject

+ (jint)ANDROID_API_VERSION_IS_NOT_ANDROID;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Returns version of Android API.
 @return version of Android API or <code>ANDROID_API_VERSION_IS_NOT_ANDROID</code> if version
 can not be resolved or if current platform is not Android.
 */
+ (jint)getAndroidApiVersion;

/*!
 @brief Returns <code>true</code> if and only if the current platform is Android.
 @return <code>true</code> if and only if the current platform is Android
 */
+ (jboolean)isAndroid;

#pragma mark Package-Private

/*!
 @brief Return the system <code>ClassLoader</code>.
 */
+ (JavaLangClassLoader *)getSystemClassLoader;

@end

J2OBJC_STATIC_INIT(RxInternalUtilPlatformDependent)

/*!
 @brief Possible value of <code>getAndroidApiVersion()</code> which means that the current platform is not Android.
 */
inline jint RxInternalUtilPlatformDependent_get_ANDROID_API_VERSION_IS_NOT_ANDROID();
#define RxInternalUtilPlatformDependent_ANDROID_API_VERSION_IS_NOT_ANDROID 0
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilPlatformDependent, ANDROID_API_VERSION_IS_NOT_ANDROID, jint)

FOUNDATION_EXPORT jboolean RxInternalUtilPlatformDependent_isAndroid();

FOUNDATION_EXPORT jint RxInternalUtilPlatformDependent_getAndroidApiVersion();

FOUNDATION_EXPORT JavaLangClassLoader *RxInternalUtilPlatformDependent_getSystemClassLoader();

FOUNDATION_EXPORT void RxInternalUtilPlatformDependent_init(RxInternalUtilPlatformDependent *self);

FOUNDATION_EXPORT RxInternalUtilPlatformDependent *new_RxInternalUtilPlatformDependent_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilPlatformDependent *create_RxInternalUtilPlatformDependent_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilPlatformDependent)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilPlatformDependent")
