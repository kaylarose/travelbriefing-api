//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/BackpressureDrainManager.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "rx/internal/util/BackpressureDrainManager.h"

/*!
 */
inline jlong RxInternalUtilBackpressureDrainManager_get_serialVersionUID();
#define RxInternalUtilBackpressureDrainManager_serialVersionUID 2826241102729529449LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalUtilBackpressureDrainManager, serialVersionUID, jlong)

__attribute__((unused)) static void RxInternalUtilBackpressureDrainManager_drain(RxInternalUtilBackpressureDrainManager *self);

@interface RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback : NSObject

@end

@implementation RxInternalUtilBackpressureDrainManager

- (instancetype)initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback:(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>)actual {
  RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(self, actual);
  return self;
}

- (jboolean)isTerminated {
  return JreLoadVolatileBoolean(&terminated_);
}

- (void)terminate {
  JreAssignVolatileBoolean(&terminated_, true);
}

- (void)terminateWithNSException:(NSException *)error {
  if (!JreLoadVolatileBoolean(&terminated_)) {
    exception_ = error;
    JreAssignVolatileBoolean(&terminated_, true);
  }
}

- (void)terminateAndDrain {
  JreAssignVolatileBoolean(&terminated_, true);
  RxInternalUtilBackpressureDrainManager_drain(self);
}

- (void)terminateAndDrainWithNSException:(NSException *)error {
  if (!JreLoadVolatileBoolean(&terminated_)) {
    exception_ = error;
    JreAssignVolatileBoolean(&terminated_, true);
    RxInternalUtilBackpressureDrainManager_drain(self);
  }
}

- (void)requestWithLong:(jlong)n {
  if (n == 0) {
    return;
  }
  jboolean mayDrain;
  jlong r;
  jlong u;
  do {
    r = [self get];
    mayDrain = (r == 0);
    if (r == JavaLangLong_MAX_VALUE) {
      break;
    }
    if (n == JavaLangLong_MAX_VALUE) {
      u = n;
      mayDrain = true;
    }
    else {
      if (r > JavaLangLong_MAX_VALUE - n) {
        u = JavaLangLong_MAX_VALUE;
      }
      else {
        u = r + n;
      }
    }
  }
  while (![self compareAndSetWithLong:r withLong:u]);
  if (mayDrain) {
    RxInternalUtilBackpressureDrainManager_drain(self);
  }
}

- (void)drain {
  RxInternalUtilBackpressureDrainManager_drain(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "isTerminated", "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { "terminate", "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { "terminateWithNSException:", "V", 0x11, 1, 2, -1, -1, -1, -1 },
    { "terminateAndDrain", "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { "terminateAndDrainWithNSException:", "V", 0x11, 3, 2, -1, -1, -1, -1 },
    { "requestWithLong:", "V", 0x11, 4, 5, -1, -1, -1, -1 },
    { "drain", "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalUtilBackpressureDrainManager_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "terminated_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "exception_", "LNSException;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "actual_", "LRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;", "terminate", "LNSException;", "terminateAndDrain", "request", "J" };
  static const J2ObjcClassInfo _RxInternalUtilBackpressureDrainManager = { "BackpressureDrainManager", "rx.internal.util", ptrTable, methods, fields, 7, 0x11, 8, 5, -1, 0, -1, -1, -1 };
  return &_RxInternalUtilBackpressureDrainManager;
}

@end

void RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(RxInternalUtilBackpressureDrainManager *self, id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  self->actual_ = actual;
}

RxInternalUtilBackpressureDrainManager *new_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  J2OBJC_NEW_IMPL(RxInternalUtilBackpressureDrainManager, initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_, actual)
}

RxInternalUtilBackpressureDrainManager *create_RxInternalUtilBackpressureDrainManager_initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_(id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> actual) {
  J2OBJC_CREATE_IMPL(RxInternalUtilBackpressureDrainManager, initWithRxInternalUtilBackpressureDrainManager_BackpressureQueueCallback_, actual)
}

void RxInternalUtilBackpressureDrainManager_drain(RxInternalUtilBackpressureDrainManager *self) {
  jlong n;
  jboolean term;
  @synchronized(self) {
    if (self->emitting_) {
      return;
    }
    self->emitting_ = true;
    term = JreLoadVolatileBoolean(&self->terminated_);
  }
  n = [self get];
  jboolean skipFinal = false;
  @try {
    id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback> a = self->actual_;
    while (true) {
      jint emitted = 0;
      while (n > 0 || term) {
        id o;
        if (term) {
          o = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) peek];
          if (o == nil) {
            skipFinal = true;
            NSException *e = self->exception_;
            [a completeWithNSException:e];
            return;
          }
          if (n == 0) {
            break;
          }
        }
        o = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) poll];
        if (o == nil) {
          break;
        }
        else {
          if ([a acceptWithId:o]) {
            skipFinal = true;
            return;
          }
          n--;
          emitted++;
        }
      }
      @synchronized(self) {
        term = JreLoadVolatileBoolean(&self->terminated_);
        jboolean more = [((id<RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback>) nil_chk(a)) peek] != nil;
        if ([self get] == JavaLangLong_MAX_VALUE) {
          if (!more && !term) {
            skipFinal = true;
            self->emitting_ = false;
            return;
          }
          n = JavaLangLong_MAX_VALUE;
        }
        else {
          n = [self addAndGetWithLong:-emitted];
          if ((n == 0 || !more) && (!term || more)) {
            skipFinal = true;
            self->emitting_ = false;
            return;
          }
        }
      }
    }
  }
  @finally {
    if (!skipFinal) {
      @synchronized(self) {
        self->emitting_ = false;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilBackpressureDrainManager)

@implementation RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "peek", "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { "poll", "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { "acceptWithId:", "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { "completeWithNSException:", "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LNSObject;", "complete", "LNSException;", "LRxInternalUtilBackpressureDrainManager;" };
  static const J2ObjcClassInfo _RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback = { "BackpressureQueueCallback", "rx.internal.util", ptrTable, methods, NULL, 7, 0x609, 4, 0, 4, -1, -1, -1, -1 };
  return &_RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxInternalUtilBackpressureDrainManager_BackpressureQueueCallback)
