//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/SpscArrayQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue")
#ifdef RESTRICT_RxInternalUtilUnsafeSpscArrayQueue
#define INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue 1
#endif
#undef RESTRICT_RxInternalUtilUnsafeSpscArrayQueue
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueue
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL3Pad 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL3Pad
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueConsumerField 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueueConsumerField
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL2Pad 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL2Pad
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueProducerFields 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueueProducerFields
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL1Pad 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL1Pad
#define INCLUDE_RxInternalUtilUnsafeSpscArrayQueueColdField 1
#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueColdField_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueColdField))
#define RxInternalUtilUnsafeSpscArrayQueueColdField_

#define RESTRICT_RxInternalUtilUnsafeConcurrentCircularArrayQueue 1
#define INCLUDE_RxInternalUtilUnsafeConcurrentCircularArrayQueue 1
#include "rx/internal/util/unsafe/ConcurrentCircularArrayQueue.h"

@interface RxInternalUtilUnsafeSpscArrayQueueColdField : RxInternalUtilUnsafeConcurrentCircularArrayQueue {
 @public
  jint lookAheadStep_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueColdField)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueColdField_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueColdField *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueColdField)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueL1Pad_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL1Pad))
#define RxInternalUtilUnsafeSpscArrayQueueL1Pad_

@interface RxInternalUtilUnsafeSpscArrayQueueL1Pad : RxInternalUtilUnsafeSpscArrayQueueColdField {
 @public
  jlong p10_, p11_, p12_, p13_, p14_, p15_, p16_;
  jlong p30_SpscArrayQueueL1Pad_, p31_SpscArrayQueueL1Pad_, p32_SpscArrayQueueL1Pad_, p33_SpscArrayQueueL1Pad_, p34_SpscArrayQueueL1Pad_, p35_SpscArrayQueueL1Pad_, p36_SpscArrayQueueL1Pad_, p37_SpscArrayQueueL1Pad_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueL1Pad)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueL1Pad_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueL1Pad *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueL1Pad)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueProducerFields_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueProducerFields))
#define RxInternalUtilUnsafeSpscArrayQueueProducerFields_

@interface RxInternalUtilUnsafeSpscArrayQueueProducerFields : RxInternalUtilUnsafeSpscArrayQueueL1Pad {
 @public
  jlong producerIndex_;
  jlong producerLookAhead_;
}

+ (jlong)P_INDEX_OFFSET;

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueProducerFields)

inline jlong RxInternalUtilUnsafeSpscArrayQueueProducerFields_get_P_INDEX_OFFSET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxInternalUtilUnsafeSpscArrayQueueProducerFields_P_INDEX_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeSpscArrayQueueProducerFields, P_INDEX_OFFSET, jlong)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueProducerFields_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueProducerFields *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueProducerFields)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueL2Pad_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL2Pad))
#define RxInternalUtilUnsafeSpscArrayQueueL2Pad_

@interface RxInternalUtilUnsafeSpscArrayQueueL2Pad : RxInternalUtilUnsafeSpscArrayQueueProducerFields {
 @public
  jlong p20_, p21_, p22_, p23_, p24_, p25_, p26_;
  jlong p30_SpscArrayQueueL2Pad_, p31_SpscArrayQueueL2Pad_, p32_SpscArrayQueueL2Pad_, p33_SpscArrayQueueL2Pad_, p34_SpscArrayQueueL2Pad_, p35_SpscArrayQueueL2Pad_, p36_SpscArrayQueueL2Pad_, p37_SpscArrayQueueL2Pad_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueL2Pad)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueL2Pad_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueL2Pad *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueL2Pad)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueConsumerField_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueConsumerField))
#define RxInternalUtilUnsafeSpscArrayQueueConsumerField_

@interface RxInternalUtilUnsafeSpscArrayQueueConsumerField : RxInternalUtilUnsafeSpscArrayQueueL2Pad {
 @public
  jlong consumerIndex_;
}

+ (jlong)C_INDEX_OFFSET;

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueConsumerField)

inline jlong RxInternalUtilUnsafeSpscArrayQueueConsumerField_get_C_INDEX_OFFSET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxInternalUtilUnsafeSpscArrayQueueConsumerField_C_INDEX_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeSpscArrayQueueConsumerField, C_INDEX_OFFSET, jlong)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueConsumerField_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueConsumerField *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueConsumerField)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueueL3Pad_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueueL3Pad))
#define RxInternalUtilUnsafeSpscArrayQueueL3Pad_

@interface RxInternalUtilUnsafeSpscArrayQueueL3Pad : RxInternalUtilUnsafeSpscArrayQueueConsumerField {
 @public
  jlong p40_, p41_, p42_, p43_, p44_, p45_, p46_;
  jlong p30_SpscArrayQueueL3Pad_, p31_SpscArrayQueueL3Pad_, p32_SpscArrayQueueL3Pad_, p33_SpscArrayQueueL3Pad_, p34_SpscArrayQueueL3Pad_, p35_SpscArrayQueueL3Pad_, p36_SpscArrayQueueL3Pad_, p37_SpscArrayQueueL3Pad_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueueL3Pad)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueueL3Pad_initWithInt_(RxInternalUtilUnsafeSpscArrayQueueL3Pad *self, jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueueL3Pad)

#endif

#if !defined (RxInternalUtilUnsafeSpscArrayQueue_) && (INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue || defined(INCLUDE_RxInternalUtilUnsafeSpscArrayQueue))
#define RxInternalUtilUnsafeSpscArrayQueue_

/*!
 @brief A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.
 <p>
 This implementation is a mashup of the <a href="http://sourceforge.net/projects/mc-fastflow/">Fast Flow</a>
 algorithm with an optimization of the offer method taken from the <a
 href="http://staff.ustc.edu.cn/~bhua/publications/IJPP_draft.pdf">BQueue</a> algorithm (a variation on Fast
 Flow), and adjusted to comply with Queue.offer semantics with regards to capacity.<br>
 For convenience the relevant papers are available in the resources folder:<br>
 <i>2010 - Pisa - SPSC Queues on Shared Cache Multi-Core Systems.pdf<br>
 2012 - Junchang- BQueue- Efficient and Practical Queuing.pdf <br>
 </i> This implementation is wait free.
 @author nitsanw
 */
@interface RxInternalUtilUnsafeSpscArrayQueue : RxInternalUtilUnsafeSpscArrayQueueL3Pad

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (jboolean)isEmpty;

/*!
 @brief 
 <p>
 This implementation is correct for single producer thread use only.
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief 
 <p>
 This implementation is correct for single consumer thread use only.
 */
- (id)peek;

/*!
 @brief 
 <p>
 This implementation is correct for single consumer thread use only.
 */
- (id)poll;

- (jint)size;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeSpscArrayQueue)

FOUNDATION_EXPORT void RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(RxInternalUtilUnsafeSpscArrayQueue *self, jint capacity);

FOUNDATION_EXPORT RxInternalUtilUnsafeSpscArrayQueue *new_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilUnsafeSpscArrayQueue *create_RxInternalUtilUnsafeSpscArrayQueue_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeSpscArrayQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilUnsafeSpscArrayQueue")
