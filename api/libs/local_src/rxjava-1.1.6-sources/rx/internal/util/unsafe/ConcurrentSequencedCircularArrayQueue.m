//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/ConcurrentSequencedCircularArrayQueue.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "rx/internal/util/unsafe/ConcurrentCircularArrayQueue.h"
#include "rx/internal/util/unsafe/ConcurrentSequencedCircularArrayQueue.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"
#include "sun/misc/Unsafe.h"

inline jlong RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_get_ARRAY_BASE();
static jlong RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ARRAY_BASE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue, ARRAY_BASE, jlong)

inline jint RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_get_ELEMENT_SHIFT();
static jint RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ELEMENT_SHIFT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue, ELEMENT_SHIFT, jint)

__attribute__((unused)) static jlong RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_calcSequenceOffsetWithLong_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, jlong index);

__attribute__((unused)) static void RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_soSequenceWithLongArray_withLong_withLong_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, IOSLongArray *buffer, jlong offset, jlong e);

J2OBJC_INITIALIZED_DEFN(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue)

@implementation RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue

- (instancetype)initWithInt:(jint)capacity {
  RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_initWithInt_(self, capacity);
  return self;
}

- (jlong)calcSequenceOffsetWithLong:(jlong)index {
  return RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_calcSequenceOffsetWithLong_(self, index);
}

- (void)soSequenceWithLongArray:(IOSLongArray *)buffer
                       withLong:(jlong)offset
                       withLong:(jlong)e {
  RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_soSequenceWithLongArray_withLong_withLong_(self, buffer, offset, e);
}

- (jlong)lvSequenceWithLongArray:(IOSLongArray *)buffer
                        withLong:(jlong)offset {
  return [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) getLongVolatileWithId:buffer withLong:offset];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "calcSequenceOffsetWithLong:", "J", 0x14, 1, 2, -1, -1, -1, -1 },
    { "soSequenceWithLongArray:withLong:withLong:", "V", 0x14, 3, 4, -1, -1, -1, -1 },
    { "lvSequenceWithLongArray:withLong:", "J", 0x14, 5, 6, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ARRAY_BASE", "J", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "ELEMENT_SHIFT", "I", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "sequenceBuffer_", "[J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "calcSequenceOffset", "J", "soSequence", "[JJJ", "lvSequence", "[JJ", &RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ARRAY_BASE, &RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ELEMENT_SHIFT, "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/ConcurrentCircularArrayQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue = { "ConcurrentSequencedCircularArrayQueue", "rx.internal.util.unsafe", ptrTable, methods, fields, 7, 0x401, 4, 3, -1, -1, -1, 9, -1 };
  return &_RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue;
}

+ (void)initialize {
  if (self == [RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue class]) {
    {
      jint scale_ = [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) arrayIndexScaleWithIOSClass:IOSClass_longArray(1)];
      if (8 == scale_) {
        RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ELEMENT_SHIFT = 3 + JreLoadStatic(RxInternalUtilUnsafeConcurrentCircularArrayQueue, SPARSE_SHIFT);
      }
      else {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Unexpected long[] element size");
      }
      RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ARRAY_BASE = [JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE) arrayBaseOffsetWithIOSClass:IOSClass_longArray(1)] + (JreLShift32(RxInternalUtilUnsafeConcurrentCircularArrayQueue_BUFFER_PAD, (RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ELEMENT_SHIFT - JreLoadStatic(RxInternalUtilUnsafeConcurrentCircularArrayQueue, SPARSE_SHIFT))));
    }
    J2OBJC_SET_INITIALIZED(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue)
  }
}

@end

void RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_initWithInt_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, jint capacity) {
  RxInternalUtilUnsafeConcurrentCircularArrayQueue_initWithInt_(self, capacity);
  jint actualCapacity = (jint) (self->mask_ + 1);
  self->sequenceBuffer_ = [IOSLongArray newArrayWithLength:(JreLShift32(actualCapacity, JreLoadStatic(RxInternalUtilUnsafeConcurrentCircularArrayQueue, SPARSE_SHIFT))) + RxInternalUtilUnsafeConcurrentCircularArrayQueue_BUFFER_PAD * 2];
  for (jlong i = 0; i < actualCapacity; i++) {
    RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_soSequenceWithLongArray_withLong_withLong_(self, self->sequenceBuffer_, RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_calcSequenceOffsetWithLong_(self, i), i);
  }
}

jlong RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_calcSequenceOffsetWithLong_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, jlong index) {
  return RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ARRAY_BASE + (JreLShift64((index & self->mask_), RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_ELEMENT_SHIFT));
}

void RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue_soSequenceWithLongArray_withLong_withLong_(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue *self, IOSLongArray *buffer, jlong offset, jlong e) {
  [((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) putOrderedLongWithId:buffer withLong:offset withLong:e];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeConcurrentSequencedCircularArrayQueue)
