//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/MpscLinkedQueue.java
//

#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "rx/internal/util/atomic/LinkedQueueNode.h"
#include "rx/internal/util/unsafe/BaseLinkedQueue.h"
#include "rx/internal/util/unsafe/BaseLinkedQueueProducerNodeRef.h"
#include "rx/internal/util/unsafe/MpscLinkedQueue.h"
#include "rx/internal/util/unsafe/UnsafeAccess.h"
#include "sun/misc/Unsafe.h"

__attribute__((unused)) static RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilUnsafeMpscLinkedQueue_xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode_(RxInternalUtilUnsafeMpscLinkedQueue *self, RxInternalUtilAtomicLinkedQueueNode *newVal);

@implementation RxInternalUtilUnsafeMpscLinkedQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeMpscLinkedQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxInternalUtilAtomicLinkedQueueNode *)xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)newVal {
  return RxInternalUtilUnsafeMpscLinkedQueue_xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode_(self, newVal);
}

- (jboolean)offerWithId:(id)nextValue {
  if (nextValue == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"null elements not allowed");
  }
  RxInternalUtilAtomicLinkedQueueNode *nextNode = new_RxInternalUtilAtomicLinkedQueueNode_initWithId_(nextValue);
  RxInternalUtilAtomicLinkedQueueNode *prevProducerNode = RxInternalUtilUnsafeMpscLinkedQueue_xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode_(self, nextNode);
  [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(prevProducerNode)) soNextWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  return true;
}

- (id)poll {
  RxInternalUtilAtomicLinkedQueueNode *currConsumerNode = [self lpConsumerNode];
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(currConsumerNode)) lvNext];
  if (nextNode != nil) {
    id nextValue = [nextNode getAndNullValue];
    [self spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
    return nextValue;
  }
  else if (currConsumerNode != [self lvProducerNode]) {
    while ((nextNode = [currConsumerNode lvNext]) == nil) ;
    id nextValue = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(nextNode)) getAndNullValue];
    consumerNode_ = nextNode;
    return nextValue;
  }
  return nil;
}

- (id)peek {
  RxInternalUtilAtomicLinkedQueueNode *currConsumerNode = consumerNode_;
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(currConsumerNode)) lvNext];
  if (nextNode != nil) {
    return [nextNode lpValue];
  }
  else if (currConsumerNode != [self lvProducerNode]) {
    while ((nextNode = [currConsumerNode lvNext]) == nil) ;
    return [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(nextNode)) lpValue];
  }
  return nil;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, 0, 1, -1, 2, -1, -1 },
    { "offerWithId:", "Z", 0x11, 3, 4, -1, 5, -1, -1 },
    { "poll", "LNSObject;", 0x11, -1, -1, -1, 6, -1, -1 },
    { "peek", "LNSObject;", 0x11, -1, -1, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "xchgProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", "(Lrx/internal/util/atomic/LinkedQueueNode<TE;>;)Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", "offer", "LNSObject;", "(TE;)Z", "()TE;", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/BaseLinkedQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeMpscLinkedQueue = { "MpscLinkedQueue", "rx.internal.util.unsafe", ptrTable, methods, NULL, 7, 0x11, 5, 0, -1, -1, -1, 7, -1 };
  return &_RxInternalUtilUnsafeMpscLinkedQueue;
}

@end

void RxInternalUtilUnsafeMpscLinkedQueue_init(RxInternalUtilUnsafeMpscLinkedQueue *self) {
  RxInternalUtilUnsafeBaseLinkedQueue_init(self);
  self->consumerNode_ = new_RxInternalUtilAtomicLinkedQueueNode_init();
  (void) RxInternalUtilUnsafeMpscLinkedQueue_xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode_(self, self->consumerNode_);
}

RxInternalUtilUnsafeMpscLinkedQueue *new_RxInternalUtilUnsafeMpscLinkedQueue_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUnsafeMpscLinkedQueue, init)
}

RxInternalUtilUnsafeMpscLinkedQueue *create_RxInternalUtilUnsafeMpscLinkedQueue_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUnsafeMpscLinkedQueue, init)
}

RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilUnsafeMpscLinkedQueue_xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode_(RxInternalUtilUnsafeMpscLinkedQueue *self, RxInternalUtilAtomicLinkedQueueNode *newVal) {
  id oldVal;
  do {
    oldVal = self->producerNode_;
  }
  while (![((SunMiscUnsafe *) nil_chk(JreLoadStatic(RxInternalUtilUnsafeUnsafeAccess, UNSAFE))) compareAndSwapObjectWithId:self withLong:JreLoadStatic(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef, P_NODE_OFFSET) withId:oldVal withId:newVal]);
  return (RxInternalUtilAtomicLinkedQueueNode *) cast_chk(oldVal, [RxInternalUtilAtomicLinkedQueueNode class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeMpscLinkedQueue)
