//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/MessagePassingQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilUnsafeMessagePassingQueue")
#ifdef RESTRICT_RxInternalUtilUnsafeMessagePassingQueue
#define INCLUDE_ALL_RxInternalUtilUnsafeMessagePassingQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilUnsafeMessagePassingQueue 1
#endif
#undef RESTRICT_RxInternalUtilUnsafeMessagePassingQueue

#if !defined (RxInternalUtilUnsafeMessagePassingQueue_) && (INCLUDE_ALL_RxInternalUtilUnsafeMessagePassingQueue || defined(INCLUDE_RxInternalUtilUnsafeMessagePassingQueue))
#define RxInternalUtilUnsafeMessagePassingQueue_

/*!
 @brief This is a tagging interface for the queues in this library which implement a subset of the <code>Queue</code> interface
 sufficient for concurrent message passing.
 <br>
 Message passing queues offer happens before semantics to messages passed through, namely that writes made by the
 producer before offering the message are visible to the consuming thread after the message has been polled out of the
 queue.
 @author nitsanw
 */
@protocol RxInternalUtilUnsafeMessagePassingQueue < JavaObject >

/*!
 @brief Called from a producer thread subject to the restrictions appropriate to the implementation and according to the
 <code>Queue.offer(Object)</code> interface.
 @param message
 @return true if element was inserted into the queue, false iff full
 */
- (jboolean)offerWithId:(id)message;

/*!
 @brief Called from the consumer thread subject to the restrictions appropriate to the implementation and according to
 the <code>Queue.poll()</code> interface.
 @return a message from the queue if one is available, null iff empty
 */
- (id)poll;

/*!
 @brief Called from the consumer thread subject to the restrictions appropriate to the implementation and according to
 the <code>Queue.peek()</code> interface.
 @return a message from the queue if one is available, null iff empty
 */
- (id)peek;

/*!
 @brief This method's accuracy is subject to concurrent modifications happening as the size is estimated and as such is a
 best effort rather than absolute value.
 For some implementations this method may be O(n) rather than O(1).
 @return number of messages in the queue, between 0 and queue capacity or <code>Integer.MAX_VALUE</code> if not bounded
 */
- (jint)size;

/*!
 @brief This method's accuracy is subject to concurrent modifications happening as the observation is carried out.
 @return true if empty, false otherwise
 */
- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeMessagePassingQueue)

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeMessagePassingQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilUnsafeMessagePassingQueue")
