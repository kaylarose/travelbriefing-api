//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/QueueProgressIndicators.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilUnsafeQueueProgressIndicators")
#ifdef RESTRICT_RxInternalUtilUnsafeQueueProgressIndicators
#define INCLUDE_ALL_RxInternalUtilUnsafeQueueProgressIndicators 0
#else
#define INCLUDE_ALL_RxInternalUtilUnsafeQueueProgressIndicators 1
#endif
#undef RESTRICT_RxInternalUtilUnsafeQueueProgressIndicators

#if !defined (RxInternalUtilUnsafeQueueProgressIndicators_) && (INCLUDE_ALL_RxInternalUtilUnsafeQueueProgressIndicators || defined(INCLUDE_RxInternalUtilUnsafeQueueProgressIndicators))
#define RxInternalUtilUnsafeQueueProgressIndicators_

/*!
 @brief This interface is provided for monitoring purposes only and is only available on queues where it is easy to
 provide it.
 The producer/consumer progress indicators usually correspond with the number of elements
 offered/polled, but they are not guaranteed to maintain that semantic.
 @author nitsanw
 */
@protocol RxInternalUtilUnsafeQueueProgressIndicators < JavaObject >

/*!
 @brief This method has no concurrent visibility semantics.
 The value returned may be negative. Under normal
 circumstances 2 consecutive calls to this method can offer an idea of progress made by producer threads
 by subtracting the 2 results though in extreme cases (if producers have progressed by more than 2^64)
 this may also fail.<br/>
 This value will normally indicate number of elements passed into the queue, but may under some
 circumstances be a derivative of that figure. This method should not be used to derive size or
 emptiness.
 @return the current value of the producer progress index
 */
- (jlong)currentProducerIndex;

/*!
 @brief This method has no concurrent visibility semantics.
 The value returned may be negative. Under normal
 circumstances 2 consecutive calls to this method can offer an idea of progress made by consumer threads
 by subtracting the 2 results though in extreme cases (if consumers have progressed by more than 2^64)
 this may also fail.<br/>
 This value will normally indicate number of elements taken out of the queue, but may under some
 circumstances be a derivative of that figure. This method should not be used to derive size or
 emptiness.
 @return the current value of the consumer progress index
 */
- (jlong)currentConsumerIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeQueueProgressIndicators)

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeQueueProgressIndicators)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilUnsafeQueueProgressIndicators")
