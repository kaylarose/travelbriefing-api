//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/BaseLinkedQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue")
#ifdef RESTRICT_RxInternalUtilUnsafeBaseLinkedQueue
#define INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue 1
#endif
#undef RESTRICT_RxInternalUtilUnsafeBaseLinkedQueue
#ifdef INCLUDE_RxInternalUtilUnsafeBaseLinkedQueue
#define INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef
#define INCLUDE_RxInternalUtilUnsafeBaseLinkedQueuePad1 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeBaseLinkedQueuePad1
#define INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef 1
#endif
#ifdef INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef
#define INCLUDE_RxInternalUtilUnsafeBaseLinkedQueuePad0 1
#endif

#if !defined (RxInternalUtilUnsafeBaseLinkedQueuePad0_) && (INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue || defined(INCLUDE_RxInternalUtilUnsafeBaseLinkedQueuePad0))
#define RxInternalUtilUnsafeBaseLinkedQueuePad0_

#define RESTRICT_JavaUtilAbstractQueue 1
#define INCLUDE_JavaUtilAbstractQueue 1
#include "java/util/AbstractQueue.h"

@interface RxInternalUtilUnsafeBaseLinkedQueuePad0 : JavaUtilAbstractQueue {
 @public
  jlong p00_, p01_, p02_, p03_, p04_, p05_, p06_, p07_;
  jlong p30_, p31_, p32_, p33_, p34_, p35_, p36_, p37_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeBaseLinkedQueuePad0)

FOUNDATION_EXPORT void RxInternalUtilUnsafeBaseLinkedQueuePad0_init(RxInternalUtilUnsafeBaseLinkedQueuePad0 *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeBaseLinkedQueuePad0)

#endif

#if !defined (RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_) && (INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue || defined(INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef))
#define RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_

@class RxInternalUtilAtomicLinkedQueueNode;

@interface RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef : RxInternalUtilUnsafeBaseLinkedQueuePad0 {
 @public
  RxInternalUtilAtomicLinkedQueueNode *producerNode_;
}

+ (jlong)P_NODE_OFFSET;

#pragma mark Protected

- (RxInternalUtilAtomicLinkedQueueNode *)lpProducerNode;

- (RxInternalUtilAtomicLinkedQueueNode *)lvProducerNode;

- (void)spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef)

J2OBJC_FIELD_SETTER(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef, producerNode_, RxInternalUtilAtomicLinkedQueueNode *)

inline jlong RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_get_P_NODE_OFFSET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_P_NODE_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef, P_NODE_OFFSET, jlong)

FOUNDATION_EXPORT void RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef_init(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef)

#endif

#if !defined (RxInternalUtilUnsafeBaseLinkedQueuePad1_) && (INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue || defined(INCLUDE_RxInternalUtilUnsafeBaseLinkedQueuePad1))
#define RxInternalUtilUnsafeBaseLinkedQueuePad1_

@interface RxInternalUtilUnsafeBaseLinkedQueuePad1 : RxInternalUtilUnsafeBaseLinkedQueueProducerNodeRef {
 @public
  jlong p00_BaseLinkedQueuePad1_, p01_BaseLinkedQueuePad1_, p02_BaseLinkedQueuePad1_, p03_BaseLinkedQueuePad1_, p04_BaseLinkedQueuePad1_, p05_BaseLinkedQueuePad1_, p06_BaseLinkedQueuePad1_, p07_BaseLinkedQueuePad1_;
  jlong p30_BaseLinkedQueuePad1_, p31_BaseLinkedQueuePad1_, p32_BaseLinkedQueuePad1_, p33_BaseLinkedQueuePad1_, p34_BaseLinkedQueuePad1_, p35_BaseLinkedQueuePad1_, p36_BaseLinkedQueuePad1_, p37_BaseLinkedQueuePad1_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeBaseLinkedQueuePad1)

FOUNDATION_EXPORT void RxInternalUtilUnsafeBaseLinkedQueuePad1_init(RxInternalUtilUnsafeBaseLinkedQueuePad1 *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeBaseLinkedQueuePad1)

#endif

#if !defined (RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef_) && (INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue || defined(INCLUDE_RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef))
#define RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef_

@class RxInternalUtilAtomicLinkedQueueNode;

@interface RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef : RxInternalUtilUnsafeBaseLinkedQueuePad1 {
 @public
  RxInternalUtilAtomicLinkedQueueNode *consumerNode_;
}

+ (jlong)C_NODE_OFFSET;

#pragma mark Protected

- (RxInternalUtilAtomicLinkedQueueNode *)lpConsumerNode;

- (RxInternalUtilAtomicLinkedQueueNode *)lvConsumerNode;

- (void)spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef)

J2OBJC_FIELD_SETTER(RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef, consumerNode_, RxInternalUtilAtomicLinkedQueueNode *)

inline jlong RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef_get_C_NODE_OFFSET();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef_C_NODE_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef, C_NODE_OFFSET, jlong)

FOUNDATION_EXPORT void RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef_init(RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef)

#endif

#if !defined (RxInternalUtilUnsafeBaseLinkedQueue_) && (INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue || defined(INCLUDE_RxInternalUtilUnsafeBaseLinkedQueue))
#define RxInternalUtilUnsafeBaseLinkedQueue_

@protocol JavaUtilIterator;

/*!
 @brief A base data structure for concurrent linked queues.
 @author nitsanw
 */
@interface RxInternalUtilUnsafeBaseLinkedQueue : RxInternalUtilUnsafeBaseLinkedQueueConsumerNodeRef {
 @public
  jlong p00_BaseLinkedQueue_, p01_BaseLinkedQueue_, p02_BaseLinkedQueue_, p03_BaseLinkedQueue_, p04_BaseLinkedQueue_, p05_BaseLinkedQueue_, p06_BaseLinkedQueue_, p07_BaseLinkedQueue_;
  jlong p30_BaseLinkedQueue_, p31_BaseLinkedQueue_, p32_BaseLinkedQueue_, p33_BaseLinkedQueue_, p34_BaseLinkedQueue_, p35_BaseLinkedQueue_, p36_BaseLinkedQueue_, p37_BaseLinkedQueue_;
}

#pragma mark Public

/*!
 @brief  <br>
 <p>
 IMPLEMENTATION NOTES:<br>
 Queue is empty when producerNode is the same as consumerNode.
 An alternative implementation would be to observe
 the producerNode.value is null, which also means an empty queue because only the consumerNode.value is allowed to
 be null.
 - seealso: MessagePassingQueue#isEmpty()
 */
- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

/*!
 @brief  <br>
 <p>
 IMPLEMENTATION NOTES:<br>
 This is an O(n) operation as we run through all the nodes and count them.
 <br>
 - seealso: java.util.Queue#size()
 */
- (jint)size;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilUnsafeBaseLinkedQueue)

FOUNDATION_EXPORT void RxInternalUtilUnsafeBaseLinkedQueue_init(RxInternalUtilUnsafeBaseLinkedQueue *self);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilUnsafeBaseLinkedQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilUnsafeBaseLinkedQueue")
