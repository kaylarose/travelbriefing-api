//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/unsafe/SpscLinkedQueue.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "rx/internal/util/atomic/LinkedQueueNode.h"
#include "rx/internal/util/unsafe/BaseLinkedQueue.h"
#include "rx/internal/util/unsafe/SpscLinkedQueue.h"

@implementation RxInternalUtilUnsafeSpscLinkedQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilUnsafeSpscLinkedQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)offerWithId:(id)nextValue {
  if (nextValue == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"null elements not allowed");
  }
  RxInternalUtilAtomicLinkedQueueNode *nextNode = new_RxInternalUtilAtomicLinkedQueueNode_initWithId_(nextValue);
  [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(producerNode_)) soNextWithRxInternalUtilAtomicLinkedQueueNode:nextNode];
  producerNode_ = nextNode;
  return true;
}

- (id)poll {
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(consumerNode_)) lvNext];
  if (nextNode != nil) {
    id nextValue = [nextNode getAndNullValue];
    consumerNode_ = nextNode;
    return nextValue;
  }
  return nil;
}

- (id)peek {
  RxInternalUtilAtomicLinkedQueueNode *nextNode = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(consumerNode_)) lvNext];
  if (nextNode != nil) {
    return [nextNode lpValue];
  }
  else {
    return nil;
  }
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "offerWithId:", "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { "poll", "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { "peek", "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "offer", "LNSObject;", "(TE;)Z", "()TE;", "<E:Ljava/lang/Object;>Lrx/internal/util/unsafe/BaseLinkedQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilUnsafeSpscLinkedQueue = { "SpscLinkedQueue", "rx.internal.util.unsafe", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, 4, -1 };
  return &_RxInternalUtilUnsafeSpscLinkedQueue;
}

@end

void RxInternalUtilUnsafeSpscLinkedQueue_init(RxInternalUtilUnsafeSpscLinkedQueue *self) {
  RxInternalUtilUnsafeBaseLinkedQueue_init(self);
  [self spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:new_RxInternalUtilAtomicLinkedQueueNode_init()];
  [self spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:self->producerNode_];
  [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(self->consumerNode_)) soNextWithRxInternalUtilAtomicLinkedQueueNode:nil];
}

RxInternalUtilUnsafeSpscLinkedQueue *new_RxInternalUtilUnsafeSpscLinkedQueue_init() {
  J2OBJC_NEW_IMPL(RxInternalUtilUnsafeSpscLinkedQueue, init)
}

RxInternalUtilUnsafeSpscLinkedQueue *create_RxInternalUtilUnsafeSpscLinkedQueue_init() {
  J2OBJC_CREATE_IMPL(RxInternalUtilUnsafeSpscLinkedQueue, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilUnsafeSpscLinkedQueue)
