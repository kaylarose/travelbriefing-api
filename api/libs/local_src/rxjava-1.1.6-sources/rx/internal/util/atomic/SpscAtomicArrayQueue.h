//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/atomic/SpscAtomicArrayQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilAtomicSpscAtomicArrayQueue")
#ifdef RESTRICT_RxInternalUtilAtomicSpscAtomicArrayQueue
#define INCLUDE_ALL_RxInternalUtilAtomicSpscAtomicArrayQueue 0
#else
#define INCLUDE_ALL_RxInternalUtilAtomicSpscAtomicArrayQueue 1
#endif
#undef RESTRICT_RxInternalUtilAtomicSpscAtomicArrayQueue

#if !defined (RxInternalUtilAtomicSpscAtomicArrayQueue_) && (INCLUDE_ALL_RxInternalUtilAtomicSpscAtomicArrayQueue || defined(INCLUDE_RxInternalUtilAtomicSpscAtomicArrayQueue))
#define RxInternalUtilAtomicSpscAtomicArrayQueue_

#define RESTRICT_RxInternalUtilAtomicAtomicReferenceArrayQueue 1
#define INCLUDE_RxInternalUtilAtomicAtomicReferenceArrayQueue 1
#include "rx/internal/util/atomic/AtomicReferenceArrayQueue.h"

@class JavaUtilConcurrentAtomicAtomicLong;

/*!
 @brief A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.
 <p>
 This implementation is a mashup of the <a href="http://sourceforge.net/projects/mc-fastflow/">Fast Flow</a>
 algorithm with an optimization of the offer method taken from the <a
 href="http://staff.ustc.edu.cn/~bhua/publications/IJPP_draft.pdf">BQueue</a> algorithm (a variation on Fast
 Flow), and adjusted to comply with Queue.offer semantics with regards to capacity.<br>
 For convenience the relevant papers are available in the resources folder:<br>
 <i>2010 - Pisa - SPSC Queues on Shared Cache Multi-Core Systems.pdf<br>
 2012 - Junchang- BQueue- Efficient and Practical Queuing.pdf <br>
 </i> This implementation is wait free.
 */
@interface RxInternalUtilAtomicSpscAtomicArrayQueue : RxInternalUtilAtomicAtomicReferenceArrayQueue {
 @public
  JavaUtilConcurrentAtomicAtomicLong *producerIndex_;
  jlong producerLookAhead_;
  JavaUtilConcurrentAtomicAtomicLong *consumerIndex_;
  jint lookAheadStep_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)capacity;

- (jboolean)isEmpty;

- (jboolean)offerWithId:(id)e;

- (id)peek;

- (id)poll;

- (jint)size;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(RxInternalUtilAtomicSpscAtomicArrayQueue)

J2OBJC_FIELD_SETTER(RxInternalUtilAtomicSpscAtomicArrayQueue, producerIndex_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(RxInternalUtilAtomicSpscAtomicArrayQueue, consumerIndex_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(RxInternalUtilAtomicSpscAtomicArrayQueue *self, jint capacity);

FOUNDATION_EXPORT RxInternalUtilAtomicSpscAtomicArrayQueue *new_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilAtomicSpscAtomicArrayQueue *create_RxInternalUtilAtomicSpscAtomicArrayQueue_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilAtomicSpscAtomicArrayQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilAtomicSpscAtomicArrayQueue")
