//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/atomic/BaseLinkedAtomicQueue.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractQueue.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/internal/util/atomic/BaseLinkedAtomicQueue.h"
#include "rx/internal/util/atomic/LinkedQueueNode.h"

@interface RxInternalUtilAtomicBaseLinkedAtomicQueue () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *producerNode_;
  JavaUtilConcurrentAtomicAtomicReference *consumerNode_;
}

@end

J2OBJC_FIELD_SETTER(RxInternalUtilAtomicBaseLinkedAtomicQueue, producerNode_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxInternalUtilAtomicBaseLinkedAtomicQueue, consumerNode_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilAtomicBaseLinkedAtomicQueue_lvProducerNode(RxInternalUtilAtomicBaseLinkedAtomicQueue *self);

__attribute__((unused)) static RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilAtomicBaseLinkedAtomicQueue_lvConsumerNode(RxInternalUtilAtomicBaseLinkedAtomicQueue *self);

@implementation RxInternalUtilAtomicBaseLinkedAtomicQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalUtilAtomicBaseLinkedAtomicQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxInternalUtilAtomicLinkedQueueNode *)lvProducerNode {
  return RxInternalUtilAtomicBaseLinkedAtomicQueue_lvProducerNode(self);
}

- (RxInternalUtilAtomicLinkedQueueNode *)lpProducerNode {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producerNode_)) get];
}

- (void)spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producerNode_)) lazySetWithId:node];
}

- (RxInternalUtilAtomicLinkedQueueNode *)xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(producerNode_)) getAndSetWithId:node];
}

- (RxInternalUtilAtomicLinkedQueueNode *)lvConsumerNode {
  return RxInternalUtilAtomicBaseLinkedAtomicQueue_lvConsumerNode(self);
}

- (RxInternalUtilAtomicLinkedQueueNode *)lpConsumerNode {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(consumerNode_)) get];
}

- (void)spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:(RxInternalUtilAtomicLinkedQueueNode *)node {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(consumerNode_)) lazySetWithId:node];
}

- (id<JavaUtilIterator>)iterator {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jint)size {
  RxInternalUtilAtomicLinkedQueueNode *chaserNode = RxInternalUtilAtomicBaseLinkedAtomicQueue_lvConsumerNode(self);
  RxInternalUtilAtomicLinkedQueueNode *producerNode = RxInternalUtilAtomicBaseLinkedAtomicQueue_lvProducerNode(self);
  jint size = 0;
  while (chaserNode != producerNode && size < JavaLangInteger_MAX_VALUE) {
    RxInternalUtilAtomicLinkedQueueNode *next;
    while ((next = [((RxInternalUtilAtomicLinkedQueueNode *) nil_chk(chaserNode)) lvNext]) == nil) ;
    chaserNode = next;
    size++;
  }
  return size;
}

- (jboolean)isEmpty {
  return RxInternalUtilAtomicBaseLinkedAtomicQueue_lvConsumerNode(self) == RxInternalUtilAtomicBaseLinkedAtomicQueue_lvProducerNode(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "lvProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 0, -1, -1 },
    { "lpProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 0, -1, -1 },
    { "spProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:", "V", 0x14, 1, 2, -1, 3, -1, -1 },
    { "xchgProducerNodeWithRxInternalUtilAtomicLinkedQueueNode:", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, 4, 2, -1, 5, -1, -1 },
    { "lvConsumerNode", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 0, -1, -1 },
    { "lpConsumerNode", "LRxInternalUtilAtomicLinkedQueueNode;", 0x14, -1, -1, -1, 0, -1, -1 },
    { "spConsumerNodeWithRxInternalUtilAtomicLinkedQueueNode:", "V", 0x14, 6, 2, -1, 3, -1, -1 },
    { "iterator", "LJavaUtilIterator;", 0x11, -1, -1, -1, 7, -1, -1 },
    { "size", "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "producerNode_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "consumerNode_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "()Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", "spProducerNode", "LRxInternalUtilAtomicLinkedQueueNode;", "(Lrx/internal/util/atomic/LinkedQueueNode<TE;>;)V", "xchgProducerNode", "(Lrx/internal/util/atomic/LinkedQueueNode<TE;>;)Lrx/internal/util/atomic/LinkedQueueNode<TE;>;", "spConsumerNode", "()Ljava/util/Iterator<TE;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lrx/internal/util/atomic/LinkedQueueNode<TE;>;>;", "<E:Ljava/lang/Object;>Ljava/util/AbstractQueue<TE;>;" };
  static const J2ObjcClassInfo _RxInternalUtilAtomicBaseLinkedAtomicQueue = { "BaseLinkedAtomicQueue", "rx.internal.util.atomic", ptrTable, methods, fields, 7, 0x400, 11, 2, -1, -1, -1, 9, -1 };
  return &_RxInternalUtilAtomicBaseLinkedAtomicQueue;
}

@end

void RxInternalUtilAtomicBaseLinkedAtomicQueue_init(RxInternalUtilAtomicBaseLinkedAtomicQueue *self) {
  JavaUtilAbstractQueue_init(self);
  self->producerNode_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
  self->consumerNode_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
}

RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilAtomicBaseLinkedAtomicQueue_lvProducerNode(RxInternalUtilAtomicBaseLinkedAtomicQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->producerNode_)) get];
}

RxInternalUtilAtomicLinkedQueueNode *RxInternalUtilAtomicBaseLinkedAtomicQueue_lvConsumerNode(RxInternalUtilAtomicBaseLinkedAtomicQueue *self) {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->consumerNode_)) get];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalUtilAtomicBaseLinkedAtomicQueue)
