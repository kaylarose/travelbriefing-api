//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/util/LinkedArrayList.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalUtilLinkedArrayList")
#ifdef RESTRICT_RxInternalUtilLinkedArrayList
#define INCLUDE_ALL_RxInternalUtilLinkedArrayList 0
#else
#define INCLUDE_ALL_RxInternalUtilLinkedArrayList 1
#endif
#undef RESTRICT_RxInternalUtilLinkedArrayList

#if !defined (RxInternalUtilLinkedArrayList_) && (INCLUDE_ALL_RxInternalUtilLinkedArrayList || defined(INCLUDE_RxInternalUtilLinkedArrayList))
#define RxInternalUtilLinkedArrayList_

@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief A list implementation which combines an ArrayList with a LinkedList to 
 avoid copying values when the capacity needs to be increased.
 <p>
 The class is non final to allow embedding it directly and thus saving on object allocation.
 */
@interface RxInternalUtilLinkedArrayList : NSObject {
 @public
  /*!
   @brief The capacity of each array segment.
   */
  jint capacityHint_;
  /*!
   @brief Contains the head of the linked array list if not null.
   The 
 length is always capacityHint + 1 and the last element is an Object[] pointing
 to the next element of the linked array list.
   */
  IOSObjectArray *head_;
  /*!
   @brief The tail array where new elements will be added.
   */
  IOSObjectArray *tail_;
  /*!
   @brief The total size of the list; written after elements have been added (release) and
 and when read, the value indicates how many elements can be safely read (acquire).
   */
  volatile_jint size_;
  /*!
   @brief The next available slot in the current tail.
   */
  jint indexInTail_;
}

#pragma mark Public

/*!
 @brief Constructor with the capacity hint of each array segment.
 @param capacityHint
 */
- (instancetype)initWithInt:(jint)capacityHint;

/*!
 @brief Adds a new element to this list.
 @param o the object to add, nulls are accepted
 */
- (void)addWithId:(id)o;

/*!
 @brief Returns the capacity hint that indicates the capacity of each buffer segment.
 @return the capacity hint that indicates the capacity of each buffer segment
 */
- (jint)capacityHint;

/*!
 @brief Returns the head buffer segment or null if the list is empty.
 @return the head object array
 */
- (IOSObjectArray *)head;

/*!
 @brief Returns the index of the next slot in the tail buffer segment.
 @return the index of the next slot in the tail buffer segment
 */
- (jint)indexInTail;

/*!
 @brief Returns the total size of the list.
 @return the total size of the list
 */
- (jint)size;

/*!
 @brief Returns the tail buffer segment or null if the list is empty.
 @return the tail object array
 */
- (IOSObjectArray *)tail;

- (NSString *)description;

#pragma mark Package-Private

- (id<JavaUtilList>)toList;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalUtilLinkedArrayList)

J2OBJC_FIELD_SETTER(RxInternalUtilLinkedArrayList, head_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RxInternalUtilLinkedArrayList, tail_, IOSObjectArray *)

FOUNDATION_EXPORT void RxInternalUtilLinkedArrayList_initWithInt_(RxInternalUtilLinkedArrayList *self, jint capacityHint);

FOUNDATION_EXPORT RxInternalUtilLinkedArrayList *new_RxInternalUtilLinkedArrayList_initWithInt_(jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalUtilLinkedArrayList *create_RxInternalUtilLinkedArrayList_initWithInt_(jint capacityHint);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalUtilLinkedArrayList)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalUtilLinkedArrayList")
