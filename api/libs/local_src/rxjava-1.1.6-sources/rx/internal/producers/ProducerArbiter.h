//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/producers/ProducerArbiter.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalProducersProducerArbiter")
#ifdef RESTRICT_RxInternalProducersProducerArbiter
#define INCLUDE_ALL_RxInternalProducersProducerArbiter 0
#else
#define INCLUDE_ALL_RxInternalProducersProducerArbiter 1
#endif
#undef RESTRICT_RxInternalProducersProducerArbiter

#if !defined (RxInternalProducersProducerArbiter_) && (INCLUDE_ALL_RxInternalProducersProducerArbiter || defined(INCLUDE_RxInternalProducersProducerArbiter))
#define RxInternalProducersProducerArbiter_

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

/*!
 @brief Producer that allows changing an underlying producer atomically and correctly resume with the accumulated
 requests.
 */
@interface RxInternalProducersProducerArbiter : NSObject < RxProducer > {
 @public
  jlong requested_;
  id<RxProducer> currentProducer_;
  jboolean emitting_;
  jlong missedRequested_;
  jlong missedProduced_;
  id<RxProducer> missedProducer_;
}

+ (id<RxProducer>)NULL_PRODUCER;

#pragma mark Public

- (instancetype)init;

- (void)emitLoop;

- (void)producedWithLong:(jlong)n;

- (void)requestWithLong:(jlong)n;

- (void)setProducerWithRxProducer:(id<RxProducer>)newProducer;

@end

J2OBJC_STATIC_INIT(RxInternalProducersProducerArbiter)

J2OBJC_FIELD_SETTER(RxInternalProducersProducerArbiter, currentProducer_, id<RxProducer>)
J2OBJC_FIELD_SETTER(RxInternalProducersProducerArbiter, missedProducer_, id<RxProducer>)

inline id<RxProducer> RxInternalProducersProducerArbiter_get_NULL_PRODUCER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<RxProducer> RxInternalProducersProducerArbiter_NULL_PRODUCER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalProducersProducerArbiter, NULL_PRODUCER, id<RxProducer>)

FOUNDATION_EXPORT void RxInternalProducersProducerArbiter_init(RxInternalProducersProducerArbiter *self);

FOUNDATION_EXPORT RxInternalProducersProducerArbiter *new_RxInternalProducersProducerArbiter_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalProducersProducerArbiter *create_RxInternalProducersProducerArbiter_init();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalProducersProducerArbiter)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalProducersProducerArbiter")
