//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/producers/SingleProducer.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalProducersSingleProducer")
#ifdef RESTRICT_RxInternalProducersSingleProducer
#define INCLUDE_ALL_RxInternalProducersSingleProducer 0
#else
#define INCLUDE_ALL_RxInternalProducersSingleProducer 1
#endif
#undef RESTRICT_RxInternalProducersSingleProducer

#if !defined (RxInternalProducersSingleProducer_) && (INCLUDE_ALL_RxInternalProducersSingleProducer || defined(INCLUDE_RxInternalProducersSingleProducer))
#define RxInternalProducersSingleProducer_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_RxProducer 1
#define INCLUDE_RxProducer 1
#include "rx/Producer.h"

@class RxSubscriber;

/*!
 @brief A producer which emits a single value and completes the child on the first positive request.
 */
@interface RxInternalProducersSingleProducer : JavaUtilConcurrentAtomicAtomicBoolean < RxProducer > {
 @public
  /*!
   @brief The child subscriber.
   */
  RxSubscriber *child_;
  /*!
   @brief The value to be emitted.
   */
  id value_SingleProducer_;
}

#pragma mark Public

/*!
 @brief Constructs the producer with the given target child and value to be emitted.
 @param child the child subscriber, non-null
 @param value the value to be emitted, may be null
 */
- (instancetype)initWithRxSubscriber:(RxSubscriber *)child
                              withId:(id)value;

- (void)requestWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalProducersSingleProducer)

J2OBJC_FIELD_SETTER(RxInternalProducersSingleProducer, child_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxInternalProducersSingleProducer, value_SingleProducer_, id)

FOUNDATION_EXPORT void RxInternalProducersSingleProducer_initWithRxSubscriber_withId_(RxInternalProducersSingleProducer *self, RxSubscriber *child, id value);

FOUNDATION_EXPORT RxInternalProducersSingleProducer *new_RxInternalProducersSingleProducer_initWithRxSubscriber_withId_(RxSubscriber *child, id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalProducersSingleProducer *create_RxInternalProducersSingleProducer_initWithRxSubscriber_withId_(RxSubscriber *child, id value);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalProducersSingleProducer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalProducersSingleProducer")
