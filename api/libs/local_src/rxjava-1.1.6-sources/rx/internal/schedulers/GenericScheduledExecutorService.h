//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/GenericScheduledExecutorService.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersGenericScheduledExecutorService")
#ifdef RESTRICT_RxInternalSchedulersGenericScheduledExecutorService
#define INCLUDE_ALL_RxInternalSchedulersGenericScheduledExecutorService 0
#else
#define INCLUDE_ALL_RxInternalSchedulersGenericScheduledExecutorService 1
#endif
#undef RESTRICT_RxInternalSchedulersGenericScheduledExecutorService

#if !defined (RxInternalSchedulersGenericScheduledExecutorService_) && (INCLUDE_ALL_RxInternalSchedulersGenericScheduledExecutorService || defined(INCLUDE_RxInternalSchedulersGenericScheduledExecutorService))
#define RxInternalSchedulersGenericScheduledExecutorService_

#define RESTRICT_RxInternalSchedulersSchedulerLifecycle 1
#define INCLUDE_RxInternalSchedulersSchedulerLifecycle 1
#include "rx/internal/schedulers/SchedulerLifecycle.h"

@protocol JavaUtilConcurrentScheduledExecutorService;

/*!
 @brief A default <code>ScheduledExecutorService</code> that can be used for scheduling actions when a <code>Scheduler</code> implementation doesn't have that ability.
 <p>
 For example if a <code>Scheduler</code> is given an <code>Executor</code> or {<code>ExecutorService</code> instead of <code>ScheduledExecutorService</code>.
 <p>
 NOTE: No actual work should be done on tasks submitted to this executor. Submit a task with the appropriate delay which then in turn invokes
 the work asynchronously on the appropriate <code>Scheduler</code> implementation. This means for example that you would not use this approach
 along with <code>TrampolineScheduler</code> or <code>ImmediateScheduler</code>.
 */
@interface RxInternalSchedulersGenericScheduledExecutorService : NSObject < RxInternalSchedulersSchedulerLifecycle >

+ (RxInternalSchedulersGenericScheduledExecutorService *)INSTANCE;

#pragma mark Public

/*!
 @brief Returns one of the single-threaded ScheduledExecutorService helper executors.
 @return <code>ScheduledExecutorService</code> for generic use.
 */
+ (id<JavaUtilConcurrentScheduledExecutorService>)getInstance;

- (void)shutdown;

- (void)start;

@end

J2OBJC_STATIC_INIT(RxInternalSchedulersGenericScheduledExecutorService)

inline RxInternalSchedulersGenericScheduledExecutorService *RxInternalSchedulersGenericScheduledExecutorService_get_INSTANCE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxInternalSchedulersGenericScheduledExecutorService *RxInternalSchedulersGenericScheduledExecutorService_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxInternalSchedulersGenericScheduledExecutorService, INSTANCE, RxInternalSchedulersGenericScheduledExecutorService *)

FOUNDATION_EXPORT id<JavaUtilConcurrentScheduledExecutorService> RxInternalSchedulersGenericScheduledExecutorService_getInstance();

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersGenericScheduledExecutorService)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersGenericScheduledExecutorService")
