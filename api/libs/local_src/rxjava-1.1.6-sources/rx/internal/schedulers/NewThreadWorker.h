//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/NewThreadWorker.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorker")
#ifdef RESTRICT_RxInternalSchedulersNewThreadWorker
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorker 0
#else
#define INCLUDE_ALL_RxInternalSchedulersNewThreadWorker 1
#endif
#undef RESTRICT_RxInternalSchedulersNewThreadWorker

#if !defined (RxInternalSchedulersNewThreadWorker_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadWorker || defined(INCLUDE_RxInternalSchedulersNewThreadWorker))
#define RxInternalSchedulersNewThreadWorker_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler_Worker 1
#include "rx/Scheduler.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaLangReflectMethod;
@class JavaUtilConcurrentScheduledThreadPoolExecutor;
@class JavaUtilConcurrentTimeUnit;
@class RxInternalSchedulersScheduledAction;
@class RxInternalUtilSubscriptionList;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilConcurrentScheduledExecutorService;
@protocol JavaUtilConcurrentThreadFactory;
@protocol RxFunctionsAction0;

/*!
  class description missing
 */
@interface RxInternalSchedulersNewThreadWorker : RxScheduler_Worker < RxSubscription > {
 @public
  volatile_jboolean isUnsubscribed_;
}

+ (jint)PURGE_FREQUENCY;

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Deregisters the executor service.
 <p><code>public</code> visibility reason: called from other package(s) within RxJava
 @param service a scheduled thread pool executor instance
 */
+ (void)deregisterExecutorWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)service;

- (jboolean)isUnsubscribed;

/*!
 @brief Registers the given executor service and starts the purge thread if not already started.
 <p><code>public</code> visibility reason: called from other package(s) within RxJava
 @param service a scheduled thread pool executor instance
 */
+ (void)registerExecutorWithJavaUtilConcurrentScheduledThreadPoolExecutor:(JavaUtilConcurrentScheduledThreadPoolExecutor *)service;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Schedules the given action by wrapping it into a ScheduledAction on the
 underlying ExecutorService, returning the ScheduledAction.
 @param action the action to wrap and schedule
 @param delayTime the delay in execution
 @param unit the time unit of the delay
 @return the wrapper ScheduledAction
 */
- (RxInternalSchedulersScheduledAction *)scheduleActualWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                                     withLong:(jlong)delayTime
                                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (RxInternalSchedulersScheduledAction *)scheduleActualWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                                     withLong:(jlong)delayTime
                                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                     withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent;

- (RxInternalSchedulersScheduledAction *)scheduleActualWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                                     withLong:(jlong)delayTime
                                               withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                           withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent;

/*!
 @brief Tries to enable the Java 7+ setRemoveOnCancelPolicy.
 <p><code>public</code> visibility reason: called from other package(s) within RxJava.
 If the method returns false, the <code>registerExecutor(ScheduledThreadPoolExecutor)</code> may
 be called to enable the backup option of purging the executors.
 @param executor the executor to call setRemoveOnCaneclPolicy if available.
 @return true if the policy was successfully enabled
 */
+ (jboolean)tryEnableCancelPolicyWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor;

- (void)unsubscribe;

#pragma mark Package-Private

/*!
 @brief Tries to find <code>"setRemoveOnCancelPolicy(boolean)"</code> method in the class of passed executor.
 @param executor whose class will be used to search for required method.
 @return <code>"setRemoveOnCancelPolicy(boolean)"</code> <code>Method</code>
 or <code>null</code> if required <code>Method</code> was not found.
 */
+ (JavaLangReflectMethod *)findSetRemoveOnCancelPolicyMethodWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor;

/*!
 @brief Purges each registered executor and eagerly evicts shutdown executors.
 */
+ (void)purgeExecutors;

@end

J2OBJC_STATIC_INIT(RxInternalSchedulersNewThreadWorker)

/*!
 @brief The purge frequency in milliseconds.
 */
inline jint RxInternalSchedulersNewThreadWorker_get_PURGE_FREQUENCY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint RxInternalSchedulersNewThreadWorker_PURGE_FREQUENCY;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxInternalSchedulersNewThreadWorker, PURGE_FREQUENCY, jint)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorker_registerExecutorWithJavaUtilConcurrentScheduledThreadPoolExecutor_(JavaUtilConcurrentScheduledThreadPoolExecutor *service);

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorker_deregisterExecutorWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> service);

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorker_purgeExecutors();

FOUNDATION_EXPORT jboolean RxInternalSchedulersNewThreadWorker_tryEnableCancelPolicyWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor);

FOUNDATION_EXPORT JavaLangReflectMethod *RxInternalSchedulersNewThreadWorker_findSetRemoveOnCancelPolicyMethodWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> executor);

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersNewThreadWorker *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorker *new_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadWorker *create_RxInternalSchedulersNewThreadWorker_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadWorker)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadWorker")
