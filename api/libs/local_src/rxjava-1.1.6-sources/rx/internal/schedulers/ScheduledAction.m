//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/ScheduledAction.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/Subscription.h"
#include "rx/exceptions/OnErrorNotImplementedException.h"
#include "rx/functions/Action0.h"
#include "rx/internal/schedulers/ScheduledAction.h"
#include "rx/internal/util/SubscriptionList.h"
#include "rx/plugins/RxJavaErrorHandler.h"
#include "rx/plugins/RxJavaPlugins.h"
#include "rx/subscriptions/CompositeSubscription.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

/*!
 */
inline jlong RxInternalSchedulersScheduledAction_get_serialVersionUID();
#define RxInternalSchedulersScheduledAction_serialVersionUID -3962399486978279857LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalSchedulersScheduledAction, serialVersionUID, jlong)

/*!
 @brief Cancels the captured future if the caller of the call method
 is not the same as the runner of the outer ScheduledAction to
 prevent unnecessary self-interrupting if the unsubscription
 happens from the same thread.
 */
@interface RxInternalSchedulersScheduledAction_FutureCompleter : NSObject < RxSubscription > {
 @public
  RxInternalSchedulersScheduledAction *this$0_;
  id<JavaUtilConcurrentFuture> f_;
}

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)outer$
                               withJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersScheduledAction_FutureCompleter)

J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_FutureCompleter, this$0_, RxInternalSchedulersScheduledAction *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_FutureCompleter, f_, id<JavaUtilConcurrentFuture>)

__attribute__((unused)) static void RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction_FutureCompleter *self, RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f);

__attribute__((unused)) static RxInternalSchedulersScheduledAction_FutureCompleter *new_RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersScheduledAction_FutureCompleter *create_RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersScheduledAction_FutureCompleter)

/*!
 @brief Remove a child subscription from a composite when unsubscribing.
 */
@interface RxInternalSchedulersScheduledAction_Remover : JavaUtilConcurrentAtomicAtomicBoolean < RxSubscription > {
 @public
  RxInternalSchedulersScheduledAction *s_;
  RxSubscriptionsCompositeSubscription *parent_;
}

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)s
                   withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersScheduledAction_Remover)

J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_Remover, s_, RxInternalSchedulersScheduledAction *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_Remover, parent_, RxSubscriptionsCompositeSubscription *)

/*!
 */
inline jlong RxInternalSchedulersScheduledAction_Remover_get_serialVersionUID();
#define RxInternalSchedulersScheduledAction_Remover_serialVersionUID 247232374289553518LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalSchedulersScheduledAction_Remover, serialVersionUID, jlong)

__attribute__((unused)) static void RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction_Remover *self, RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent);

__attribute__((unused)) static RxInternalSchedulersScheduledAction_Remover *new_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersScheduledAction_Remover *create_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersScheduledAction_Remover)

/*!
 @brief Remove a child subscription from a composite when unsubscribing.
 */
@interface RxInternalSchedulersScheduledAction_Remover2 : JavaUtilConcurrentAtomicAtomicBoolean < RxSubscription > {
 @public
  RxInternalSchedulersScheduledAction *s_;
  RxInternalUtilSubscriptionList *parent_;
}

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)s
                         withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent;

- (jboolean)isUnsubscribed;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersScheduledAction_Remover2)

J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_Remover2, s_, RxInternalSchedulersScheduledAction *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction_Remover2, parent_, RxInternalUtilSubscriptionList *)

/*!
 */
inline jlong RxInternalSchedulersScheduledAction_Remover2_get_serialVersionUID();
#define RxInternalSchedulersScheduledAction_Remover2_serialVersionUID 247232374289553518LL
J2OBJC_STATIC_FIELD_CONSTANT(RxInternalSchedulersScheduledAction_Remover2, serialVersionUID, jlong)

__attribute__((unused)) static void RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction_Remover2 *self, RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent);

__attribute__((unused)) static RxInternalSchedulersScheduledAction_Remover2 *new_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersScheduledAction_Remover2 *create_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersScheduledAction_Remover2)

@implementation RxInternalSchedulersScheduledAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(self, action);
  return self;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
  withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent {
  RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(self, action, parent);
  return self;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
        withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent {
  RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(self, action, parent);
  return self;
}

- (void)run {
  @try {
    [self lazySetWithId:JavaLangThread_currentThread()];
    [((id<RxFunctionsAction0>) nil_chk(action_)) call];
  }
  @catch (NSException *e) {
    JavaLangIllegalStateException *ie = nil;
    if ([e isKindOfClass:[RxExceptionsOnErrorNotImplementedException class]]) {
      ie = new_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Exception thrown on Scheduler.Worker thread. Add `onError` handling.", e);
    }
    else {
      ie = new_JavaLangIllegalStateException_initWithNSString_withNSException_(@"Fatal Exception thrown on Scheduler.Worker thread.", e);
    }
    [((RxPluginsRxJavaErrorHandler *) nil_chk([((RxPluginsRxJavaPlugins *) nil_chk(RxPluginsRxJavaPlugins_getInstance())) getErrorHandler])) handleErrorWithNSException:ie];
    JavaLangThread *thread = JavaLangThread_currentThread();
    [((id<JavaLangThread_UncaughtExceptionHandler>) nil_chk([((JavaLangThread *) nil_chk(thread)) getUncaughtExceptionHandler])) uncaughtExceptionWithJavaLangThread:thread withNSException:ie];
  }
  @finally {
    [self unsubscribe];
  }
}

- (jboolean)isUnsubscribed {
  return [((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) isUnsubscribed];
}

- (void)unsubscribe {
  if (![((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) isUnsubscribed]) {
    [cancel_ unsubscribe];
  }
}

- (void)addWithRxSubscription:(id<RxSubscription>)s {
  [((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) addWithRxSubscription:s];
}

- (void)addWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  [((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) addWithRxSubscription:new_RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(self, f)];
}

- (void)addParentWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent {
  [((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) addWithRxSubscription:new_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(self, parent)];
}

- (void)addParentWithRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent {
  [((RxInternalUtilSubscriptionList *) nil_chk(cancel_)) addWithRxSubscription:new_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(self, parent)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsAction0:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "initWithRxFunctionsAction0:withRxSubscriptionsCompositeSubscription:", NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { "initWithRxFunctionsAction0:withRxInternalUtilSubscriptionList:", NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { "run", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "addWithRxSubscription:", "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { "addWithJavaUtilConcurrentFuture:", "V", 0x1, 3, 5, -1, 6, -1, -1 },
    { "addParentWithRxSubscriptionsCompositeSubscription:", "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { "addParentWithRxInternalUtilSubscriptionList:", "V", 0x1, 7, 9, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalSchedulersScheduledAction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "cancel_", "LRxInternalUtilSubscriptionList;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;", "LRxFunctionsAction0;LRxSubscriptionsCompositeSubscription;", "LRxFunctionsAction0;LRxInternalUtilSubscriptionList;", "add", "LRxSubscription;", "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<*>;)V", "addParent", "LRxSubscriptionsCompositeSubscription;", "LRxInternalUtilSubscriptionList;", "LRxInternalSchedulersScheduledAction_FutureCompleter;LRxInternalSchedulersScheduledAction_Remover;LRxInternalSchedulersScheduledAction_Remover2;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;Ljava/lang/Runnable;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxInternalSchedulersScheduledAction = { "ScheduledAction", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 10, 3, -1, 10, -1, 11, -1 };
  return &_RxInternalSchedulersScheduledAction;
}

@end

void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->action_ = action;
  self->cancel_ = new_RxInternalUtilSubscriptionList_init();
}

RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_, action)
}

RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_, action)
}

void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->action_ = action;
  self->cancel_ = new_RxInternalUtilSubscriptionList_initWithRxSubscription_(new_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(self, parent));
}

RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_, action, parent)
}

RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_, action, parent)
}

void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->action_ = action;
  self->cancel_ = new_RxInternalUtilSubscriptionList_initWithRxSubscription_(new_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(self, parent));
}

RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_, action, parent)
}

RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction, initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_, action, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersScheduledAction)

@implementation RxInternalSchedulersScheduledAction_FutureCompleter

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)outer$
                               withJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f {
  RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(self, outer$, f);
  return self;
}

- (void)unsubscribe {
  if ([this$0_ get] != JavaLangThread_currentThread()) {
    [((id<JavaUtilConcurrentFuture>) nil_chk(f_)) cancelWithBoolean:true];
  }
  else {
    [((id<JavaUtilConcurrentFuture>) nil_chk(f_)) cancelWithBoolean:false];
  }
}

- (jboolean)isUnsubscribed {
  return [((id<JavaUtilConcurrentFuture>) nil_chk(f_)) isCancelled];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxInternalSchedulersScheduledAction:withJavaUtilConcurrentFuture:", NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalSchedulersScheduledAction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "f_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalSchedulersScheduledAction;LJavaUtilConcurrentFuture;", "(Lrx/internal/schedulers/ScheduledAction;Ljava/util/concurrent/Future<*>;)V", "Ljava/util/concurrent/Future<*>;", "LRxInternalSchedulersScheduledAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersScheduledAction_FutureCompleter = { "FutureCompleter", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x12, 3, 2, 3, -1, -1, -1, -1 };
  return &_RxInternalSchedulersScheduledAction_FutureCompleter;
}

@end

void RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction_FutureCompleter *self, RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->f_ = f;
}

RxInternalSchedulersScheduledAction_FutureCompleter *new_RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction_FutureCompleter, initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_, outer$, f)
}

RxInternalSchedulersScheduledAction_FutureCompleter *create_RxInternalSchedulersScheduledAction_FutureCompleter_initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_(RxInternalSchedulersScheduledAction *outer$, id<JavaUtilConcurrentFuture> f) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction_FutureCompleter, initWithRxInternalSchedulersScheduledAction_withJavaUtilConcurrentFuture_, outer$, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersScheduledAction_FutureCompleter)

@implementation RxInternalSchedulersScheduledAction_Remover

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)s
                   withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent {
  RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(self, s, parent);
  return self;
}

- (jboolean)isUnsubscribed {
  return [((RxInternalSchedulersScheduledAction *) nil_chk(s_)) isUnsubscribed];
}

- (void)unsubscribe {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxSubscriptionsCompositeSubscription *) nil_chk(parent_)) removeWithRxSubscription:s_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxInternalSchedulersScheduledAction:withRxSubscriptionsCompositeSubscription:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalSchedulersScheduledAction_Remover_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "s_", "LRxInternalSchedulersScheduledAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LRxSubscriptionsCompositeSubscription;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalSchedulersScheduledAction;LRxSubscriptionsCompositeSubscription;", "LRxInternalSchedulersScheduledAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersScheduledAction_Remover = { "Remover", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1a, 3, 3, 1, -1, -1, -1, -1 };
  return &_RxInternalSchedulersScheduledAction_Remover;
}

@end

void RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction_Remover *self, RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  self->s_ = s;
  self->parent_ = parent;
}

RxInternalSchedulersScheduledAction_Remover *new_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction_Remover, initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_, s, parent)
}

RxInternalSchedulersScheduledAction_Remover *create_RxInternalSchedulersScheduledAction_Remover_initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *s, RxSubscriptionsCompositeSubscription *parent) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction_Remover, initWithRxInternalSchedulersScheduledAction_withRxSubscriptionsCompositeSubscription_, s, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersScheduledAction_Remover)

@implementation RxInternalSchedulersScheduledAction_Remover2

- (instancetype)initWithRxInternalSchedulersScheduledAction:(RxInternalSchedulersScheduledAction *)s
                         withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent {
  RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(self, s, parent);
  return self;
}

- (jboolean)isUnsubscribed {
  return [((RxInternalSchedulersScheduledAction *) nil_chk(s_)) isUnsubscribed];
}

- (void)unsubscribe {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((RxInternalUtilSubscriptionList *) nil_chk(parent_)) removeWithRxSubscription:s_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxInternalSchedulersScheduledAction:withRxInternalUtilSubscriptionList:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxInternalSchedulersScheduledAction_Remover2_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "s_", "LRxInternalSchedulersScheduledAction;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LRxInternalUtilSubscriptionList;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalSchedulersScheduledAction;LRxInternalUtilSubscriptionList;", "LRxInternalSchedulersScheduledAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersScheduledAction_Remover2 = { "Remover2", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1a, 3, 3, 1, -1, -1, -1, -1 };
  return &_RxInternalSchedulersScheduledAction_Remover2;
}

@end

void RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction_Remover2 *self, RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  self->s_ = s;
  self->parent_ = parent;
}

RxInternalSchedulersScheduledAction_Remover2 *new_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersScheduledAction_Remover2, initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_, s, parent)
}

RxInternalSchedulersScheduledAction_Remover2 *create_RxInternalSchedulersScheduledAction_Remover2_initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *s, RxInternalUtilSubscriptionList *parent) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersScheduledAction_Remover2, initWithRxInternalSchedulersScheduledAction_withRxInternalUtilSubscriptionList_, s, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersScheduledAction_Remover2)
