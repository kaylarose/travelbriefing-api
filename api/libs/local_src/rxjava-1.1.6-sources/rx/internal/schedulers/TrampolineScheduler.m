//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/TrampolineScheduler.java
//

#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/PriorityBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "rx/Scheduler.h"
#include "rx/Subscription.h"
#include "rx/functions/Action0.h"
#include "rx/internal/schedulers/SleepingAction.h"
#include "rx/internal/schedulers/TrampolineScheduler.h"
#include "rx/subscriptions/BooleanSubscription.h"
#include "rx/subscriptions/Subscriptions.h"

@class RxInternalSchedulersTrampolineScheduler_TimedAction;

@interface RxInternalSchedulersTrampolineScheduler ()

- (instancetype)init;

@end

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_init(RxInternalSchedulersTrampolineScheduler *self);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler *new_RxInternalSchedulersTrampolineScheduler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler *create_RxInternalSchedulersTrampolineScheduler_init();

@interface RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler : RxScheduler_Worker < RxSubscription > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *counter_;
  JavaUtilConcurrentPriorityBlockingQueue *queue_;
  RxSubscriptionsBooleanSubscription *innerSubscription_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
}

- (instancetype)init;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime;

- (void)unsubscribe;

- (jboolean)isUnsubscribed;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, counter_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, queue_, JavaUtilConcurrentPriorityBlockingQueue *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, innerSubscription_, RxSubscriptionsBooleanSubscription *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, wip_, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init();

__attribute__((unused)) static id<RxSubscription> RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

@interface RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 : NSObject < RxFunctionsAction0 > {
 @public
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *this$0_;
  RxInternalSchedulersTrampolineScheduler_TimedAction *val$timedAction_;
}

- (void)call;

- (instancetype)initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxInternalSchedulersTrampolineScheduler_TimedAction:(RxInternalSchedulersTrampolineScheduler_TimedAction *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, this$0_, RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, val$timedAction_, RxInternalSchedulersTrampolineScheduler_TimedAction *)

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *self, RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

@interface RxInternalSchedulersTrampolineScheduler_TimedAction : NSObject < JavaLangComparable > {
 @public
  id<RxFunctionsAction0> action_;
  JavaLangLong *execTime_;
  jint count_;
}

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count;

- (jint)compareToWithId:(RxInternalSchedulersTrampolineScheduler_TimedAction *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersTrampolineScheduler_TimedAction)

J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_TimedAction, action_, id<RxFunctionsAction0>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersTrampolineScheduler_TimedAction, execTime_, JavaLangLong *)

__attribute__((unused)) static void RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxInternalSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_TimedAction *new_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxInternalSchedulersTrampolineScheduler_TimedAction *create_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersTrampolineScheduler_TimedAction)

J2OBJC_INITIALIZED_DEFN(RxInternalSchedulersTrampolineScheduler)

RxInternalSchedulersTrampolineScheduler *RxInternalSchedulersTrampolineScheduler_INSTANCE;

@implementation RxInternalSchedulersTrampolineScheduler

+ (RxInternalSchedulersTrampolineScheduler *)INSTANCE {
  return RxInternalSchedulersTrampolineScheduler_INSTANCE;
}

- (RxScheduler_Worker *)createWorker {
  return new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersTrampolineScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y {
  return RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createWorker", "LRxScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "init", NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { "compareWithInt:withInt:", "I", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LRxInternalSchedulersTrampolineScheduler;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "II", &RxInternalSchedulersTrampolineScheduler_INSTANCE, "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;LRxInternalSchedulersTrampolineScheduler_TimedAction;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler = { "TrampolineScheduler", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, 3, -1, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler;
}

+ (void)initialize {
  if (self == [RxInternalSchedulersTrampolineScheduler class]) {
    RxInternalSchedulersTrampolineScheduler_INSTANCE = new_RxInternalSchedulersTrampolineScheduler_init();
    J2OBJC_SET_INITIALIZED(RxInternalSchedulersTrampolineScheduler)
  }
}

@end

void RxInternalSchedulersTrampolineScheduler_init(RxInternalSchedulersTrampolineScheduler *self) {
  RxScheduler_init(self);
}

RxInternalSchedulersTrampolineScheduler *new_RxInternalSchedulersTrampolineScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler, init)
}

RxInternalSchedulersTrampolineScheduler *create_RxInternalSchedulersTrampolineScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler, init)
}

jint RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(jint x, jint y) {
  RxInternalSchedulersTrampolineScheduler_initialize();
  return (x < y) ? -1 : ((x == y) ? 0 : 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler)

@implementation RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, [self now]);
}

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong execTime = [self now] + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:delayTime];
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, new_RxInternalSchedulersSleepingAction_initWithRxFunctionsAction0_withRxScheduler_Worker_withLong_(action, self, execTime), execTime);
}

- (id<RxSubscription>)enqueueWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                           withLong:(jlong)execTime {
  return RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(self, action, execTime);
}

- (void)unsubscribe {
  [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) unsubscribe];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriptionsBooleanSubscription *) nil_chk(innerSubscription_)) isUnsubscribed];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { "scheduleWithRxFunctionsAction0:", "LRxSubscription;", 0x1, 0, 1, -1, -1, -1, -1 },
    { "scheduleWithRxFunctionsAction0:withLong:withJavaUtilConcurrentTimeUnit:", "LRxSubscription;", 0x1, 0, 2, -1, -1, -1, -1 },
    { "enqueueWithRxFunctionsAction0:withLong:", "LRxSubscription;", 0x2, 3, 4, -1, -1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "counter_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LJavaUtilConcurrentPriorityBlockingQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "innerSubscription_", "LRxSubscriptionsBooleanSubscription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LRxFunctionsAction0;", "LRxFunctionsAction0;JLJavaUtilConcurrentTimeUnit;", "enqueue", "LRxFunctionsAction0;J", "Ljava/util/concurrent/PriorityBlockingQueue<Lrx/internal/schedulers/TrampolineScheduler$TimedAction;>;", "LRxInternalSchedulersTrampolineScheduler;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler = { "InnerCurrentThreadScheduler", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0xa, 6, 4, 6, -1, -1, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;
}

@end

void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self) {
  RxScheduler_Worker_init(self);
  self->counter_ = new_JavaUtilConcurrentAtomicAtomicInteger_init();
  self->queue_ = new_JavaUtilConcurrentPriorityBlockingQueue_init();
  self->innerSubscription_ = new_RxSubscriptionsBooleanSubscription_init();
  self->wip_ = new_JavaUtilConcurrentAtomicAtomicInteger_init();
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, init)
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_init() {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler, init)
}

id<RxSubscription> RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_enqueueWithRxFunctionsAction0_withLong_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *self, id<RxFunctionsAction0> action, jlong execTime) {
  if ([((RxSubscriptionsBooleanSubscription *) nil_chk(self->innerSubscription_)) isUnsubscribed]) {
    return RxSubscriptionsSubscriptions_unsubscribed();
  }
  RxInternalSchedulersTrampolineScheduler_TimedAction *timedAction = new_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(action, JavaLangLong_valueOfWithLong_(execTime), [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->counter_)) incrementAndGet]);
  [((JavaUtilConcurrentPriorityBlockingQueue *) nil_chk(self->queue_)) addWithId:timedAction];
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->wip_)) getAndIncrement] == 0) {
    do {
      RxInternalSchedulersTrampolineScheduler_TimedAction *polled = [self->queue_ poll];
      if (polled != nil) {
        [((id<RxFunctionsAction0>) nil_chk(polled->action_)) call];
      }
    }
    while ([self->wip_ decrementAndGet] > 0);
    return RxSubscriptionsSubscriptions_unsubscribed();
  }
  else {
    return RxSubscriptionsSubscriptions_createWithRxFunctionsAction0_(new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(self, timedAction));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler)

@implementation RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1

- (void)call {
  [((JavaUtilConcurrentPriorityBlockingQueue *) nil_chk(this$0_->queue_)) removeWithId:val$timedAction_];
}

- (instancetype)initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *)outer$
                                    withRxInternalSchedulersTrampolineScheduler_TimedAction:(RxInternalSchedulersTrampolineScheduler_TimedAction *)capture$0 {
  RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "call", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler:withRxInternalSchedulersTrampolineScheduler_TimedAction:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timedAction_", "LRxInternalSchedulersTrampolineScheduler_TimedAction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;LRxInternalSchedulersTrampolineScheduler_TimedAction;", "LRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler;", "enqueueWithRxFunctionsAction0:withLong:" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 = { "", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1;
}

@end

void RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *self, RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  self->this$0_ = outer$;
  self->val$timedAction_ = capture$0;
  NSObject_init(self);
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *new_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_, outer$, capture$0)
}

RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1 *create_RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1_initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler *outer$, RxInternalSchedulersTrampolineScheduler_TimedAction *capture$0) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1, initWithRxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_withRxInternalSchedulersTrampolineScheduler_TimedAction_, outer$, capture$0)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler_InnerCurrentThreadScheduler_$1)

@implementation RxInternalSchedulersTrampolineScheduler_TimedAction

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                          withJavaLangLong:(JavaLangLong *)execTime
                                   withInt:(jint)count {
  RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(self, action, execTime, count);
  return self;
}

- (jint)compareToWithId:(RxInternalSchedulersTrampolineScheduler_TimedAction *)that {
  (void) cast_chk(that, [RxInternalSchedulersTrampolineScheduler_TimedAction class]);
  jint result = [((JavaLangLong *) nil_chk(execTime_)) compareToWithId:((RxInternalSchedulersTrampolineScheduler_TimedAction *) nil_chk(that))->execTime_];
  if (result == 0) {
    return RxInternalSchedulersTrampolineScheduler_compareWithInt_withInt_(count_, that->count_);
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxFunctionsAction0:withJavaLangLong:withInt:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { "compareToWithId:", "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "action_", "LRxFunctionsAction0;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "execTime_", "LJavaLangLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxFunctionsAction0;LJavaLangLong;I", "compareTo", "LRxInternalSchedulersTrampolineScheduler_TimedAction;", "LRxInternalSchedulersTrampolineScheduler;", "Ljava/lang/Object;Ljava/lang/Comparable<Lrx/internal/schedulers/TrampolineScheduler$TimedAction;>;" };
  static const J2ObjcClassInfo _RxInternalSchedulersTrampolineScheduler_TimedAction = { "TimedAction", "rx.internal.schedulers", ptrTable, methods, fields, 7, 0x1a, 2, 3, 3, -1, -1, 4, -1 };
  return &_RxInternalSchedulersTrampolineScheduler_TimedAction;
}

@end

void RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(RxInternalSchedulersTrampolineScheduler_TimedAction *self, id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  NSObject_init(self);
  self->action_ = action;
  self->execTime_ = execTime;
  self->count_ = count;
}

RxInternalSchedulersTrampolineScheduler_TimedAction *new_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  J2OBJC_NEW_IMPL(RxInternalSchedulersTrampolineScheduler_TimedAction, initWithRxFunctionsAction0_withJavaLangLong_withInt_, action, execTime, count)
}

RxInternalSchedulersTrampolineScheduler_TimedAction *create_RxInternalSchedulersTrampolineScheduler_TimedAction_initWithRxFunctionsAction0_withJavaLangLong_withInt_(id<RxFunctionsAction0> action, JavaLangLong *execTime, jint count) {
  J2OBJC_CREATE_IMPL(RxInternalSchedulersTrampolineScheduler_TimedAction, initWithRxFunctionsAction0_withJavaLangLong_withInt_, action, execTime, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxInternalSchedulersTrampolineScheduler_TimedAction)
