//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/NewThreadScheduler.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler")
#ifdef RESTRICT_RxInternalSchedulersNewThreadScheduler
#define INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersNewThreadScheduler

#if !defined (RxInternalSchedulersNewThreadScheduler_) && (INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler || defined(INCLUDE_RxInternalSchedulersNewThreadScheduler))
#define RxInternalSchedulersNewThreadScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "rx/Scheduler.h"

@class RxScheduler_Worker;
@protocol JavaUtilConcurrentThreadFactory;

/*!
 @brief Schedules work on a new thread.
 */
@interface RxInternalSchedulersNewThreadScheduler : RxScheduler

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

- (RxScheduler_Worker *)createWorker;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersNewThreadScheduler)

FOUNDATION_EXPORT void RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(RxInternalSchedulersNewThreadScheduler *self, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxInternalSchedulersNewThreadScheduler *new_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersNewThreadScheduler *create_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersNewThreadScheduler)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersNewThreadScheduler")
