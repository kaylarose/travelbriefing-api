//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/ScheduledAction.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersScheduledAction")
#ifdef RESTRICT_RxInternalSchedulersScheduledAction
#define INCLUDE_ALL_RxInternalSchedulersScheduledAction 0
#else
#define INCLUDE_ALL_RxInternalSchedulersScheduledAction 1
#endif
#undef RESTRICT_RxInternalSchedulersScheduledAction

#if !defined (RxInternalSchedulersScheduledAction_) && (INCLUDE_ALL_RxInternalSchedulersScheduledAction || defined(INCLUDE_RxInternalSchedulersScheduledAction))
#define RxInternalSchedulersScheduledAction_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaLangThread;
@class RxInternalUtilSubscriptionList;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilConcurrentFuture;
@protocol RxFunctionsAction0;

/*!
 @brief A <code>Runnable</code> that executes an <code>Action0</code> and can be cancelled.
 The analog is the
 <code>Subscriber</code> in respect of an <code>Observer</code>.
 */
@interface RxInternalSchedulersScheduledAction : JavaUtilConcurrentAtomicAtomicReference < JavaLangRunnable, RxSubscription > {
 @public
  RxInternalUtilSubscriptionList *cancel_;
  id<RxFunctionsAction0> action_;
}

#pragma mark Public

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
  withRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent;

- (instancetype)initWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
        withRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent;

/*!
 @brief Adds the given Future to the unsubscription composite in order to support
 cancelling the underlying task in the executor framework.
 @param f the future to add
 */
- (void)addWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)f;

/*!
 @brief Adds a general Subscription to this <code>ScheduledAction</code> that will be unsubscribed
 if the underlying <code>action</code> completes or the this scheduled action is cancelled.
 @param s the Subscription to add
 */
- (void)addWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Adds a parent <code>CompositeSubscription</code> to this <code>ScheduledAction</code> so when the action is
 cancelled or terminates, it can remove itself from this parent.
 @param parent
 the parent <code>CompositeSubscription</code> to add
 */
- (void)addParentWithRxSubscriptionsCompositeSubscription:(RxSubscriptionsCompositeSubscription *)parent;

/*!
 @brief Adds a parent <code>CompositeSubscription</code> to this <code>ScheduledAction</code> so when the action is
 cancelled or terminates, it can remove itself from this parent.
 @param parent
 the parent <code>CompositeSubscription</code> to add
 */
- (void)addParentWithRxInternalUtilSubscriptionList:(RxInternalUtilSubscriptionList *)parent;

- (JavaLangThread *)get;

- (JavaLangThread *)getAndSetWithId:(JavaLangThread *)arg0;

- (jboolean)isUnsubscribed;

- (void)run;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersScheduledAction)

J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction, cancel_, RxInternalUtilSubscriptionList *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersScheduledAction, action_, id<RxFunctionsAction0>)

FOUNDATION_EXPORT void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action);

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_(id<RxFunctionsAction0> action);

FOUNDATION_EXPORT void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent);

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxSubscriptionsCompositeSubscription_(id<RxFunctionsAction0> action, RxSubscriptionsCompositeSubscription *parent);

FOUNDATION_EXPORT void RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(RxInternalSchedulersScheduledAction *self, id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent);

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *new_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersScheduledAction *create_RxInternalSchedulersScheduledAction_initWithRxFunctionsAction0_withRxInternalUtilSubscriptionList_(id<RxFunctionsAction0> action, RxInternalUtilSubscriptionList *parent);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersScheduledAction)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersScheduledAction")
