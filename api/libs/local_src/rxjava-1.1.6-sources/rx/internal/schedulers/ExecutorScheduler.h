//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/internal/schedulers/ExecutorScheduler.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License. You may obtain a copy of
 the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 License for the specific language governing permissions and limitations under
 the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxInternalSchedulersExecutorScheduler")
#ifdef RESTRICT_RxInternalSchedulersExecutorScheduler
#define INCLUDE_ALL_RxInternalSchedulersExecutorScheduler 0
#else
#define INCLUDE_ALL_RxInternalSchedulersExecutorScheduler 1
#endif
#undef RESTRICT_RxInternalSchedulersExecutorScheduler

#if !defined (RxInternalSchedulersExecutorScheduler_) && (INCLUDE_ALL_RxInternalSchedulersExecutorScheduler || defined(INCLUDE_RxInternalSchedulersExecutorScheduler))
#define RxInternalSchedulersExecutorScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "rx/Scheduler.h"

@class RxScheduler_Worker;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief Scheduler that wraps an Executor instance and establishes the Scheduler contract upon it.
 <p>
 Note that thread-hopping is unavoidable with this kind of Scheduler as we don't know about the underlying
 threading behavior of the executor.
 */
@interface RxInternalSchedulersExecutorScheduler : RxScheduler {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (RxScheduler_Worker *)createWorker;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorScheduler)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler, executor_, id<JavaUtilConcurrentExecutor>)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(RxInternalSchedulersExecutorScheduler *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler *new_RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler *create_RxInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorScheduler)

#endif

#if !defined (RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_) && (INCLUDE_ALL_RxInternalSchedulersExecutorScheduler || defined(INCLUDE_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker))
#define RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler_Worker 1
#include "rx/Scheduler.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentConcurrentLinkedQueue;
@class JavaUtilConcurrentTimeUnit;
@class RxSubscriptionsCompositeSubscription;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilConcurrentScheduledExecutorService;
@protocol RxFunctionsAction0;
@protocol RxSubscription;

/*!
 @brief Worker that schedules tasks on the executor indirectly through a trampoline mechanism.
 */
@interface RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker : RxScheduler_Worker < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  RxSubscriptionsCompositeSubscription *tasks_;
  JavaUtilConcurrentConcurrentLinkedQueue *queue_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  id<JavaUtilConcurrentScheduledExecutorService> service_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (jboolean)isUnsubscribed;

- (void)run;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker)

J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, tasks_, RxSubscriptionsCompositeSubscription *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, queue_, JavaUtilConcurrentConcurrentLinkedQueue *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker, service_, id<JavaUtilConcurrentScheduledExecutorService>)

FOUNDATION_EXPORT void RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *new_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker *create_RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(RxInternalSchedulersExecutorScheduler_ExecutorSchedulerWorker)

#endif

#pragma pop_macro("INCLUDE_ALL_RxInternalSchedulersExecutorScheduler")
