//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaCompletableExecutionHook.java
//

/*!
 @brief Copyright 2016 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxPluginsRxJavaCompletableExecutionHook")
#ifdef RESTRICT_RxPluginsRxJavaCompletableExecutionHook
#define INCLUDE_ALL_RxPluginsRxJavaCompletableExecutionHook 0
#else
#define INCLUDE_ALL_RxPluginsRxJavaCompletableExecutionHook 1
#endif
#undef RESTRICT_RxPluginsRxJavaCompletableExecutionHook

#if !defined (RxPluginsRxJavaCompletableExecutionHook_) && (INCLUDE_ALL_RxPluginsRxJavaCompletableExecutionHook || defined(INCLUDE_RxPluginsRxJavaCompletableExecutionHook))
#define RxPluginsRxJavaCompletableExecutionHook_

@class RxCompletable;
@protocol RxCompletable_CompletableOnSubscribe;
@protocol RxCompletable_CompletableOperator;

/*!
 @brief Abstract ExecutionHook with invocations at different lifecycle points of <code>Completable</code> execution with a
 default no-op implementation.
 <p>
 See <code>RxJavaPlugins</code> or the RxJava GitHub Wiki for information on configuring plugins:
 <a href="https://github.com/ReactiveX/RxJava/wiki/Plugins">https://github.com/ReactiveX/RxJava/wiki/Plugins</a>.
 <p>
 <b>Note on thread-safety and performance:</b>
 <p>
 A single implementation of this class will be used globally so methods on this class will be invoked
 concurrently from multiple threads so all functionality must be thread-safe.
 <p>
 Methods are also invoked synchronously and will add to execution time of the completable so all behavior
 should be fast. If anything time-consuming is to be done it should be spawned asynchronously onto separate
 worker threads.
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
@interface RxPluginsRxJavaCompletableExecutionHook : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Invoked during the construction by <code>Completable.create(Completable.CompletableOnSubscribe)</code>
 <p>
 This can be used to decorate or replace the <code>onSubscribe</code> function or just perform extra
 logging, metrics and other such things and pass through the function.
 @param f
 original <code>rx.Completable.CompletableOnSubscribe</code><<code>T</code>> to be executed
 @return <code>rx.Completable.CompletableOnSubscribe</code> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxCompletable_CompletableOnSubscribe>)onCreateWithRxCompletable_CompletableOnSubscribe:(id<RxCompletable_CompletableOnSubscribe>)f;

/*!
 @brief Invoked just as the operator functions is called to bind two operations together into a new
 <code>Completable</code> and the return value is used as the lifted function
 <p>
 This can be used to decorate or replace the <code>rx.Completable.CompletableOperator</code> instance or just perform extra
 logging, metrics and other such things and pass through the onSubscribe.
 @param lift
 original <code>rx.Completable.CompletableOperator</code><code><R, T></code>
 @return <code>rx.Completable.CompletableOperator</code><code><R, T></code> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxCompletable_CompletableOperator>)onLiftWithRxCompletable_CompletableOperator:(id<RxCompletable_CompletableOperator>)lift;

/*!
 @brief Invoked after failed execution of <code>Completable.subscribe(Subscriber)</code> with thrown Throwable.
 <p>
 This is <em>not</em> errors emitted via <code>Subscriber.onError(Throwable)</code> but exceptions thrown when
 attempting to subscribe to a <code>Func1</code><<code>Subscriber</code><code><T></code>, <code>Subscription</code>>.
 @param e
 Throwable thrown by <code>Completable.subscribe(Subscriber)</code>
 @return Throwable that can be decorated, replaced or just returned as a pass through
 */
- (NSException *)onSubscribeErrorWithNSException:(NSException *)e;

/*!
 @brief Invoked before <code>Completable.subscribe(Subscriber)</code> is about to be executed.
 <p>
 This can be used to decorate or replace the <code>onSubscribe</code> function or just perform extra
 logging, metrics and other such things and pass through the function.
 @param completableInstance the target completable instance
 @param onSubscribe
 original <code>rx.Completable.CompletableOnSubscribe</code><<code>T</code>> to be executed
 @return <code>rx.Completable.CompletableOnSubscribe</code><<code>T</code>> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxCompletable_CompletableOnSubscribe>)onSubscribeStartWithRxCompletable:(RxCompletable *)completableInstance
                                     withRxCompletable_CompletableOnSubscribe:(id<RxCompletable_CompletableOnSubscribe>)onSubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaCompletableExecutionHook)

FOUNDATION_EXPORT void RxPluginsRxJavaCompletableExecutionHook_init(RxPluginsRxJavaCompletableExecutionHook *self);

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaCompletableExecutionHook)

#endif

#pragma pop_macro("INCLUDE_ALL_RxPluginsRxJavaCompletableExecutionHook")
