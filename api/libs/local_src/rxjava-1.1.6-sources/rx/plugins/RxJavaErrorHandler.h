//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaErrorHandler.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxPluginsRxJavaErrorHandler")
#ifdef RESTRICT_RxPluginsRxJavaErrorHandler
#define INCLUDE_ALL_RxPluginsRxJavaErrorHandler 0
#else
#define INCLUDE_ALL_RxPluginsRxJavaErrorHandler 1
#endif
#undef RESTRICT_RxPluginsRxJavaErrorHandler

#if !defined (RxPluginsRxJavaErrorHandler_) && (INCLUDE_ALL_RxPluginsRxJavaErrorHandler || defined(INCLUDE_RxPluginsRxJavaErrorHandler))
#define RxPluginsRxJavaErrorHandler_

/*!
 @brief Abstract class for defining error handling logic in addition to the normal
 <code>Subscriber.onError(Throwable)</code> behavior.
 <p>
 For example, all <code>Exception</code>s can be logged using this handler even if
 <code>Subscriber.onError(Throwable)</code> is ignored or not provided when an <code>Observable</code> is subscribed to.
 <p>
 This plugin is also responsible for augmenting rendering of <code>OnErrorThrowable.OnNextValue</code>.
 <p>
 See <code>RxJavaPlugins</code> or the RxJava GitHub Wiki for information on configuring plugins: <a
 href="https://github.com/ReactiveX/RxJava/wiki/Plugins">https://github.com/ReactiveX/RxJava/wiki/Plugins</a>.
 */
@interface RxPluginsRxJavaErrorHandler : NSObject

+ (NSString *)ERROR_IN_RENDERING_SUFFIX;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Receives all <code>Exception</code>s from an <code>Observable</code> passed to
 <code>Subscriber.onError(Throwable)</code>.
 <p>
 This should <em>never</em> throw an <code>Exception</code>. Make sure to try/catch(<code>Throwable</code>) all code
 inside this method implementation.
 @param e
 the <code>Exception</code>
 */
- (void)handleErrorWithNSException:(NSException *)e;

/*!
 @brief Receives items causing <code>OnErrorThrowable.OnNextValue</code> and gives a chance to choose the String
 representation of the item in the <code>OnNextValue</code> stacktrace rendering.
 Returns <code>null</code> if this
 type of item is not managed and should use default rendering.
 <p>
 Note that primitive types are always rendered as their <code>toString()</code> value.
 <p>
 If a <code>Throwable</code> is caught when rendering, this will fallback to the item's classname suffixed by
 #ERROR_IN_RENDERING_SUFFIX.
 @param item the last emitted item, that caused the exception wrapped in
 <code>OnErrorThrowable.OnNextValue</code>
 @return a short <code>String</code> representation of the item if one is known for its type, or null for
 default
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the
 release number)
 */
- (NSString *)handleOnNextValueRenderingWithId:(id)item;

#pragma mark Protected

/*!
 @brief Override this method to provide rendering for specific types other than primitive types and null.
 <p>
 For performance and overhead reasons, this should should limit to a safe production of a short
 <code>String</code> (as large renderings will bloat up the stacktrace). Prefer to try/catch(<code>Throwable</code>)
 all code inside this method implementation.
 <p>
 If a <code>Throwable</code> is caught when rendering, this will fallback to the item's classname suffixed by
 #ERROR_IN_RENDERING_SUFFIX.
 @param item the last emitted item, that caused the exception wrapped in
 <code>OnErrorThrowable.OnNextValue</code>
 @return a short <code>String</code> representation of the item if one is known for its type, or null for
 default
 @throws InterruptedException if the rendering thread is interrupted
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the
 release number)
 */
- (NSString *)renderWithId:(id)item;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaErrorHandler)

inline NSString *RxPluginsRxJavaErrorHandler_get_ERROR_IN_RENDERING_SUFFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *RxPluginsRxJavaErrorHandler_ERROR_IN_RENDERING_SUFFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxPluginsRxJavaErrorHandler, ERROR_IN_RENDERING_SUFFIX, NSString *)

FOUNDATION_EXPORT void RxPluginsRxJavaErrorHandler_init(RxPluginsRxJavaErrorHandler *self);

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaErrorHandler)

#endif

#pragma pop_macro("INCLUDE_ALL_RxPluginsRxJavaErrorHandler")
