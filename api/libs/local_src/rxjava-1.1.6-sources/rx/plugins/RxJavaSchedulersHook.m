//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaSchedulersHook.java
//

#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "rx/Scheduler.h"
#include "rx/functions/Action0.h"
#include "rx/internal/schedulers/CachedThreadScheduler.h"
#include "rx/internal/schedulers/EventLoopsScheduler.h"
#include "rx/internal/schedulers/NewThreadScheduler.h"
#include "rx/internal/util/RxThreadFactory.h"
#include "rx/plugins/RxJavaSchedulersHook.h"

inline RxPluginsRxJavaSchedulersHook *RxPluginsRxJavaSchedulersHook_get_DEFAULT_INSTANCE();
static RxPluginsRxJavaSchedulersHook *RxPluginsRxJavaSchedulersHook_DEFAULT_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxPluginsRxJavaSchedulersHook, DEFAULT_INSTANCE, RxPluginsRxJavaSchedulersHook *)

J2OBJC_INITIALIZED_DEFN(RxPluginsRxJavaSchedulersHook)

@implementation RxPluginsRxJavaSchedulersHook

+ (RxScheduler *)createComputationScheduler {
  return RxPluginsRxJavaSchedulersHook_createComputationScheduler();
}

+ (RxScheduler *)createComputationSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return RxPluginsRxJavaSchedulersHook_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (RxScheduler *)createIoScheduler {
  return RxPluginsRxJavaSchedulersHook_createIoScheduler();
}

+ (RxScheduler *)createIoSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return RxPluginsRxJavaSchedulersHook_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (RxScheduler *)createNewThreadScheduler {
  return RxPluginsRxJavaSchedulersHook_createNewThreadScheduler();
}

+ (RxScheduler *)createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return RxPluginsRxJavaSchedulersHook_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RxPluginsRxJavaSchedulersHook_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RxScheduler *)getComputationScheduler {
  return nil;
}

- (RxScheduler *)getIOScheduler {
  return nil;
}

- (RxScheduler *)getNewThreadScheduler {
  return nil;
}

- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action {
  return action;
}

+ (RxPluginsRxJavaSchedulersHook *)getDefaultInstance {
  return RxPluginsRxJavaSchedulersHook_getDefaultInstance();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createComputationScheduler", "LRxScheduler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { "createComputationSchedulerWithJavaUtilConcurrentThreadFactory:", "LRxScheduler;", 0x9, 0, 1, -1, -1, -1, -1 },
    { "createIoScheduler", "LRxScheduler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { "createIoSchedulerWithJavaUtilConcurrentThreadFactory:", "LRxScheduler;", 0x9, 2, 1, -1, -1, -1, -1 },
    { "createNewThreadScheduler", "LRxScheduler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { "createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory:", "LRxScheduler;", 0x9, 3, 1, -1, -1, -1, -1 },
    { "init", NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { "getComputationScheduler", "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getIOScheduler", "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getNewThreadScheduler", "LRxScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "onScheduleWithRxFunctionsAction0:", "LRxFunctionsAction0;", 0x1, 4, 5, -1, -1, -1, -1 },
    { "getDefaultInstance", "LRxPluginsRxJavaSchedulersHook;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INSTANCE", "LRxPluginsRxJavaSchedulersHook;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "createComputationScheduler", "LJavaUtilConcurrentThreadFactory;", "createIoScheduler", "createNewThreadScheduler", "onSchedule", "LRxFunctionsAction0;", &RxPluginsRxJavaSchedulersHook_DEFAULT_INSTANCE };
  static const J2ObjcClassInfo _RxPluginsRxJavaSchedulersHook = { "RxJavaSchedulersHook", "rx.plugins", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_RxPluginsRxJavaSchedulersHook;
}

+ (void)initialize {
  if (self == [RxPluginsRxJavaSchedulersHook class]) {
    RxPluginsRxJavaSchedulersHook_DEFAULT_INSTANCE = new_RxPluginsRxJavaSchedulersHook_init();
    J2OBJC_SET_INITIALIZED(RxPluginsRxJavaSchedulersHook)
  }
}

@end

RxScheduler *RxPluginsRxJavaSchedulersHook_createComputationScheduler() {
  RxPluginsRxJavaSchedulersHook_initialize();
  return RxPluginsRxJavaSchedulersHook_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(new_RxInternalUtilRxThreadFactory_initWithNSString_(@"RxComputationScheduler-"));
}

RxScheduler *RxPluginsRxJavaSchedulersHook_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxPluginsRxJavaSchedulersHook_initialize();
  if (threadFactory == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"threadFactory == null");
  return new_RxInternalSchedulersEventLoopsScheduler_initWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

RxScheduler *RxPluginsRxJavaSchedulersHook_createIoScheduler() {
  RxPluginsRxJavaSchedulersHook_initialize();
  return RxPluginsRxJavaSchedulersHook_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(new_RxInternalUtilRxThreadFactory_initWithNSString_(@"RxIoScheduler-"));
}

RxScheduler *RxPluginsRxJavaSchedulersHook_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxPluginsRxJavaSchedulersHook_initialize();
  if (threadFactory == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"threadFactory == null");
  return new_RxInternalSchedulersCachedThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

RxScheduler *RxPluginsRxJavaSchedulersHook_createNewThreadScheduler() {
  RxPluginsRxJavaSchedulersHook_initialize();
  return RxPluginsRxJavaSchedulersHook_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(new_RxInternalUtilRxThreadFactory_initWithNSString_(@"RxNewThreadScheduler-"));
}

RxScheduler *RxPluginsRxJavaSchedulersHook_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  RxPluginsRxJavaSchedulersHook_initialize();
  if (threadFactory == nil) @throw new_JavaLangNullPointerException_initWithNSString_(@"threadFactory == null");
  return new_RxInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

void RxPluginsRxJavaSchedulersHook_init(RxPluginsRxJavaSchedulersHook *self) {
  NSObject_init(self);
}

RxPluginsRxJavaSchedulersHook *new_RxPluginsRxJavaSchedulersHook_init() {
  J2OBJC_NEW_IMPL(RxPluginsRxJavaSchedulersHook, init)
}

RxPluginsRxJavaSchedulersHook *create_RxPluginsRxJavaSchedulersHook_init() {
  J2OBJC_CREATE_IMPL(RxPluginsRxJavaSchedulersHook, init)
}

RxPluginsRxJavaSchedulersHook *RxPluginsRxJavaSchedulersHook_getDefaultInstance() {
  RxPluginsRxJavaSchedulersHook_initialize();
  return RxPluginsRxJavaSchedulersHook_DEFAULT_INSTANCE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxPluginsRxJavaSchedulersHook)
