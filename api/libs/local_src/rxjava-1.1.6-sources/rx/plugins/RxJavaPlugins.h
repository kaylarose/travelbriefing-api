//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaPlugins.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxPluginsRxJavaPlugins")
#ifdef RESTRICT_RxPluginsRxJavaPlugins
#define INCLUDE_ALL_RxPluginsRxJavaPlugins 0
#else
#define INCLUDE_ALL_RxPluginsRxJavaPlugins 1
#endif
#undef RESTRICT_RxPluginsRxJavaPlugins

#if !defined (RxPluginsRxJavaPlugins_) && (INCLUDE_ALL_RxPluginsRxJavaPlugins || defined(INCLUDE_RxPluginsRxJavaPlugins))
#define RxPluginsRxJavaPlugins_

@class IOSClass;
@class JavaUtilProperties;
@class RxPluginsRxJavaCompletableExecutionHook;
@class RxPluginsRxJavaErrorHandler;
@class RxPluginsRxJavaObservableExecutionHook;
@class RxPluginsRxJavaSchedulersHook;
@class RxPluginsRxJavaSingleExecutionHook;

/*!
 @brief Registry for plugin implementations that allows global override and handles the retrieval of correct
 implementation based on order of precedence:
 <ol>
 <li>plugin registered globally via <code>register</code> methods in this class</li>
 <li>plugin registered and retrieved using <code>java.lang.System.getProperty(String)</code> (see get methods for
 property names)</li>
 <li>default implementation</li>
 </ol>
 <p>In addition to the <code>rxjava.plugin.
 [simple classname].implementation</code> system properties,
 you can define two system property:<br>
 @code
<code>
  rxjava.plugin.[index].class}
  rxjava.plugin.[index].impl}
  
@endcode
 Where the <code>.class</code> property contains the simple classname from above and the <code>.impl</code>
 contains the fully qualified name of the implementation class. The <code>[index]</code> can be
 any short string or number of your choosing. For example, you can now define a custom
 <code>RxJavaErrorHandler</code> via two system property:
 @code
<code>
  rxjava.plugin.1.class=RxJavaErrorHandler
  rxjava.plugin.1.impl=some.package.MyRxJavaErrorHandler
  
@endcode
 - seealso: <a href="https://github.com/ReactiveX/RxJava/wiki/Plugins">RxJava Wiki: Plugins</a>
 */
@interface RxPluginsRxJavaPlugins : NSObject

+ (RxPluginsRxJavaErrorHandler *)DEFAULT_ERROR_HANDLER;

#pragma mark Public

/*!
 @brief Retrieves the instance of <code>RxJavaCompletableExecutionHook</code> to use based on order of precedence as
 defined in <code>RxJavaPlugins</code> class header.
 <p>
 Override the default by calling <code>registerCompletableExecutionHook(RxJavaCompletableExecutionHook)</code>
 or by setting the property <code>rxjava.plugin.RxJavaCompletableExecutionHook.implementation</code> with the
 full classname to load.
 @return <code>RxJavaCompletableExecutionHook</code> implementation to use
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
- (RxPluginsRxJavaCompletableExecutionHook *)getCompletableExecutionHook;

/*!
 @brief Retrieves an instance of <code>RxJavaErrorHandler</code> to use based on order of precedence as defined in
 <code>RxJavaPlugins</code> class header.
 <p>
 Override the default by calling <code>registerErrorHandler(RxJavaErrorHandler)</code> or by setting the
 property <code>rxjava.plugin.RxJavaErrorHandler.implementation</code> with the full classname to load.
 @return <code>RxJavaErrorHandler</code> implementation to use
 */
- (RxPluginsRxJavaErrorHandler *)getErrorHandler;

/*!
 @brief Retrieves the single <code>RxJavaPlugins</code> instance.
 @return the single <code>RxJavaPlugins</code> instance
 */
+ (RxPluginsRxJavaPlugins *)getInstance;

/*!
 @brief Retrieves the instance of <code>RxJavaObservableExecutionHook</code> to use based on order of precedence as
 defined in <code>RxJavaPlugins</code> class header.
 <p>
 Override the default by calling <code>registerObservableExecutionHook(RxJavaObservableExecutionHook)</code>
 or by setting the property <code>rxjava.plugin.RxJavaObservableExecutionHook.implementation</code> with the
 full classname to load.
 @return <code>RxJavaObservableExecutionHook</code> implementation to use
 */
- (RxPluginsRxJavaObservableExecutionHook *)getObservableExecutionHook;

/*!
 @brief Retrieves the instance of <code>RxJavaSchedulersHook</code> to use based on order of precedence as defined
 in the <code>RxJavaPlugins</code> class header.
 <p>
 Override the default by calling <code>registerSchedulersHook(RxJavaSchedulersHook)</code> or by setting
 the property <code>rxjava.plugin.RxJavaSchedulersHook.implementation</code> with the full classname to
 load.
 @return the <code>RxJavaSchedulersHook</code> implementation in use
 */
- (RxPluginsRxJavaSchedulersHook *)getSchedulersHook;

/*!
 @brief Retrieves the instance of <code>RxJavaSingleExecutionHook</code> to use based on order of precedence as
 defined in <code>RxJavaPlugins</code> class header.
 <p>
 Override the default by calling <code>registerSingleExecutionHook(RxJavaSingleExecutionHook)</code>
 or by setting the property <code>rxjava.plugin.RxJavaSingleExecutionHook.implementation</code> with the
 full classname to load.
 @return <code>RxJavaSingleExecutionHook</code> implementation to use
 */
- (RxPluginsRxJavaSingleExecutionHook *)getSingleExecutionHook;

/*!
 @brief Register an <code>RxJavaCompletableExecutionHook</code> implementation as a global override of any injected or
 default implementations.
 @param impl
 <code>RxJavaCompletableExecutionHook</code> implementation
 @throws IllegalStateException
 if called more than once or after the default was initialized (if usage occurs before trying
 to register)
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
- (void)registerCompletableExecutionHookWithRxPluginsRxJavaCompletableExecutionHook:(RxPluginsRxJavaCompletableExecutionHook *)impl;

/*!
 @brief Registers an <code>RxJavaErrorHandler</code> implementation as a global override of any injected or default
 implementations.
 @param impl
 <code>RxJavaErrorHandler</code> implementation
 @throws IllegalStateException
 if called more than once or after the default was initialized (if usage occurs before trying
 to register)
 */
- (void)registerErrorHandlerWithRxPluginsRxJavaErrorHandler:(RxPluginsRxJavaErrorHandler *)impl;

/*!
 @brief Register an <code>RxJavaObservableExecutionHook</code> implementation as a global override of any injected or
 default implementations.
 @param impl
 <code>RxJavaObservableExecutionHook</code> implementation
 @throws IllegalStateException
 if called more than once or after the default was initialized (if usage occurs before trying
 to register)
 */
- (void)registerObservableExecutionHookWithRxPluginsRxJavaObservableExecutionHook:(RxPluginsRxJavaObservableExecutionHook *)impl;

/*!
 @brief Registers an <code>RxJavaSchedulersHook</code> implementation as a global override of any injected or
 default implementations.
 @param impl
 <code>RxJavaSchedulersHook</code> implementation
 @throws IllegalStateException
 if called more than once or after the default was initialized (if usage occurs before trying
 to register)
 */
- (void)registerSchedulersHookWithRxPluginsRxJavaSchedulersHook:(RxPluginsRxJavaSchedulersHook *)impl;

/*!
 @brief Register an <code>RxJavaSingleExecutionHook</code> implementation as a global override of any injected or
 default implementations.
 @param impl
 <code>RxJavaSingleExecutionHook</code> implementation
 @throws IllegalStateException
 if called more than once or after the default was initialized (if usage occurs before trying
 to register)
 */
- (void)registerSingleExecutionHookWithRxPluginsRxJavaSingleExecutionHook:(RxPluginsRxJavaSingleExecutionHook *)impl;

/*!
 @brief Reset <code>RxJavaPlugins</code> instance
 <p>
 This API is experimental.
 Resetting the plugins is dangerous 
 during application runtime and also bad code could invoke it in 
 the middle of an application life-cycle and really break applications
 if not used cautiously. For more detailed discussions:
 * @@see <a href="https://github.com/ReactiveX/RxJava/issues/2297">Make RxJavaPlugins.reset() public</a>
 */
- (void)reset;

#pragma mark Package-Private

- (instancetype)init;

+ (id)getPluginImplementationViaPropertyWithIOSClass:(IOSClass *)pluginClass
                              withJavaUtilProperties:(JavaUtilProperties *)propsIn;

@end

J2OBJC_STATIC_INIT(RxPluginsRxJavaPlugins)

inline RxPluginsRxJavaErrorHandler *RxPluginsRxJavaPlugins_get_DEFAULT_ERROR_HANDLER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxPluginsRxJavaErrorHandler *RxPluginsRxJavaPlugins_DEFAULT_ERROR_HANDLER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxPluginsRxJavaPlugins, DEFAULT_ERROR_HANDLER, RxPluginsRxJavaErrorHandler *)

FOUNDATION_EXPORT RxPluginsRxJavaPlugins *RxPluginsRxJavaPlugins_getInstance();

FOUNDATION_EXPORT void RxPluginsRxJavaPlugins_init(RxPluginsRxJavaPlugins *self);

FOUNDATION_EXPORT RxPluginsRxJavaPlugins *new_RxPluginsRxJavaPlugins_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxPluginsRxJavaPlugins *create_RxPluginsRxJavaPlugins_init();

FOUNDATION_EXPORT id RxPluginsRxJavaPlugins_getPluginImplementationViaPropertyWithIOSClass_withJavaUtilProperties_(IOSClass *pluginClass, JavaUtilProperties *propsIn);

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaPlugins)

#endif

#pragma pop_macro("INCLUDE_ALL_RxPluginsRxJavaPlugins")
