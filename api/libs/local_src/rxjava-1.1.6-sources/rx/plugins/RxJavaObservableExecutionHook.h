//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaObservableExecutionHook.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxPluginsRxJavaObservableExecutionHook")
#ifdef RESTRICT_RxPluginsRxJavaObservableExecutionHook
#define INCLUDE_ALL_RxPluginsRxJavaObservableExecutionHook 0
#else
#define INCLUDE_ALL_RxPluginsRxJavaObservableExecutionHook 1
#endif
#undef RESTRICT_RxPluginsRxJavaObservableExecutionHook

#if !defined (RxPluginsRxJavaObservableExecutionHook_) && (INCLUDE_ALL_RxPluginsRxJavaObservableExecutionHook || defined(INCLUDE_RxPluginsRxJavaObservableExecutionHook))
#define RxPluginsRxJavaObservableExecutionHook_

@class RxObservable;
@protocol RxObservable_OnSubscribe;
@protocol RxObservable_Operator;
@protocol RxSubscription;

/*!
 @brief Abstract ExecutionHook with invocations at different lifecycle points of <code>Observable</code> execution with a
 default no-op implementation.
 <p>
 See <code>RxJavaPlugins</code> or the RxJava GitHub Wiki for information on configuring plugins:
 <a href="https://github.com/ReactiveX/RxJava/wiki/Plugins">https://github.com/ReactiveX/RxJava/wiki/Plugins</a>.
 <p>
 <b>Note on thread-safety and performance:</b>
 <p>
 A single implementation of this class will be used globally so methods on this class will be invoked
 concurrently from multiple threads so all functionality must be thread-safe.
 <p>
 Methods are also invoked synchronously and will add to execution time of the observable so all behavior
 should be fast. If anything time-consuming is to be done it should be spawned asynchronously onto separate
 worker threads.
 */
@interface RxPluginsRxJavaObservableExecutionHook : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Invoked during the construction by <code>Observable.create(OnSubscribe)</code>
 <p>
 This can be used to decorate or replace the <code>onSubscribe</code> function or just perform extra
 logging, metrics and other such things and pass through the function.
 @param f
 original <code>OnSubscribe</code><<code>T</code>> to be executed
 @return <code>OnSubscribe</code><<code>T</code>> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxObservable_OnSubscribe>)onCreateWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)f;

/*!
 @brief Invoked just as the operator functions is called to bind two operations together into a new
 <code>Observable</code> and the return value is used as the lifted function
 <p>
 This can be used to decorate or replace the <code>Operator</code> instance or just perform extra
 logging, metrics and other such things and pass through the onSubscribe.
 @param lift
 original <code>Operator</code><code><R, T></code>
 @return <code>Operator</code><code><R, T></code> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxObservable_Operator>)onLiftWithRxObservable_Operator:(id<RxObservable_Operator>)lift;

/*!
 @brief Invoked after failed execution of <code>Observable.subscribe(Subscriber)</code> with thrown Throwable.
 <p>
 This is <em>not</em> errors emitted via <code>Subscriber.onError(Throwable)</code> but exceptions thrown when
 attempting to subscribe to a <code>Func1</code><<code>Subscriber</code><code><T></code>, <code>Subscription</code>>.
 @param e
 Throwable thrown by <code>Observable.subscribe(Subscriber)</code>
 @return Throwable that can be decorated, replaced or just returned as a pass through
 */
- (NSException *)onSubscribeErrorWithNSException:(NSException *)e;

/*!
 @brief Invoked after successful execution of <code>Observable.subscribe(rx.Subscriber)</code> with returned
 <code>Subscription</code>.
 <p>
 This can be used to decorate or replace the <code>Subscription</code> instance or just perform extra logging,
 metrics and other such things and pass through the subscription.
 @param subscription
 original <code>Subscription</code>
 @return <code>Subscription</code> subscription that can be modified, decorated, replaced or just returned as a
 pass through
 */
- (id<RxSubscription>)onSubscribeReturnWithRxSubscription:(id<RxSubscription>)subscription;

/*!
 @brief Invoked before <code>Observable.subscribe(rx.Subscriber)</code> is about to be executed.
 <p>
 This can be used to decorate or replace the <code>onSubscribe</code> function or just perform extra
 logging, metrics and other such things and pass through the function.
 @param observableInstance the parent observable instance
 @param onSubscribe
 original <code>OnSubscribe</code><<code>T</code>> to be executed
 @return <code>OnSubscribe</code><<code>T</code>> function that can be modified, decorated, replaced or just
 returned as a pass through
 */
- (id<RxObservable_OnSubscribe>)onSubscribeStartWithRxObservable:(RxObservable *)observableInstance
                                    withRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxPluginsRxJavaObservableExecutionHook)

FOUNDATION_EXPORT void RxPluginsRxJavaObservableExecutionHook_init(RxPluginsRxJavaObservableExecutionHook *self);

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaObservableExecutionHook)

#endif

#pragma pop_macro("INCLUDE_ALL_RxPluginsRxJavaObservableExecutionHook")
