//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/plugins/RxJavaSchedulersHook.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxPluginsRxJavaSchedulersHook")
#ifdef RESTRICT_RxPluginsRxJavaSchedulersHook
#define INCLUDE_ALL_RxPluginsRxJavaSchedulersHook 0
#else
#define INCLUDE_ALL_RxPluginsRxJavaSchedulersHook 1
#endif
#undef RESTRICT_RxPluginsRxJavaSchedulersHook

#if !defined (RxPluginsRxJavaSchedulersHook_) && (INCLUDE_ALL_RxPluginsRxJavaSchedulersHook || defined(INCLUDE_RxPluginsRxJavaSchedulersHook))
#define RxPluginsRxJavaSchedulersHook_

@class RxScheduler;
@protocol JavaUtilConcurrentThreadFactory;
@protocol RxFunctionsAction0;

/*!
 @brief This plugin class provides 2 ways to customize <code>Scheduler</code> functionality
 1.
 You may redefine entire schedulers, if you so choose.  To do so, override
 the 3 methods that return Scheduler (io(), computation(), newThread()).
 2.  You may wrap/decorate an <code>Action0</code>, before it is handed off to a Scheduler.  The system-
 supplied Schedulers (Schedulers.ioScheduler, Schedulers.computationScheduler,
 Scheduler.newThreadScheduler) all use this hook, so it's a convenient way to
 modify Scheduler functionality without redefining Schedulers wholesale.
 Also, when redefining Schedulers, you are free to use/not use the onSchedule decoration hook.
 <p>
 See <code>RxJavaPlugins</code> or the RxJava GitHub Wiki for information on configuring plugins:
 <a href="https://github.com/ReactiveX/RxJava/wiki/Plugins">https://github.com/ReactiveX/RxJava/wiki/Plugins</a>.
 */
@interface RxPluginsRxJavaSchedulersHook : NSObject

#pragma mark Public

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.computation()</code>.
 @return the created Scheduler instance
 */
+ (RxScheduler *)createComputationScheduler;

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.computation()</code>
 except using <code>threadFactory</code> for thread creation.
 @param threadFactory the factory to use for each worker thread
 @return the created Scheduler instance
 */
+ (RxScheduler *)createComputationSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.io()</code>.
 @return the created Scheduler instance
 */
+ (RxScheduler *)createIoScheduler;

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.io()</code>
 except using <code>threadFactory</code> for thread creation.
 @param threadFactory the factory to use for each worker thread
 @return the created Scheduler instance
 */
+ (RxScheduler *)createIoSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.newThread()</code>.
 @return the created Scheduler instance
 */
+ (RxScheduler *)createNewThreadScheduler;

/*!
 @brief Create an instance of the default <code>Scheduler</code> used for <code>Schedulers.newThread()</code>
 except using <code>threadFactory</code> for thread creation.
 @param threadFactory the factory to use for each worker thread
 @return the created Scheduler instance
 */
+ (RxScheduler *)createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Scheduler to return from <code>rx.schedulers.Schedulers.computation()</code> or null if default should be
 used.
 This instance should be or behave like a stateless singleton;
 @return the current computation scheduler instance
 */
- (RxScheduler *)getComputationScheduler;

+ (RxPluginsRxJavaSchedulersHook *)getDefaultInstance;

/*!
 @brief Scheduler to return from <code>rx.schedulers.Schedulers.io()</code> or null if default should be used.
 This instance should be or behave like a stateless singleton;
 @return the created Scheduler instance
 */
- (RxScheduler *)getIOScheduler;

/*!
 @brief Scheduler to return from <code>rx.schedulers.Schedulers.newThread()</code> or null if default should be used.
 This instance should be or behave like a stateless singleton;
 @return the current new thread scheduler instance
 */
- (RxScheduler *)getNewThreadScheduler;

/*!
 @brief Invoked before the Action is handed over to the scheduler.
 Can be used for wrapping/decorating/logging.
 The default is just a pass through.
 @param action action to schedule
 @return wrapped action to schedule
 */
- (id<RxFunctionsAction0>)onScheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(RxPluginsRxJavaSchedulersHook)

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createComputationScheduler();

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createIoScheduler();

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createNewThreadScheduler();

FOUNDATION_EXPORT RxScheduler *RxPluginsRxJavaSchedulersHook_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT void RxPluginsRxJavaSchedulersHook_init(RxPluginsRxJavaSchedulersHook *self);

FOUNDATION_EXPORT RxPluginsRxJavaSchedulersHook *new_RxPluginsRxJavaSchedulersHook_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxPluginsRxJavaSchedulersHook *create_RxPluginsRxJavaSchedulersHook_init();

FOUNDATION_EXPORT RxPluginsRxJavaSchedulersHook *RxPluginsRxJavaSchedulersHook_getDefaultInstance();

J2OBJC_TYPE_LITERAL_HEADER(RxPluginsRxJavaSchedulersHook)

#endif

#pragma pop_macro("INCLUDE_ALL_RxPluginsRxJavaSchedulersHook")
