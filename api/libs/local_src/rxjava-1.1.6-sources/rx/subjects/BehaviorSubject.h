//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/BehaviorSubject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsBehaviorSubject")
#ifdef RESTRICT_RxSubjectsBehaviorSubject
#define INCLUDE_ALL_RxSubjectsBehaviorSubject 0
#else
#define INCLUDE_ALL_RxSubjectsBehaviorSubject 1
#endif
#undef RESTRICT_RxSubjectsBehaviorSubject

#if !defined (RxSubjectsBehaviorSubject_) && (INCLUDE_ALL_RxSubjectsBehaviorSubject || defined(INCLUDE_RxSubjectsBehaviorSubject))
#define RxSubjectsBehaviorSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

@class IOSObjectArray;
@class RxSubjectsSubjectSubscriptionManager;
@protocol RxObservable_OnSubscribe;

/*!
 @brief Subject that emits the most recent item it has observed and all subsequent observed items to each subscribed
 <code>Observer</code>.
 <p>
 <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.BehaviorSubject.png" alt="">
 <p>
 Example usage:
 <p>
 @code
   // observer will receive all events.
   BehaviorSubject<Object> subject = BehaviorSubject.create("default");
   subject.subscribe(observer);
   subject.onNext("one");
   subject.onNext("two");
   subject.onNext("three");
   // observer will receive the "one", "two" and "three" events, but not "zero"
   BehaviorSubject<Object> subject = BehaviorSubject.create("default");
   subject.onNext("zero");
   subject.onNext("one");
   subject.subscribe(observer);
   subject.onNext("two");
   subject.onNext("three");
   // observer will receive only onCompleted
   BehaviorSubject<Object> subject = BehaviorSubject.create("default");
   subject.onNext("zero");
   subject.onNext("one");
   subject.onCompleted();
   subject.subscribe(observer);
   // observer will receive only onError
   BehaviorSubject<Object> subject = BehaviorSubject.create("default");
   subject.onNext("zero");
   subject.onNext("one");
   subject.onError(new RuntimeException("error"));
   subject.subscribe(observer);
 
@endcode
 */
@interface RxSubjectsBehaviorSubject : RxSubjectsSubject

#pragma mark Public

/*!
 @brief Creates a <code>BehaviorSubject</code> without a default item.
 @return the constructed <code>BehaviorSubject</code>
 */
+ (RxSubjectsBehaviorSubject *)create;

/*!
 @brief Creates a <code>BehaviorSubject</code> that emits the last item it observed and all subsequent items to each
 <code>Observer</code> that subscribes to it.
 @param defaultValue
 the item that will be emitted first to any <code>Observer</code> as long as the
 <code>BehaviorSubject</code> has not yet observed any items from its source <code>Observable</code>
 @return the constructed <code>BehaviorSubject</code>
 */
+ (RxSubjectsBehaviorSubject *)createWithId:(id)defaultValue;

/*!
 @brief Returns the Throwable that terminated the Subject.
 @return the Throwable that terminated the Subject or <code>null</code> if the
 subject hasn't terminated yet or it terminated normally.
 */
- (NSException *)getThrowable;

/*!
 @brief Returns the current value of the Subject if there is such a value and
 the subject hasn't terminated yet.
 <p>The method can return <code>null</code> for various reasons. Use <code>hasValue()</code>, <code>hasThrowable()</code>
 and <code>hasCompleted()</code> to determine if such <code>null</code> is a valid value, there was an
 exception or the Subject terminated (with or without receiving any value). 
 @return the current value or <code>null</code> if the Subject doesn't have a value,
 has terminated or has an actual <code>null</code> as a valid value.
 */
- (id)getValue;

/*!
 @brief Returns a snapshot of the currently buffered non-terminal events.
 <p>The operation is threadsafe.
 @return a snapshot of the currently buffered non-terminal events.
 @since (If this graduates from being an Experimental class method, replace this parenthetical with the release number)
 */
- (IOSObjectArray *)getValues;

/*!
 @brief Returns a snapshot of the currently buffered non-terminal events into 
 the provided <code>a</code> array or creates a new array if it has not enough capacity.
 @param a the array to fill in
 @return the array <code>a</code> if it had enough capacity or a new array containing the available values
 */
- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)a;

/*!
 @brief Check if the Subject has terminated normally.
 @return true if the subject completed normally via <code>onCompleted()</code>
 */
- (jboolean)hasCompleted;

- (jboolean)hasObservers;

/*!
 @brief Check if the Subject has terminated with an exception.
 @return true if the subject has received a throwable through <code>onError</code>.
 */
- (jboolean)hasThrowable;

/*!
 @brief Check if the Subject has a value.
 <p>Use the <code>getValue()</code> method to retrieve such a value.
 <p>Note that unless <code>hasCompleted()</code> or <code>hasThrowable()</code> returns true, the value
 retrieved by <code>getValue()</code> may get outdated.
 @return true if and only if the subject has some value and hasn't terminated yet.
 */
- (jboolean)hasValue;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)v;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state;

#pragma mark Package-Private

- (jint)subscriberCount;

@end

J2OBJC_STATIC_INIT(RxSubjectsBehaviorSubject)

FOUNDATION_EXPORT RxSubjectsBehaviorSubject *RxSubjectsBehaviorSubject_create();

FOUNDATION_EXPORT RxSubjectsBehaviorSubject *RxSubjectsBehaviorSubject_createWithId_(id defaultValue);

FOUNDATION_EXPORT void RxSubjectsBehaviorSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(RxSubjectsBehaviorSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

FOUNDATION_EXPORT RxSubjectsBehaviorSubject *new_RxSubjectsBehaviorSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsBehaviorSubject *create_RxSubjectsBehaviorSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsBehaviorSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsBehaviorSubject")
