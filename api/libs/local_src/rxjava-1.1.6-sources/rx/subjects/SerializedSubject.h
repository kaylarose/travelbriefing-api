//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/SerializedSubject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsSerializedSubject")
#ifdef RESTRICT_RxSubjectsSerializedSubject
#define INCLUDE_ALL_RxSubjectsSerializedSubject 0
#else
#define INCLUDE_ALL_RxSubjectsSerializedSubject 1
#endif
#undef RESTRICT_RxSubjectsSerializedSubject

#if !defined (RxSubjectsSerializedSubject_) && (INCLUDE_ALL_RxSubjectsSerializedSubject || defined(INCLUDE_RxSubjectsSerializedSubject))
#define RxSubjectsSerializedSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

/*!
 @brief Wraps a <code>Subject</code> so that it is safe to call its various <code>on</code> methods from different threads.
 <p>
 When you use an ordinary <code>Subject</code> as a <code>Subscriber</code>, you must take care not to call its
 <code>Subscriber.onNext</code> method (or its other <code>on</code> methods) from multiple threads, as this could lead
 to non-serialized calls, which violates <a href="http://reactivex.io/documentation/contract.html">the
 Observable contract</a> and creates an ambiguity in the resulting Subject.
 <p>
 To protect a <code>Subject</code> from this danger, you can convert it into a <code>SerializedSubject</code> with code
 like the following:
 <p>
@code
 mySafeSubject = new SerializedSubject( myUnsafeSubject );
 
@endcode
 */
@interface RxSubjectsSerializedSubject : RxSubjectsSubject

#pragma mark Public

- (instancetype)initWithRxSubjectsSubject:(RxSubjectsSubject *)actual;

- (jboolean)hasObservers;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSerializedSubject)

FOUNDATION_EXPORT void RxSubjectsSerializedSubject_initWithRxSubjectsSubject_(RxSubjectsSerializedSubject *self, RxSubjectsSubject *actual);

FOUNDATION_EXPORT RxSubjectsSerializedSubject *new_RxSubjectsSerializedSubject_initWithRxSubjectsSubject_(RxSubjectsSubject *actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSerializedSubject *create_RxSubjectsSerializedSubject_initWithRxSubjectsSubject_(RxSubjectsSubject *actual);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSerializedSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsSerializedSubject")
