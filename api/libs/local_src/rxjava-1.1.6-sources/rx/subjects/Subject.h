//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/Subject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsSubject")
#ifdef RESTRICT_RxSubjectsSubject
#define INCLUDE_ALL_RxSubjectsSubject 0
#else
#define INCLUDE_ALL_RxSubjectsSubject 1
#endif
#undef RESTRICT_RxSubjectsSubject

#if !defined (RxSubjectsSubject_) && (INCLUDE_ALL_RxSubjectsSubject || defined(INCLUDE_RxSubjectsSubject))
#define RxSubjectsSubject_

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable 1
#include "rx/Observable.h"

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@class RxSubjectsSerializedSubject;
@protocol RxObservable_OnSubscribe;

/*!
 @brief Represents an object that is both an Observable and an Observer.
 */
@interface RxSubjectsSubject : RxObservable < RxObserver >

#pragma mark Public

/*!
 @brief Indicates whether the <code>Subject</code> has <code>Observers</code> subscribed to it.
 @return true if there is at least one Observer subscribed to this Subject, false otherwise
 */
- (jboolean)hasObservers;

/*!
 @brief Wraps a <code>Subject</code> so that it is safe to call its various <code>on</code> methods from different threads.
 <p>
 When you use an ordinary <code>Subject</code> as a <code>Subscriber</code>, you must take care not to call its 
 <code>Subscriber.onNext</code> method (or its other <code>on</code> methods) from multiple threads, as this could 
 lead to non-serialized calls, which violates
 <a href="http://reactivex.io/documentation/contract.html">the Observable contract</a> and creates an
 ambiguity in the resulting Subject.
 <p>
 To protect a <code>Subject</code> from this danger, you can convert it into a <code>SerializedSubject</code> with
 code like the following:
 <p>
@code
 mySafeSubject = myUnsafeSubject.toSerialized();
 
@endcode
 @return SerializedSubject wrapping the current Subject
 */
- (RxSubjectsSerializedSubject *)toSerialized;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSubject)

FOUNDATION_EXPORT void RxSubjectsSubject_initWithRxObservable_OnSubscribe_(RxSubjectsSubject *self, id<RxObservable_OnSubscribe> onSubscribe);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsSubject")
