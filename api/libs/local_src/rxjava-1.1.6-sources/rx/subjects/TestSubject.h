//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/TestSubject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsTestSubject")
#ifdef RESTRICT_RxSubjectsTestSubject
#define INCLUDE_ALL_RxSubjectsTestSubject 0
#else
#define INCLUDE_ALL_RxSubjectsTestSubject 1
#endif
#undef RESTRICT_RxSubjectsTestSubject

#if !defined (RxSubjectsTestSubject_) && (INCLUDE_ALL_RxSubjectsTestSubject || defined(INCLUDE_RxSubjectsTestSubject))
#define RxSubjectsTestSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

@class RxSchedulersTestScheduler;
@class RxSubjectsSubjectSubscriptionManager;
@protocol RxObservable_OnSubscribe;

/*!
 @brief A variety of Subject that is useful for testing purposes.
 It operates on a <code>TestScheduler</code> and allows
 you to precisely time emissions and notifications to the Subject's subscribers using relative virtual time
 controlled by the <code>TestScheduler</code>.
 */
@interface RxSubjectsTestSubject : RxSubjectsSubject

#pragma mark Public

/*!
 @brief Creates and returns a new <code>TestSubject</code>.
 @param scheduler a <code>TestScheduler</code> on which to operate this Subject
 @return the new <code>TestSubject</code>
 */
+ (RxSubjectsTestSubject *)createWithRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)scheduler;

- (jboolean)hasObservers;

/*!
 @brief Schedule a call to <code>onCompleted</code> on TestScheduler.
 */
- (void)onCompleted;

/*!
 @brief Schedule a call to <code>onCompleted</code> relative to "now()" +n milliseconds in the future.
 @param delayTime
 the number of milliseconds in the future relative to "now()" at which to call <code>onCompleted</code>
 */
- (void)onCompletedWithLong:(jlong)delayTime;

/*!
 @brief Schedule a call to <code>onError</code> on TestScheduler.
 */
- (void)onErrorWithNSException:(NSException *)e;

/*!
 @brief Schedule a call to <code>onError</code> relative to "now()" +n milliseconds in the future.
 @param e
 the <code>Throwable</code> to pass to the <code>onError</code> method
 @param delayTime
 the number of milliseconds in the future relative to "now()" at which to call <code>onError</code>
 */
- (void)onErrorWithNSException:(NSException *)e
                      withLong:(jlong)delayTime;

/*!
 @brief Schedule a call to <code>onNext</code> on TestScheduler.
 */
- (void)onNextWithId:(id)v;

/*!
 @brief Schedule a call to <code>onNext</code> relative to "now()" +n milliseconds in the future.
 @param v
 the item to emit
 @param delayTime
 the number of milliseconds in the future relative to "now()" at which to call <code>onNext</code>
 */
- (void)onNextWithId:(id)v
            withLong:(jlong)delayTime;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state
                   withRxSchedulersTestScheduler:(RxSchedulersTestScheduler *)scheduler;

#pragma mark Package-Private

- (void)_onCompleted;

- (void)_onErrorWithNSException:(NSException *)e;

- (void)_onNextWithId:(id)v;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsTestSubject)

FOUNDATION_EXPORT RxSubjectsTestSubject *RxSubjectsTestSubject_createWithRxSchedulersTestScheduler_(RxSchedulersTestScheduler *scheduler);

FOUNDATION_EXPORT void RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(RxSubjectsTestSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler);

FOUNDATION_EXPORT RxSubjectsTestSubject *new_RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsTestSubject *create_RxSubjectsTestSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_withRxSchedulersTestScheduler_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state, RxSchedulersTestScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsTestSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsTestSubject")
