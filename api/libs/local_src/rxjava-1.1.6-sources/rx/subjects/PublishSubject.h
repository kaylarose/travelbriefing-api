//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/PublishSubject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsPublishSubject")
#ifdef RESTRICT_RxSubjectsPublishSubject
#define INCLUDE_ALL_RxSubjectsPublishSubject 0
#else
#define INCLUDE_ALL_RxSubjectsPublishSubject 1
#endif
#undef RESTRICT_RxSubjectsPublishSubject

#if !defined (RxSubjectsPublishSubject_) && (INCLUDE_ALL_RxSubjectsPublishSubject || defined(INCLUDE_RxSubjectsPublishSubject))
#define RxSubjectsPublishSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

@class RxSubjectsSubjectSubscriptionManager;
@protocol RxObservable_OnSubscribe;

/*!
 @brief Subject that, once an <code>Observer</code> has subscribed, emits all subsequently observed items to the
 subscriber.
 <p>
 <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.PublishSubject.png" alt="">
 <p>
 Example usage:
 <p>
 @code
   PublishSubject<Object> subject = PublishSubject.create();
   // observer1 will receive all onNext and onCompleted events
   subject.subscribe(observer1);
   subject.onNext("one");
   subject.onNext("two");
   // observer2 will only receive "three" and onCompleted
   subject.subscribe(observer2);
   subject.onNext("three");
   subject.onCompleted();
 
@endcode
 */
@interface RxSubjectsPublishSubject : RxSubjectsSubject {
 @public
  RxSubjectsSubjectSubscriptionManager *state_;
}

#pragma mark Public

/*!
 @brief Creates and returns a new <code>PublishSubject</code>.
 @return the new <code>PublishSubject</code>
 */
+ (RxSubjectsPublishSubject *)create;

/*!
 @brief Returns the Throwable that terminated the Subject.
 @return the Throwable that terminated the Subject or <code>null</code> if the
 subject hasn't terminated yet or it terminated normally.
 */
- (NSException *)getThrowable;

/*!
 @brief Check if the Subject has terminated normally.
 @return true if the subject completed normally via <code>onCompleted</code>
 */
- (jboolean)hasCompleted;

- (jboolean)hasObservers;

/*!
 @brief Check if the Subject has terminated with an exception.
 @return true if the subject has received a throwable through <code>onError</code>.
 */
- (jboolean)hasThrowable;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)v;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsPublishSubject)

J2OBJC_FIELD_SETTER(RxSubjectsPublishSubject, state_, RxSubjectsSubjectSubscriptionManager *)

FOUNDATION_EXPORT RxSubjectsPublishSubject *RxSubjectsPublishSubject_create();

FOUNDATION_EXPORT void RxSubjectsPublishSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(RxSubjectsPublishSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

FOUNDATION_EXPORT RxSubjectsPublishSubject *new_RxSubjectsPublishSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsPublishSubject *create_RxSubjectsPublishSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsPublishSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsPublishSubject")
