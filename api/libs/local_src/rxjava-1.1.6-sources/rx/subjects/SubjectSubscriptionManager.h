//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/SubjectSubscriptionManager.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager")
#ifdef RESTRICT_RxSubjectsSubjectSubscriptionManager
#define INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager 0
#else
#define INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager 1
#endif
#undef RESTRICT_RxSubjectsSubjectSubscriptionManager

#if !defined (RxSubjectsSubjectSubscriptionManager_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager))
#define RxSubjectsSubjectSubscriptionManager_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_RxObservable 1
#define INCLUDE_RxObservable_OnSubscribe 1
#include "rx/Observable.h"

@class IOSObjectArray;
@class RxInternalOperatorsNotificationLite;
@class RxSubjectsSubjectSubscriptionManager_State;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;
@class RxSubscriber;
@protocol RxFunctionsAction1;

/*!
 @brief Represents the typical state and OnSubscribe logic for a Subject implementation.
 */
@interface RxSubjectsSubjectSubscriptionManager : JavaUtilConcurrentAtomicAtomicReference < RxObservable_OnSubscribe > {
 @public
  /*!
   @brief Stores the latest value or the terminal value for some Subjects.
   */
  volatile_id latest_;
  /*!
   @brief Indicates that the subject is active (cheaper than checking the state).
   */
  jboolean active_;
  /*!
   @brief Action called when a new subscriber subscribes but before it is added to the state.
   */
  id<RxFunctionsAction1> onStart_;
  /*!
   @brief Action called after the subscriber has been added to the state.
   */
  id<RxFunctionsAction1> onAdded_;
  /*!
   @brief Action called when the subscriber wants to subscribe to a terminal state.
   */
  id<RxFunctionsAction1> onTerminated_;
  /*!
   @brief The notification lite.
   */
  RxInternalOperatorsNotificationLite *nl_;
}

#pragma mark Public

- (instancetype)init;

- (void)callWithId:(RxSubscriber *)child;

- (RxSubjectsSubjectSubscriptionManager_State *)get;

- (RxSubjectsSubjectSubscriptionManager_State *)getAndSetWithId:(RxSubjectsSubjectSubscriptionManager_State *)arg0;

#pragma mark Package-Private

/*!
 @brief Try to atomically add a SubjectObserver to the active state.
 @param o the SubjectObserver to add
 @return false if the subject is already in its terminal state
 */
- (jboolean)addWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

/*!
 @brief Registers the unsubscribe action for the given subscriber.
 */
- (void)addUnsubscriberWithRxSubscriber:(RxSubscriber *)child
withRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)bo;

/*!
 @return Retrieve the latest NotificationLite value
 */
- (id)getLatest;

/*!
 @brief Set a new latest NotificationLite value and return the active observers.
 @param n the new latest value
 @return the array of SubjectObservers, don't write into the array!
 */
- (IOSObjectArray *)nextWithId:(id)n;

/*!
 @return the array of active subscribers, don't write into the array!
 */
- (IOSObjectArray *)observers;

/*!
 @brief Atomically remove the specified SubjectObserver from the active observers.
 @param o the SubjectObserver to remove
 */
- (void)removeWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

/*!
 @brief Set the latest NotificationLite value.
 */
- (void)setLatestWithId:(id)value;

/*!
 @brief Atomically set the terminal NotificationLite value (which could be any of the 3),
 clear the active observers and return the last active observers.
 @param n the terminal value
 @return the last active SubjectObservers
 */
- (IOSObjectArray *)terminateWithId:(id)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSubjectSubscriptionManager)

J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, latest_, id)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onStart_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onAdded_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, onTerminated_, id<RxFunctionsAction1>)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager, nl_, RxInternalOperatorsNotificationLite *)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_init(RxSubjectsSubjectSubscriptionManager *self);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager *new_RxSubjectsSubjectSubscriptionManager_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager *create_RxSubjectsSubjectSubscriptionManager_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager)

#endif

#if !defined (RxSubjectsSubjectSubscriptionManager_State_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager_State))
#define RxSubjectsSubjectSubscriptionManager_State_

@class IOSObjectArray;
@class RxSubjectsSubjectSubscriptionManager_SubjectObserver;

/*!
 @brief State-machine representing the termination state and active SubjectObservers.
 */
@interface RxSubjectsSubjectSubscriptionManager_State : NSObject {
 @public
  jboolean terminated_;
  IOSObjectArray *observers_;
}

+ (IOSObjectArray *)NO_OBSERVERS;

+ (RxSubjectsSubjectSubscriptionManager_State *)TERMINATED;

+ (RxSubjectsSubjectSubscriptionManager_State *)EMPTY;

#pragma mark Public

- (instancetype)initWithBoolean:(jboolean)terminated
withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray:(IOSObjectArray *)observers;

- (RxSubjectsSubjectSubscriptionManager_State *)addWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

- (RxSubjectsSubjectSubscriptionManager_State *)removeWithRxSubjectsSubjectSubscriptionManager_SubjectObserver:(RxSubjectsSubjectSubscriptionManager_SubjectObserver *)o;

@end

J2OBJC_STATIC_INIT(RxSubjectsSubjectSubscriptionManager_State)

J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_State, observers_, IOSObjectArray *)

inline IOSObjectArray *RxSubjectsSubjectSubscriptionManager_State_get_NO_OBSERVERS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *RxSubjectsSubjectSubscriptionManager_State_NO_OBSERVERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, NO_OBSERVERS, IOSObjectArray *)

inline RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, TERMINATED, RxSubjectsSubjectSubscriptionManager_State *)

inline RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *RxSubjectsSubjectSubscriptionManager_State_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsSubjectSubscriptionManager_State, EMPTY, RxSubjectsSubjectSubscriptionManager_State *)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(RxSubjectsSubjectSubscriptionManager_State *self, jboolean terminated, IOSObjectArray *observers);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *new_RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(jboolean terminated, IOSObjectArray *observers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_State *create_RxSubjectsSubjectSubscriptionManager_State_initWithBoolean_withRxSubjectsSubjectSubscriptionManager_SubjectObserverArray_(jboolean terminated, IOSObjectArray *observers);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager_State)

#endif

#if !defined (RxSubjectsSubjectSubscriptionManager_SubjectObserver_) && (INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager || defined(INCLUDE_RxSubjectsSubjectSubscriptionManager_SubjectObserver))
#define RxSubjectsSubjectSubscriptionManager_SubjectObserver_

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

@class RxInternalOperatorsNotificationLite;
@class RxSubscriber;
@protocol JavaUtilList;

/*!
 @brief Observer wrapping the actual Subscriber and providing various
 emission facilities.
 */
@interface RxSubjectsSubjectSubscriptionManager_SubjectObserver : NSObject < RxObserver > {
 @public
  /*!
   @brief The actual Observer.
   */
  RxSubscriber *actual_;
  /*!
   @brief Was the emitFirst run?
   Guarded by this. 
   */
  jboolean first_;
  /*!
   @brief Guarded by this.
   */
  jboolean emitting_;
  /*!
   @brief Guarded by this.
   */
  id<JavaUtilList> queue_;
  jboolean fastPath_;
  /*!
   @brief Indicate that the observer has caught up.
   */
  volatile_jboolean caughtUp_;
}

#pragma mark Public

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual;

/*!
 @brief Returns the stored index.
 @return the index value
 */
- (id)index;

/*!
 @brief Sets a new index value.
 @param newIndex the new index value
 */
- (void)indexWithId:(id)newIndex;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

#pragma mark Protected

/*!
 @brief Dispatches a NotificationLite value to the actual Observer.
 @param n the value to dispatch
 @param nl the type-appropriate notification lite object
 */
- (void)acceptWithId:(id)n
withRxInternalOperatorsNotificationLite:(RxInternalOperatorsNotificationLite *)nl;

/*!
 @brief Tries to emit a NotificationLite value as the first
 value and drains the queue as long as possible.
 @param n the NotificationLite value
 @param nl the type-appropriate notification lite object
 */
- (void)emitFirstWithId:(id)n
withRxInternalOperatorsNotificationLite:(RxInternalOperatorsNotificationLite *)nl;

/*!
 @brief Emits the contents of the queue as long as there are values.
 @param localQueue the initial queue contents
 @param current the current content to emit
 @param nl the type-appropriate notification lite object
 */
- (void)emitLoopWithJavaUtilList:(id<JavaUtilList>)localQueue
                          withId:(id)current
withRxInternalOperatorsNotificationLite:(RxInternalOperatorsNotificationLite *)nl;

/*!
 @brief Emits the given NotificationLite value and
 prevents the emitFirst to run if not already run.
 @param n the NotificationLite value
 @param nl the type-appropriate notification lite object
 */
- (void)emitNextWithId:(id)n
withRxInternalOperatorsNotificationLite:(RxInternalOperatorsNotificationLite *)nl;

/*!
 @return the actual Observer.
 */
- (id<RxObserver>)getActual;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsSubjectSubscriptionManager_SubjectObserver)

J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_SubjectObserver, actual_, RxSubscriber *)
J2OBJC_FIELD_SETTER(RxSubjectsSubjectSubscriptionManager_SubjectObserver, queue_, id<JavaUtilList>)

FOUNDATION_EXPORT void RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubjectsSubjectSubscriptionManager_SubjectObserver *self, RxSubscriber *actual);

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_SubjectObserver *new_RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubscriber *actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsSubjectSubscriptionManager_SubjectObserver *create_RxSubjectsSubjectSubscriptionManager_SubjectObserver_initWithRxSubscriber_(RxSubscriber *actual);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsSubjectSubscriptionManager_SubjectObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsSubjectSubscriptionManager")
