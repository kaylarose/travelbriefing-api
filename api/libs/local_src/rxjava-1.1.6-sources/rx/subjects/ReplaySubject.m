//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/ReplaySubject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/Scheduler.h"
#include "rx/Subscriber.h"
#include "rx/exceptions/Exceptions.h"
#include "rx/internal/operators/BackpressureUtils.h"
#include "rx/internal/util/RxJavaPluginUtils.h"
#include "rx/subjects/ReplaySubject.h"
#include "rx/subjects/Subject.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

/*!
 @brief An empty array to trigger getValues() to return a new array.
 */
inline IOSObjectArray *RxSubjectsReplaySubject_get_EMPTY_ARRAY();
static IOSObjectArray *RxSubjectsReplaySubject_EMPTY_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxSubjectsReplaySubject, EMPTY_ARRAY, IOSObjectArray *)

/*!
 */
inline jlong RxSubjectsReplaySubject_ReplayState_get_serialVersionUID();
#define RxSubjectsReplaySubject_ReplayState_serialVersionUID 5952362471246910544LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSubjectsReplaySubject_ReplayState, serialVersionUID, jlong)

@interface RxSubjectsReplaySubject_ReplayBuffer : NSObject

@end

/*!
 */
inline jlong RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_get_serialVersionUID();
#define RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_serialVersionUID 3713592843205853725LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node, serialVersionUID, jlong)

/*!
 */
inline jlong RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_get_serialVersionUID();
#define RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_serialVersionUID 3713592843205853725LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode, serialVersionUID, jlong)

/*!
 */
inline jlong RxSubjectsReplaySubject_ReplayProducer_get_serialVersionUID();
#define RxSubjectsReplaySubject_ReplayProducer_serialVersionUID -5006209596735204567LL
J2OBJC_STATIC_FIELD_CONSTANT(RxSubjectsReplaySubject_ReplayProducer, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(RxSubjectsReplaySubject)

@implementation RxSubjectsReplaySubject

+ (RxSubjectsReplaySubject *)create {
  return RxSubjectsReplaySubject_create();
}

+ (RxSubjectsReplaySubject *)createWithInt:(jint)capacity {
  return RxSubjectsReplaySubject_createWithInt_(capacity);
}

+ (RxSubjectsReplaySubject *)createUnbounded {
  return RxSubjectsReplaySubject_createUnbounded();
}

+ (RxSubjectsReplaySubject *)createWithSizeWithInt:(jint)size {
  return RxSubjectsReplaySubject_createWithSizeWithInt_(size);
}

+ (RxSubjectsReplaySubject *)createWithTimeWithLong:(jlong)time
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                    withRxScheduler:(RxScheduler *)scheduler {
  return RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(time, unit, scheduler);
}

+ (RxSubjectsReplaySubject *)createWithTimeAndSizeWithLong:(jlong)time
                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                   withInt:(jint)size
                                           withRxScheduler:(RxScheduler *)scheduler {
  return RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(time, unit, size, scheduler);
}

- (instancetype)initWithRxSubjectsReplaySubject_ReplayState:(RxSubjectsReplaySubject_ReplayState *)state {
  RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(self, state);
  return self;
}

- (void)onNextWithId:(id)t {
  [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) onErrorWithNSException:e];
}

- (void)onCompleted {
  [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) onCompleted];
}

- (jint)subscriberCount {
  return ((IOSObjectArray *) nil_chk([((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) get]))->size_;
}

- (jboolean)hasObservers {
  return ((IOSObjectArray *) nil_chk([((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) get]))->size_ != 0;
}

- (jboolean)hasThrowable {
  return [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) isTerminated] && [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(state_->buffer_)) error] != nil;
}

- (jboolean)hasCompleted {
  return [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) isTerminated] && [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(state_->buffer_)) error] == nil;
}

- (NSException *)getThrowable {
  if ([((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) isTerminated]) {
    return [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(state_->buffer_)) error];
  }
  return nil;
}

- (jint)size {
  return [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_))->buffer_)) size];
}

- (jboolean)hasAnyValue {
  return ![((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_))->buffer_)) isEmpty];
}

- (jboolean)hasValue {
  return [self hasAnyValue];
}

- (IOSObjectArray *)getValuesWithNSObjectArray:(IOSObjectArray *)a {
  return [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_))->buffer_)) toArrayWithNSObjectArray:a];
}

- (IOSObjectArray *)getValues {
  IOSObjectArray *r = [self getValuesWithNSObjectArray:RxSubjectsReplaySubject_EMPTY_ARRAY];
  if (r == RxSubjectsReplaySubject_EMPTY_ARRAY) {
    return [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()];
  }
  return r;
}

- (id)getValue {
  return [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_))->buffer_)) last];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", "LRxSubjectsReplaySubject;", 0x9, -1, -1, -1, 0, -1, -1 },
    { "createWithInt:", "LRxSubjectsReplaySubject;", 0x9, 1, 2, -1, 3, -1, -1 },
    { "createUnbounded", "LRxSubjectsReplaySubject;", 0x8, -1, -1, -1, 0, -1, -1 },
    { "createWithSizeWithInt:", "LRxSubjectsReplaySubject;", 0x9, 4, 2, -1, 3, -1, -1 },
    { "createWithTimeWithLong:withJavaUtilConcurrentTimeUnit:withRxScheduler:", "LRxSubjectsReplaySubject;", 0x9, 5, 6, -1, 7, -1, -1 },
    { "createWithTimeAndSizeWithLong:withJavaUtilConcurrentTimeUnit:withInt:withRxScheduler:", "LRxSubjectsReplaySubject;", 0x9, 8, 9, -1, 10, -1, -1 },
    { "initWithRxSubjectsReplaySubject_ReplayState:", NULL, 0x0, -1, 11, -1, 12, -1, -1 },
    { "onNextWithId:", "V", 0x1, 13, 14, -1, 15, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "subscriberCount", "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { "hasObservers", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasThrowable", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasCompleted", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getThrowable", "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "size", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasAnyValue", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasValue", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getValuesWithNSObjectArray:", "[LNSObject;", 0x1, 18, 19, -1, -1, -1, -1 },
    { "getValues", "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "getValue", "LNSObject;", 0x1, -1, -1, -1, 20, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LRxSubjectsReplaySubject_ReplayState;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "EMPTY_ARRAY", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lrx/subjects/ReplaySubject<TT;>;", "create", "I", "<T:Ljava/lang/Object;>(I)Lrx/subjects/ReplaySubject<TT;>;", "createWithSize", "createWithTime", "JLJavaUtilConcurrentTimeUnit;LRxScheduler;", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/subjects/ReplaySubject<TT;>;", "createWithTimeAndSize", "JLJavaUtilConcurrentTimeUnit;ILRxScheduler;", "<T:Ljava/lang/Object;>(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/subjects/ReplaySubject<TT;>;", "LRxSubjectsReplaySubject_ReplayState;", "(Lrx/subjects/ReplaySubject$ReplayState<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "getValues", "[LNSObject;", "()TT;", "Lrx/subjects/ReplaySubject$ReplayState<TT;>;", &RxSubjectsReplaySubject_EMPTY_ARRAY, "LRxSubjectsReplaySubject_ReplayState;LRxSubjectsReplaySubject_ReplayBuffer;LRxSubjectsReplaySubject_ReplayUnboundedBuffer;LRxSubjectsReplaySubject_ReplaySizeBoundBuffer;LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer;LRxSubjectsReplaySubject_ReplayProducer;", "<T:Ljava/lang/Object;>Lrx/subjects/Subject<TT;TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject = { "ReplaySubject", "rx.subjects", ptrTable, methods, fields, 7, 0x11, 21, 2, -1, 23, -1, 24, -1 };
  return &_RxSubjectsReplaySubject;
}

+ (void)initialize {
  if (self == [RxSubjectsReplaySubject class]) {
    RxSubjectsReplaySubject_EMPTY_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()];
    J2OBJC_SET_INITIALIZED(RxSubjectsReplaySubject)
  }
}

@end

RxSubjectsReplaySubject *RxSubjectsReplaySubject_create() {
  RxSubjectsReplaySubject_initialize();
  return RxSubjectsReplaySubject_createWithInt_(16);
}

RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithInt_(jint capacity) {
  RxSubjectsReplaySubject_initialize();
  if (capacity <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"capacity > 0 required but it was ", capacity));
  }
  id<RxSubjectsReplaySubject_ReplayBuffer> buffer = new_RxSubjectsReplaySubject_ReplayUnboundedBuffer_initWithInt_(capacity);
  RxSubjectsReplaySubject_ReplayState *state = new_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(buffer);
  return new_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(state);
}

RxSubjectsReplaySubject *RxSubjectsReplaySubject_createUnbounded() {
  RxSubjectsReplaySubject_initialize();
  id<RxSubjectsReplaySubject_ReplayBuffer> buffer = new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(JavaLangInteger_MAX_VALUE);
  RxSubjectsReplaySubject_ReplayState *state = new_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(buffer);
  return new_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(state);
}

RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithSizeWithInt_(jint size) {
  RxSubjectsReplaySubject_initialize();
  id<RxSubjectsReplaySubject_ReplayBuffer> buffer = new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(size);
  RxSubjectsReplaySubject_ReplayState *state = new_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(buffer);
  return new_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(state);
}

RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithTimeWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler) {
  RxSubjectsReplaySubject_initialize();
  return RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(time, unit, JavaLangInteger_MAX_VALUE, scheduler);
}

RxSubjectsReplaySubject *RxSubjectsReplaySubject_createWithTimeAndSizeWithLong_withJavaUtilConcurrentTimeUnit_withInt_withRxScheduler_(jlong time, JavaUtilConcurrentTimeUnit *unit, jint size, RxScheduler *scheduler) {
  RxSubjectsReplaySubject_initialize();
  id<RxSubjectsReplaySubject_ReplayBuffer> buffer = new_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_initWithInt_withLong_withRxScheduler_(size, [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMillisWithLong:time], scheduler);
  RxSubjectsReplaySubject_ReplayState *state = new_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(buffer);
  return new_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(state);
}

void RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(RxSubjectsReplaySubject *self, RxSubjectsReplaySubject_ReplayState *state) {
  RxSubjectsSubject_initWithRxObservable_OnSubscribe_(self, state);
  self->state_ = state;
}

RxSubjectsReplaySubject *new_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(RxSubjectsReplaySubject_ReplayState *state) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject, initWithRxSubjectsReplaySubject_ReplayState_, state)
}

RxSubjectsReplaySubject *create_RxSubjectsReplaySubject_initWithRxSubjectsReplaySubject_ReplayState_(RxSubjectsReplaySubject_ReplayState *state) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject, initWithRxSubjectsReplaySubject_ReplayState_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject)

J2OBJC_INITIALIZED_DEFN(RxSubjectsReplaySubject_ReplayState)

IOSObjectArray *RxSubjectsReplaySubject_ReplayState_EMPTY;
IOSObjectArray *RxSubjectsReplaySubject_ReplayState_TERMINATED;

@implementation RxSubjectsReplaySubject_ReplayState

+ (IOSObjectArray *)EMPTY {
  return RxSubjectsReplaySubject_ReplayState_EMPTY;
}

+ (IOSObjectArray *)TERMINATED {
  return RxSubjectsReplaySubject_ReplayState_TERMINATED;
}

- (instancetype)initWithRxSubjectsReplaySubject_ReplayBuffer:(id<RxSubjectsReplaySubject_ReplayBuffer>)buffer {
  RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(self, buffer);
  return self;
}

- (void)callWithId:(RxSubscriber *)t {
  RxSubjectsReplaySubject_ReplayProducer *rp = new_RxSubjectsReplaySubject_ReplayProducer_initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_(t, self);
  [((RxSubscriber *) nil_chk(t)) addWithRxSubscription:rp];
  [t setProducerWithRxProducer:rp];
  if ([self addWithRxSubjectsReplaySubject_ReplayProducer:rp]) {
    if ([rp isUnsubscribed]) {
      [self removeWithRxSubjectsReplaySubject_ReplayProducer:rp];
      return;
    }
  }
  [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(buffer_)) drainWithRxSubjectsReplaySubject_ReplayProducer:rp];
}

- (jboolean)addWithRxSubjectsReplaySubject_ReplayProducer:(RxSubjectsReplaySubject_ReplayProducer *)rp {
  for (; ; ) {
    IOSObjectArray *a = [self get];
    if (a == RxSubjectsReplaySubject_ReplayState_TERMINATED) {
      return false;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    IOSObjectArray *b = [IOSObjectArray newArrayWithLength:n + 1 type:RxSubjectsReplaySubject_ReplayProducer_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, n);
    (void) IOSObjectArray_Set(b, n, rp);
    if ([self compareAndSetWithId:a withId:b]) {
      return true;
    }
  }
}

- (void)removeWithRxSubjectsReplaySubject_ReplayProducer:(RxSubjectsReplaySubject_ReplayProducer *)rp {
  for (; ; ) {
    IOSObjectArray *a = [self get];
    if (a == RxSubjectsReplaySubject_ReplayState_TERMINATED || a == RxSubjectsReplaySubject_ReplayState_EMPTY) {
      return;
    }
    jint n = ((IOSObjectArray *) nil_chk(a))->size_;
    jint j = -1;
    for (jint i = 0; i < n; i++) {
      if (IOSObjectArray_Get(a, i) == rp) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *b;
    if (n == 1) {
      b = RxSubjectsReplaySubject_ReplayState_EMPTY;
    }
    else {
      b = [IOSObjectArray newArrayWithLength:n - 1 type:RxSubjectsReplaySubject_ReplayProducer_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, j + 1, b, j, n - j - 1);
    }
    if ([self compareAndSetWithId:a withId:b]) {
      return;
    }
  }
}

- (void)onNextWithId:(id)t {
  id<RxSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) nextWithId:t];
  {
    IOSObjectArray *a__ = [self get];
    RxSubjectsReplaySubject_ReplayProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    RxSubjectsReplaySubject_ReplayProducer * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      RxSubjectsReplaySubject_ReplayProducer *rp = *b__++;
      if (((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp))->caughtUp_) {
        [((RxSubscriber *) nil_chk(rp->actual_)) onNextWithId:t];
      }
      else {
        if ([b drainWithRxSubjectsReplaySubject_ReplayProducer:rp]) {
          rp->caughtUp_ = true;
          rp->node_ = nil;
        }
      }
    }
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  id<RxSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) errorWithNSException:e];
  id<JavaUtilList> errors = nil;
  {
    IOSObjectArray *a__ = [self getAndSetWithId:RxSubjectsReplaySubject_ReplayState_TERMINATED];
    RxSubjectsReplaySubject_ReplayProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    RxSubjectsReplaySubject_ReplayProducer * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      RxSubjectsReplaySubject_ReplayProducer *rp = *b__++;
      @try {
        if (((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp))->caughtUp_) {
          [((RxSubscriber *) nil_chk(rp->actual_)) onErrorWithNSException:e];
        }
        else {
          if ([b drainWithRxSubjectsReplaySubject_ReplayProducer:rp]) {
            rp->caughtUp_ = true;
            rp->node_ = nil;
          }
        }
      }
      @catch (NSException *ex) {
        if (errors == nil) {
          errors = new_JavaUtilArrayList_init();
        }
        [errors addWithId:ex];
      }
    }
  }
  RxExceptionsExceptions_throwIfAnyWithJavaUtilList_(errors);
}

- (void)onCompleted {
  id<RxSubjectsReplaySubject_ReplayBuffer> b = buffer_;
  [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(b)) complete];
  {
    IOSObjectArray *a__ = [self getAndSetWithId:RxSubjectsReplaySubject_ReplayState_TERMINATED];
    RxSubjectsReplaySubject_ReplayProducer * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    RxSubjectsReplaySubject_ReplayProducer * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      RxSubjectsReplaySubject_ReplayProducer *rp = *b__++;
      if (((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp))->caughtUp_) {
        [((RxSubscriber *) nil_chk(rp->actual_)) onCompleted];
      }
      else {
        if ([b drainWithRxSubjectsReplaySubject_ReplayProducer:rp]) {
          rp->caughtUp_ = true;
          rp->node_ = nil;
        }
      }
    }
  }
}

- (jboolean)isTerminated {
  return [self get] == RxSubjectsReplaySubject_ReplayState_TERMINATED;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubjectsReplaySubject_ReplayBuffer:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "callWithId:", "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { "addWithRxSubjectsReplaySubject_ReplayProducer:", "Z", 0x0, 5, 6, -1, 7, -1, -1 },
    { "removeWithRxSubjectsReplaySubject_ReplayProducer:", "V", 0x0, 8, 6, -1, 9, -1, -1 },
    { "onNextWithId:", "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { "onCompleted", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isTerminated", "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSubjectsReplaySubject_ReplayState_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "LRxSubjectsReplaySubject_ReplayBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "EMPTY", "[LRxSubjectsReplaySubject_ReplayProducer;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "TERMINATED", "[LRxSubjectsReplaySubject_ReplayProducer;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubjectsReplaySubject_ReplayBuffer;", "(Lrx/subjects/ReplaySubject$ReplayBuffer<TT;>;)V", "call", "LRxSubscriber;", "(Lrx/Subscriber<-TT;>;)V", "add", "LRxSubjectsReplaySubject_ReplayProducer;", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)Z", "remove", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lrx/subjects/ReplaySubject$ReplayBuffer<TT;>;", &RxSubjectsReplaySubject_ReplayState_EMPTY, &RxSubjectsReplaySubject_ReplayState_TERMINATED, "LRxSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<[Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;>;Lrx/Observable$OnSubscribe<TT;>;Lrx/Observer<TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplayState = { "ReplayState", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 8, 4, 18, -1, -1, 19, -1 };
  return &_RxSubjectsReplaySubject_ReplayState;
}

+ (void)initialize {
  if (self == [RxSubjectsReplaySubject_ReplayState class]) {
    RxSubjectsReplaySubject_ReplayState_EMPTY = [IOSObjectArray newArrayWithLength:0 type:RxSubjectsReplaySubject_ReplayProducer_class_()];
    RxSubjectsReplaySubject_ReplayState_TERMINATED = [IOSObjectArray newArrayWithLength:0 type:RxSubjectsReplaySubject_ReplayProducer_class_()];
    J2OBJC_SET_INITIALIZED(RxSubjectsReplaySubject_ReplayState)
  }
}

@end

void RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(RxSubjectsReplaySubject_ReplayState *self, id<RxSubjectsReplaySubject_ReplayBuffer> buffer) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->buffer_ = buffer;
  [self lazySetWithId:RxSubjectsReplaySubject_ReplayState_EMPTY];
}

RxSubjectsReplaySubject_ReplayState *new_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(id<RxSubjectsReplaySubject_ReplayBuffer> buffer) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplayState, initWithRxSubjectsReplaySubject_ReplayBuffer_, buffer)
}

RxSubjectsReplaySubject_ReplayState *create_RxSubjectsReplaySubject_ReplayState_initWithRxSubjectsReplaySubject_ReplayBuffer_(id<RxSubjectsReplaySubject_ReplayBuffer> buffer) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplayState, initWithRxSubjectsReplaySubject_ReplayBuffer_, buffer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplayState)

@implementation RxSubjectsReplaySubject_ReplayBuffer

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nextWithId:", "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { "errorWithNSException:", "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { "complete", "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { "drainWithRxSubjectsReplaySubject_ReplayProducer:", "Z", 0x401, 5, 6, -1, 7, -1, -1 },
    { "isComplete", "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { "error", "LNSException;", 0x401, -1, -1, -1, -1, -1, -1 },
    { "last", "LNSObject;", 0x401, -1, -1, -1, 8, -1, -1 },
    { "size", "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { "toArrayWithNSObjectArray:", "[LNSObject;", 0x401, 9, 10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "next", "LNSObject;", "(TT;)V", "error", "LNSException;", "drain", "LRxSubjectsReplaySubject_ReplayProducer;", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)Z", "()TT;", "toArray", "[LNSObject;", "LRxSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplayBuffer = { "ReplayBuffer", "rx.subjects", ptrTable, methods, NULL, 7, 0x608, 10, 0, 11, -1, -1, 12, -1 };
  return &_RxSubjectsReplaySubject_ReplayBuffer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplayBuffer)

@implementation RxSubjectsReplaySubject_ReplayUnboundedBuffer

- (instancetype)initWithInt:(jint)capacity {
  RxSubjectsReplaySubject_ReplayUnboundedBuffer_initWithInt_(self, capacity);
  return self;
}

- (void)nextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  jint i = tailIndex_;
  IOSObjectArray *a = tail_;
  if (i == ((IOSObjectArray *) nil_chk(a))->size_ - 1) {
    IOSObjectArray *b = [IOSObjectArray newArrayWithLength:a->size_ type:NSObject_class_()];
    (void) IOSObjectArray_Set(b, 0, t);
    tailIndex_ = 1;
    (void) IOSObjectArray_Set(a, i, b);
    tail_ = b;
  }
  else {
    (void) IOSObjectArray_Set(a, i, t);
    tailIndex_ = i + 1;
  }
  size_++;
}

- (void)errorWithNSException:(NSException *)e {
  if (JreLoadVolatileBoolean(&done_)) {
    RxInternalUtilRxJavaPluginUtils_handleExceptionWithNSException_(e);
    return;
  }
  error_ = e;
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  JreAssignVolatileBoolean(&done_, true);
}

- (jboolean)drainWithRxSubjectsReplaySubject_ReplayProducer:(RxSubjectsReplaySubject_ReplayProducer *)rp {
  if ([((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp)) getAndIncrement] != 0) {
    return false;
  }
  jint missed = 1;
  RxSubscriber *a = rp->actual_;
  jint n = capacity_;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rp->requested_)) get];
    jlong e = 0LL;
    IOSObjectArray *node = (IOSObjectArray *) cast_check(rp->node_, IOSClass_arrayType(NSObject_class_(), 1));
    if (node == nil) {
      node = head_;
    }
    jint tailIndex = rp->tailIndex_;
    jint index = rp->index_;
    while (e != r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty = index == JreLoadVolatileInt(&size_);
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
      if (empty) {
        break;
      }
      if (tailIndex == n) {
        node = (IOSObjectArray *) cast_check(IOSObjectArray_Get(nil_chk(node), tailIndex), IOSClass_arrayType(NSObject_class_(), 1));
        tailIndex = 0;
      }
      id v = IOSObjectArray_Get(nil_chk(node), tailIndex);
      [a onNextWithId:v];
      e++;
      tailIndex++;
      index++;
    }
    if (e == r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty = index == JreLoadVolatileInt(&size_);
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
    }
    if (e != 0LL) {
      if (r != JavaLangLong_MAX_VALUE) {
        RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(rp->requested_, e);
      }
    }
    rp->index_ = index;
    rp->tailIndex_ = tailIndex;
    rp->node_ = node;
    missed = [rp addAndGetWithInt:-missed];
    if (missed == 0) {
      return r == JavaLangLong_MAX_VALUE;
    }
  }
}

- (jboolean)isComplete {
  return JreLoadVolatileBoolean(&done_);
}

- (NSException *)error {
  return error_;
}

- (id)last {
  jint s = JreLoadVolatileInt(&size_);
  if (s == 0) {
    return nil;
  }
  IOSObjectArray *h = head_;
  jint n = capacity_;
  while (s >= n) {
    h = (IOSObjectArray *) cast_check(IOSObjectArray_Get(nil_chk(h), n), IOSClass_arrayType(NSObject_class_(), 1));
    s -= n;
  }
  return IOSObjectArray_Get(nil_chk(h), s - 1);
}

- (jint)size {
  return JreLoadVolatileInt(&size_);
}

- (jboolean)isEmpty {
  return JreLoadVolatileInt(&size_) == 0;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  jint s = JreLoadVolatileInt(&size_);
  if (((IOSObjectArray *) nil_chk(a))->size_ < s) {
    a = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[a getClass] getComponentType], s), IOSClass_arrayType(NSObject_class_(), 1));
  }
  IOSObjectArray *h = head_;
  jint n = capacity_;
  jint j = 0;
  while (j + n < s) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(h, 0, a, j, n);
    j += n;
    h = (IOSObjectArray *) cast_check(IOSObjectArray_Get(nil_chk(h), n), IOSClass_arrayType(NSObject_class_(), 1));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(h, 0, a, j, s - j);
  if (((IOSObjectArray *) nil_chk(a))->size_ > s) {
    (void) IOSObjectArray_Set(a, s, nil);
  }
  return a;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "nextWithId:", "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { "errorWithNSException:", "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { "complete", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "drainWithRxSubjectsReplaySubject_ReplayProducer:", "Z", 0x1, 6, 7, -1, 8, -1, -1 },
    { "isComplete", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "error", "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "last", "LNSObject;", 0x1, -1, -1, -1, 9, -1, -1 },
    { "size", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "toArrayWithNSObjectArray:", "[LNSObject;", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "capacity_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "head_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tail_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tailIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LNSException;", "drain", "LRxSubjectsReplaySubject_ReplayProducer;", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)Z", "()TT;", "toArray", "[LNSObject;", "LRxSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplayUnboundedBuffer = { "ReplayUnboundedBuffer", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 11, 7, 12, -1, -1, 13, -1 };
  return &_RxSubjectsReplaySubject_ReplayUnboundedBuffer;
}

@end

void RxSubjectsReplaySubject_ReplayUnboundedBuffer_initWithInt_(RxSubjectsReplaySubject_ReplayUnboundedBuffer *self, jint capacity) {
  NSObject_init(self);
  self->capacity_ = capacity;
  self->tail_ = self->head_ = [IOSObjectArray newArrayWithLength:capacity + 1 type:NSObject_class_()];
}

RxSubjectsReplaySubject_ReplayUnboundedBuffer *new_RxSubjectsReplaySubject_ReplayUnboundedBuffer_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplayUnboundedBuffer, initWithInt_, capacity)
}

RxSubjectsReplaySubject_ReplayUnboundedBuffer *create_RxSubjectsReplaySubject_ReplayUnboundedBuffer_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplayUnboundedBuffer, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplayUnboundedBuffer)

@implementation RxSubjectsReplaySubject_ReplaySizeBoundBuffer

- (instancetype)initWithInt:(jint)limit {
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(self, limit);
  return self;
}

- (void)nextWithId:(id)value {
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *n = new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(value);
  [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(tail_)) setWithId:n];
  tail_ = n;
  jint s = size_;
  if (s == limit_) {
    (void) JreVolatileStrongAssign(&head_, [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(JreLoadVolatileId(&head_))) get]);
  }
  else {
    size_ = s + 1;
  }
}

- (void)errorWithNSException:(NSException *)ex {
  error_ = ex;
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  JreAssignVolatileBoolean(&done_, true);
}

- (jboolean)drainWithRxSubjectsReplaySubject_ReplayProducer:(RxSubjectsReplaySubject_ReplayProducer *)rp {
  if ([((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp)) getAndIncrement] != 0) {
    return false;
  }
  RxSubscriber *a = rp->actual_;
  jint missed = 1;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rp->requested_)) get];
    jlong e = 0LL;
    RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *node = (RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) cast_chk(rp->node_, [RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node class]);
    if (node == nil) {
      node = JreLoadVolatileId(&head_);
    }
    while (e != r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *next = [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(node)) get];
      jboolean empty = next == nil;
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
      if (empty) {
        break;
      }
      [a onNextWithId:((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(next))->value_Node_];
      e++;
      node = next;
    }
    if (e == r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty = [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(node)) get] == nil;
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
    }
    if (e != 0LL) {
      if (r != JavaLangLong_MAX_VALUE) {
        RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(rp->requested_, e);
      }
    }
    rp->node_ = node;
    missed = [rp addAndGetWithInt:-missed];
    if (missed == 0) {
      return r == JavaLangLong_MAX_VALUE;
    }
  }
}

- (jboolean)isComplete {
  return JreLoadVolatileBoolean(&done_);
}

- (NSException *)error {
  return error_;
}

- (id)last {
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *h = JreLoadVolatileId(&head_);
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *n;
  while ((n = [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(h)) get]) != nil) {
    h = n;
  }
  return h->value_Node_;
}

- (jint)size {
  jint s = 0;
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *n = [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(JreLoadVolatileId(&head_))) get];
  while (n != nil && s != JavaLangInteger_MAX_VALUE) {
    n = [n get];
    s++;
  }
  return s;
}

- (jboolean)isEmpty {
  return [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(JreLoadVolatileId(&head_))) get] == nil;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *n = [((RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *) nil_chk(JreLoadVolatileId(&head_))) get];
  while (n != nil) {
    [list addWithId:n->value_Node_];
    n = [n get];
  }
  return [list toArrayWithNSObjectArray:a];
}

- (void)__javaClone:(RxSubjectsReplaySubject_ReplaySizeBoundBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  JreReleaseVolatile(&head_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "nextWithId:", "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { "errorWithNSException:", "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { "complete", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "drainWithRxSubjectsReplaySubject_ReplayProducer:", "Z", 0x1, 6, 7, -1, 8, -1, -1 },
    { "isComplete", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "error", "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "last", "LNSObject;", 0x1, -1, -1, -1, 9, -1, -1 },
    { "size", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "toArrayWithNSObjectArray:", "[LNSObject;", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "head_", "LRxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node;", .constantValue.asLong = 0, 0x40, -1, -1, 12, -1 },
    { "tail_", "LRxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "next", "LNSObject;", "(TT;)V", "error", "LNSException;", "drain", "LRxSubjectsReplaySubject_ReplayProducer;", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)Z", "()TT;", "toArray", "[LNSObject;", "Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node<TT;>;", "LRxSubjectsReplaySubject;", "LRxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplaySizeBoundBuffer = { "ReplaySizeBoundBuffer", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 11, 6, 13, 14, -1, 15, -1 };
  return &_RxSubjectsReplaySubject_ReplaySizeBoundBuffer;
}

@end

void RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(RxSubjectsReplaySubject_ReplaySizeBoundBuffer *self, jint limit) {
  NSObject_init(self);
  self->limit_ = limit;
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *n = new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(nil);
  self->tail_ = n;
  (void) JreVolatileStrongAssign(&self->head_, n);
}

RxSubjectsReplaySubject_ReplaySizeBoundBuffer *new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(jint limit) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplaySizeBoundBuffer, initWithInt_, limit)
}

RxSubjectsReplaySubject_ReplaySizeBoundBuffer *create_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_initWithInt_(jint limit) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplaySizeBoundBuffer, initWithInt_, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplaySizeBoundBuffer)

@implementation RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node

- (instancetype)initWithId:(id)value {
  RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(self, value);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_Node_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "value", "TT;", "LRxSubjectsReplaySubject_ReplaySizeBoundBuffer;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lrx/subjects/ReplaySubject$ReplaySizeBoundBuffer$Node<TT;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node = { "Node", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 1, 2, 4, -1, -1, 5, -1 };
  return &_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node;
}

@end

void RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *self, id value) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->value_Node_ = value;
}

RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *new_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(id value) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node, initWithId_, value)
}

RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node *create_RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplaySizeBoundBuffer_Node)

@implementation RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer

- (instancetype)initWithInt:(jint)limit
                   withLong:(jlong)maxAgeMillis
            withRxScheduler:(RxScheduler *)scheduler {
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_initWithInt_withLong_withRxScheduler_(self, limit, maxAgeMillis, scheduler);
  return self;
}

- (void)nextWithId:(id)value {
  jlong now = [((RxScheduler *) nil_chk(scheduler_)) now];
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n = new_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(value, now);
  [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(tail_)) setWithId:n];
  tail_ = n;
  now -= maxAgeMillis_;
  jint s = size_;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h0 = JreLoadVolatileId(&head_);
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h = h0;
  if (s == limit_) {
    h = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(h)) get];
  }
  else {
    s++;
  }
  while ((n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(h)) get]) != nil) {
    if (((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(n))->timestamp_ > now) {
      break;
    }
    h = n;
    s--;
  }
  size_ = s;
  if (h != h0) {
    (void) JreVolatileStrongAssign(&head_, h);
  }
}

- (void)errorWithNSException:(NSException *)ex {
  [self evictFinal];
  error_ = ex;
  JreAssignVolatileBoolean(&done_, true);
}

- (void)complete {
  [self evictFinal];
  JreAssignVolatileBoolean(&done_, true);
}

- (void)evictFinal {
  jlong now = [((RxScheduler *) nil_chk(scheduler_)) now] - maxAgeMillis_;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h0 = JreLoadVolatileId(&head_);
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h = h0;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n;
  while ((n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(h)) get]) != nil) {
    if (((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(n))->timestamp_ > now) {
      break;
    }
    h = n;
  }
  if (h0 != h) {
    (void) JreVolatileStrongAssign(&head_, h);
  }
}

- (RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *)latestHead {
  jlong now = [((RxScheduler *) nil_chk(scheduler_)) now] - maxAgeMillis_;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h = JreLoadVolatileId(&head_);
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n;
  while ((n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(h)) get]) != nil) {
    if (((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(n))->timestamp_ > now) {
      break;
    }
    h = n;
  }
  return h;
}

- (jboolean)drainWithRxSubjectsReplaySubject_ReplayProducer:(RxSubjectsReplaySubject_ReplayProducer *)rp {
  if ([((RxSubjectsReplaySubject_ReplayProducer *) nil_chk(rp)) getAndIncrement] != 0) {
    return false;
  }
  RxSubscriber *a = rp->actual_;
  jint missed = 1;
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(rp->requested_)) get];
    jlong e = 0LL;
    RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *node = (RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) cast_chk(rp->node_, [RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode class]);
    if (node == nil) {
      node = [self latestHead];
    }
    while (e != r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *next = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(node)) get];
      jboolean empty = next == nil;
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
      if (empty) {
        break;
      }
      [a onNextWithId:((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(next))->value_TimedNode_];
      e++;
      node = next;
    }
    if (e == r) {
      if ([((RxSubscriber *) nil_chk(a)) isUnsubscribed]) {
        rp->node_ = nil;
        return false;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      jboolean empty = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(node)) get] == nil;
      if (d && empty) {
        rp->node_ = nil;
        NSException *ex = error_;
        if (ex != nil) {
          [a onErrorWithNSException:ex];
        }
        else {
          [a onCompleted];
        }
        return false;
      }
    }
    if (e != 0LL) {
      if (r != JavaLangLong_MAX_VALUE) {
        RxInternalOperatorsBackpressureUtils_producedWithJavaUtilConcurrentAtomicAtomicLong_withLong_(rp->requested_, e);
      }
    }
    rp->node_ = node;
    missed = [rp addAndGetWithInt:-missed];
    if (missed == 0) {
      return r == JavaLangLong_MAX_VALUE;
    }
  }
}

- (jboolean)isComplete {
  return JreLoadVolatileBoolean(&done_);
}

- (NSException *)error {
  return error_;
}

- (id)last {
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *h = [self latestHead];
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n;
  while ((n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk(h)) get]) != nil) {
    h = n;
  }
  return h->value_TimedNode_;
}

- (jint)size {
  jint s = 0;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk([self latestHead])) get];
  while (n != nil && s != JavaLangInteger_MAX_VALUE) {
    n = [n get];
    s++;
  }
  return s;
}

- (jboolean)isEmpty {
  return [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk([self latestHead])) get] == nil;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n = [((RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *) nil_chk([self latestHead])) get];
  while (n != nil) {
    [list addWithId:n->value_TimedNode_];
    n = [n get];
  }
  return [list toArrayWithNSObjectArray:a];
}

- (void)__javaClone:(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&head_, &original->head_);
}

- (void)dealloc {
  JreReleaseVolatile(&head_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:withRxScheduler:", NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { "nextWithId:", "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { "errorWithNSException:", "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { "complete", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "evictFinal", "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { "latestHead", "LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode;", 0x0, -1, -1, -1, 6, -1, -1 },
    { "drainWithRxSubjectsReplaySubject_ReplayProducer:", "Z", 0x1, 7, 8, -1, 9, -1, -1 },
    { "isComplete", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "error", "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "last", "LNSObject;", 0x1, -1, -1, -1, 10, -1, -1 },
    { "size", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isEmpty", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "toArrayWithNSObjectArray:", "[LNSObject;", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "limit_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxAgeMillis_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LRxScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "head_", "LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode;", .constantValue.asLong = 0, 0x40, -1, -1, 13, -1 },
    { "tail_", "LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLRxScheduler;", "next", "LNSObject;", "(TT;)V", "error", "LNSException;", "()Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode<TT;>;", "drain", "LRxSubjectsReplaySubject_ReplayProducer;", "(Lrx/subjects/ReplaySubject$ReplayProducer<TT;>;)Z", "()TT;", "toArray", "[LNSObject;", "Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode<TT;>;", "LRxSubjectsReplaySubject;", "LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lrx/subjects/ReplaySubject$ReplayBuffer<TT;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer = { "ReplaySizeAndTimeBoundBuffer", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 13, 8, 14, 15, -1, 16, -1 };
  return &_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer;
}

@end

void RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_initWithInt_withLong_withRxScheduler_(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer *self, jint limit, jlong maxAgeMillis, RxScheduler *scheduler) {
  NSObject_init(self);
  self->limit_ = limit;
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *n = new_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(nil, 0LL);
  self->tail_ = n;
  (void) JreVolatileStrongAssign(&self->head_, n);
  self->maxAgeMillis_ = maxAgeMillis;
  self->scheduler_ = scheduler;
}

RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer *new_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_initWithInt_withLong_withRxScheduler_(jint limit, jlong maxAgeMillis, RxScheduler *scheduler) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer, initWithInt_withLong_withRxScheduler_, limit, maxAgeMillis, scheduler)
}

RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer *create_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_initWithInt_withLong_withRxScheduler_(jint limit, jlong maxAgeMillis, RxScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer, initWithInt_withLong_withRxScheduler_, limit, maxAgeMillis, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer)

@implementation RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode

- (instancetype)initWithId:(id)value
                  withLong:(jlong)timestamp {
  RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(self, value, timestamp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withLong:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_TimedNode_", "LNSObject;", .constantValue.asLong = 0, 0x10, 2, -1, 3, -1 },
    { "timestamp_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;J", "(TT;J)V", "value", "TT;", "LRxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lrx/subjects/ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode<TT;>;>;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode = { "TimedNode", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 1, 3, 4, -1, -1, 5, -1 };
  return &_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode;
}

@end

void RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *self, id value, jlong timestamp) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  self->value_TimedNode_ = value;
  self->timestamp_ = timestamp;
}

RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *new_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(id value, jlong timestamp) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode, initWithId_withLong_, value, timestamp)
}

RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode *create_RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode_initWithId_withLong_(id value, jlong timestamp) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode, initWithId_withLong_, value, timestamp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplaySizeAndTimeBoundBuffer_TimedNode)

@implementation RxSubjectsReplaySubject_ReplayProducer

- (instancetype)initWithRxSubscriber:(RxSubscriber *)actual
withRxSubjectsReplaySubject_ReplayState:(RxSubjectsReplaySubject_ReplayState *)state {
  RxSubjectsReplaySubject_ReplayProducer_initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_(self, actual, state);
  return self;
}

- (void)unsubscribe {
  [((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_)) removeWithRxSubjectsReplaySubject_ReplayProducer:self];
}

- (jboolean)isUnsubscribed {
  return [((RxSubscriber *) nil_chk(actual_)) isUnsubscribed];
}

- (void)requestWithLong:(jlong)n {
  if (n > 0LL) {
    RxInternalOperatorsBackpressureUtils_getAndAddRequestWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [((id<RxSubjectsReplaySubject_ReplayBuffer>) nil_chk(((RxSubjectsReplaySubject_ReplayState *) nil_chk(state_))->buffer_)) drainWithRxSubjectsReplaySubject_ReplayProducer:self];
  }
  else if (n < 0LL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"n >= required but it was ", n));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSubscriber:withRxSubjectsReplaySubject_ReplayState:", NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { "unsubscribe", "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { "isUnsubscribed", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "requestWithLong:", "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = RxSubjectsReplaySubject_ReplayProducer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LRxSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "state_", "LRxSubjectsReplaySubject_ReplayState;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "caughtUp_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tailIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "node_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRxSubscriber;LRxSubjectsReplaySubject_ReplayState;", "(Lrx/Subscriber<-TT;>;Lrx/subjects/ReplaySubject$ReplayState<TT;>;)V", "request", "J", "Lrx/Subscriber<-TT;>;", "Lrx/subjects/ReplaySubject$ReplayState<TT;>;", "LRxSubjectsReplaySubject;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lrx/Producer;Lrx/Subscription;" };
  static const J2ObjcClassInfo _RxSubjectsReplaySubject_ReplayProducer = { "ReplayProducer", "rx.subjects", ptrTable, methods, fields, 7, 0x18, 4, 8, 6, -1, -1, 7, -1 };
  return &_RxSubjectsReplaySubject_ReplayProducer;
}

@end

void RxSubjectsReplaySubject_ReplayProducer_initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_(RxSubjectsReplaySubject_ReplayProducer *self, RxSubscriber *actual, RxSubjectsReplaySubject_ReplayState *state) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  self->actual_ = actual;
  self->requested_ = new_JavaUtilConcurrentAtomicAtomicLong_init();
  self->state_ = state;
}

RxSubjectsReplaySubject_ReplayProducer *new_RxSubjectsReplaySubject_ReplayProducer_initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_(RxSubscriber *actual, RxSubjectsReplaySubject_ReplayState *state) {
  J2OBJC_NEW_IMPL(RxSubjectsReplaySubject_ReplayProducer, initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_, actual, state)
}

RxSubjectsReplaySubject_ReplayProducer *create_RxSubjectsReplaySubject_ReplayProducer_initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_(RxSubscriber *actual, RxSubjectsReplaySubject_ReplayState *state) {
  J2OBJC_CREATE_IMPL(RxSubjectsReplaySubject_ReplayProducer, initWithRxSubscriber_withRxSubjectsReplaySubject_ReplayState_, actual, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSubjectsReplaySubject_ReplayProducer)
