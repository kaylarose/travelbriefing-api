//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/subjects/AsyncSubject.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubjectsAsyncSubject")
#ifdef RESTRICT_RxSubjectsAsyncSubject
#define INCLUDE_ALL_RxSubjectsAsyncSubject 0
#else
#define INCLUDE_ALL_RxSubjectsAsyncSubject 1
#endif
#undef RESTRICT_RxSubjectsAsyncSubject

#if !defined (RxSubjectsAsyncSubject_) && (INCLUDE_ALL_RxSubjectsAsyncSubject || defined(INCLUDE_RxSubjectsAsyncSubject))
#define RxSubjectsAsyncSubject_

#define RESTRICT_RxSubjectsSubject 1
#define INCLUDE_RxSubjectsSubject 1
#include "rx/subjects/Subject.h"

@class RxSubjectsSubjectSubscriptionManager;
@protocol RxObservable_OnSubscribe;

/*!
 @brief Subject that publishes only the last item observed to each <code>Observer</code> that has subscribed, when the
 source <code>Observable</code> completes.
 <p>
 <img width="640" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.AsyncSubject.png" alt="">
 <p>
 Example usage:
 <p>
 @code
   // observer will receive no onNext events because the subject.onCompleted() isn't called.
   AsyncSubject<Object> subject = AsyncSubject.create();
   subject.subscribe(observer);
   subject.onNext("one");
   subject.onNext("two");
   subject.onNext("three");
   // observer will receive "three" as the only onNext event.
   AsyncSubject<Object> subject = AsyncSubject.create();
   subject.subscribe(observer);
   subject.onNext("one");
   subject.onNext("two");
   subject.onNext("three");
   subject.onCompleted();
 
@endcode
 */
@interface RxSubjectsAsyncSubject : RxSubjectsSubject {
 @public
  RxSubjectsSubjectSubscriptionManager *state_;
  volatile_id lastValue_;
}

#pragma mark Public

/*!
 @brief Creates and returns a new <code>AsyncSubject</code>.
 @return the new <code>AsyncSubject</code>
 */
+ (RxSubjectsAsyncSubject *)create;

/*!
 @brief Returns the Throwable that terminated the Subject.
 @return the Throwable that terminated the Subject or <code>null</code> if the
 subject hasn't terminated yet or it terminated normally.
 */
- (NSException *)getThrowable;

/*!
 @brief Returns the current value of the Subject if there is such a value and
 the subject hasn't terminated with an exception.
 <p>The method can return <code>null</code> for various reasons. Use <code>hasValue()</code>, <code>hasThrowable()</code>
 and <code>hasCompleted()</code> to determine if such <code>null</code> is a valid value, there was an
 exception or the Subject terminated without receiving any value. 
 @return the current value or <code>null</code> if the Subject doesn't have a value,
 has terminated with an exception or has an actual <code>null</code> as a value.
 */
- (id)getValue;

/*!
 @brief Check if the Subject has terminated normally.
 @return true if the subject completed normally via <code>onCompleted()</code>
 */
- (jboolean)hasCompleted;

- (jboolean)hasObservers;

/*!
 @brief Check if the Subject has terminated with an exception.
 @return true if the subject has received a throwable through <code>onError</code>.
 */
- (jboolean)hasThrowable;

/*!
 @brief Check if the Subject has a value.
 <p>Use the <code>getValue()</code> method to retrieve such a value.
 <p>Note that unless <code>hasCompleted()</code> or <code>hasThrowable()</code> returns true, the value
 retrieved by <code>getValue()</code> may get outdated.
 @return true if and only if the subject has some value but not an error
 */
- (jboolean)hasValue;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)v;

#pragma mark Protected

- (instancetype)initWithRxObservable_OnSubscribe:(id<RxObservable_OnSubscribe>)onSubscribe
        withRxSubjectsSubjectSubscriptionManager:(RxSubjectsSubjectSubscriptionManager *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubjectsAsyncSubject)

J2OBJC_FIELD_SETTER(RxSubjectsAsyncSubject, state_, RxSubjectsSubjectSubscriptionManager *)
J2OBJC_VOLATILE_FIELD_SETTER(RxSubjectsAsyncSubject, lastValue_, id)

FOUNDATION_EXPORT RxSubjectsAsyncSubject *RxSubjectsAsyncSubject_create();

FOUNDATION_EXPORT void RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(RxSubjectsAsyncSubject *self, id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

FOUNDATION_EXPORT RxSubjectsAsyncSubject *new_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSubjectsAsyncSubject *create_RxSubjectsAsyncSubject_initWithRxObservable_OnSubscribe_withRxSubjectsSubjectSubscriptionManager_(id<RxObservable_OnSubscribe> onSubscribe, RxSubjectsSubjectSubscriptionManager *state);

J2OBJC_TYPE_LITERAL_HEADER(RxSubjectsAsyncSubject)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubjectsAsyncSubject")
