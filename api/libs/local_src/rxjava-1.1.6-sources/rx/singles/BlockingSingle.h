//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/singles/BlockingSingle.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSinglesBlockingSingle")
#ifdef RESTRICT_RxSinglesBlockingSingle
#define INCLUDE_ALL_RxSinglesBlockingSingle 0
#else
#define INCLUDE_ALL_RxSinglesBlockingSingle 1
#endif
#undef RESTRICT_RxSinglesBlockingSingle

#if !defined (RxSinglesBlockingSingle_) && (INCLUDE_ALL_RxSinglesBlockingSingle || defined(INCLUDE_RxSinglesBlockingSingle))
#define RxSinglesBlockingSingle_

@class RxSingle;
@protocol JavaUtilConcurrentFuture;

/*!
 @brief <code>BlockingSingle</code> is a blocking "version" of <code>Single</code> that provides blocking
 operators.
 <p/>
 You construct a <code>BlockingSingle</code> from a <code>Single</code> with <code>from(Single)</code>
 or <code>Single.toBlocking()</code>.
 */
@interface RxSinglesBlockingSingle : NSObject

#pragma mark Public

/*!
 @brief Converts a <code>Single</code> into a <code>BlockingSingle</code>.
 @param single the <code>Single</code> you want to convert
 @return a <code>BlockingSingle</code> version of <code>single</code>
 */
+ (RxSinglesBlockingSingle *)fromWithRxSingle:(RxSingle *)single;

/*!
 @brief Returns a <code>Future</code> representing the value emitted by this <code>BlockingSingle</code>.
 @return a <code>Future</code> that returns the value
 */
- (id<JavaUtilConcurrentFuture>)toFuture;

/*!
 @brief Returns the item emitted by this <code>BlockingSingle</code>.
 <p/>
 If the underlying <code>Single</code> returns successfully, the value emitted
 by the <code>Single</code> is returned. If the <code>Single</code> emits an error,
 the throwable emitted (<code>SingleSubscriber.onError(Throwable)</code>) is
 thrown.
 @return the value emitted by this <code>BlockingSingle</code>
 */
- (id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSinglesBlockingSingle)

FOUNDATION_EXPORT RxSinglesBlockingSingle *RxSinglesBlockingSingle_fromWithRxSingle_(RxSingle *single);

J2OBJC_TYPE_LITERAL_HEADER(RxSinglesBlockingSingle)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSinglesBlockingSingle")
