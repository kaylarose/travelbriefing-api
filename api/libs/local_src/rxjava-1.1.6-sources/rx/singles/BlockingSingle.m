//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/singles/BlockingSingle.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "rx/Observable.h"
#include "rx/Single.h"
#include "rx/SingleSubscriber.h"
#include "rx/Subscription.h"
#include "rx/internal/operators/BlockingOperatorToFuture.h"
#include "rx/internal/util/BlockingUtils.h"
#include "rx/singles/BlockingSingle.h"

@interface RxSinglesBlockingSingle () {
 @public
  RxSingle *single_;
}

- (instancetype)initWithRxSingle:(RxSingle *)single;

@end

J2OBJC_FIELD_SETTER(RxSinglesBlockingSingle, single_, RxSingle *)

__attribute__((unused)) static void RxSinglesBlockingSingle_initWithRxSingle_(RxSinglesBlockingSingle *self, RxSingle *single);

__attribute__((unused)) static RxSinglesBlockingSingle *new_RxSinglesBlockingSingle_initWithRxSingle_(RxSingle *single) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSinglesBlockingSingle *create_RxSinglesBlockingSingle_initWithRxSingle_(RxSingle *single);

@interface RxSinglesBlockingSingle_$1 : RxSingleSubscriber {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$returnItem_;
  JavaUtilConcurrentCountDownLatch *val$latch_;
  JavaUtilConcurrentAtomicAtomicReference *val$returnException_;
}

- (void)onSuccessWithId:(id)value;

- (void)onErrorWithNSException:(NSException *)error;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSinglesBlockingSingle_$1)

J2OBJC_FIELD_SETTER(RxSinglesBlockingSingle_$1, val$returnItem_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(RxSinglesBlockingSingle_$1, val$latch_, JavaUtilConcurrentCountDownLatch *)
J2OBJC_FIELD_SETTER(RxSinglesBlockingSingle_$1, val$returnException_, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSinglesBlockingSingle_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

__attribute__((unused)) static RxSinglesBlockingSingle_$1 *new_RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static RxSinglesBlockingSingle_$1 *create_RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2);

J2OBJC_TYPE_LITERAL_HEADER(RxSinglesBlockingSingle_$1)

@implementation RxSinglesBlockingSingle

- (instancetype)initWithRxSingle:(RxSingle *)single {
  RxSinglesBlockingSingle_initWithRxSingle_(self, single);
  return self;
}

+ (RxSinglesBlockingSingle *)fromWithRxSingle:(RxSingle *)single {
  return RxSinglesBlockingSingle_fromWithRxSingle_(single);
}

- (id)value {
  JavaUtilConcurrentAtomicAtomicReference *returnItem = new_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentAtomicAtomicReference *returnException = new_JavaUtilConcurrentAtomicAtomicReference_init();
  JavaUtilConcurrentCountDownLatch *latch = new_JavaUtilConcurrentCountDownLatch_initWithInt_(1);
  id<RxSubscription> subscription = [((RxSingle *) nil_chk(single_)) subscribeWithRxSingleSubscriber:new_RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(returnItem, latch, returnException)];
  RxInternalUtilBlockingUtils_awaitForCompleteWithJavaUtilConcurrentCountDownLatch_withRxSubscription_(latch, subscription);
  NSException *throwable = [returnException get];
  if (throwable != nil) {
    if ([throwable isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(throwable, [JavaLangRuntimeException class]);
    }
    @throw new_JavaLangRuntimeException_initWithNSException_(throwable);
  }
  return [returnItem get];
}

- (id<JavaUtilConcurrentFuture>)toFuture {
  return RxInternalOperatorsBlockingOperatorToFuture_toFutureWithRxObservable_([((RxSingle *) nil_chk((single_))) toObservable]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithRxSingle:", NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { "fromWithRxSingle:", "LRxSinglesBlockingSingle;", 0x9, 2, 0, -1, 3, -1, -1 },
    { "value", "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { "toFuture", "LJavaUtilConcurrentFuture;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "single_", "LRxSingle;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LRxSingle;", "(Lrx/Single<+TT;>;)V", "from", "<T:Ljava/lang/Object;>(Lrx/Single<+TT;>;)Lrx/singles/BlockingSingle<TT;>;", "()TT;", "()Ljava/util/concurrent/Future<TT;>;", "Lrx/Single<+TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _RxSinglesBlockingSingle = { "BlockingSingle", "rx.singles", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 7, -1 };
  return &_RxSinglesBlockingSingle;
}

@end

void RxSinglesBlockingSingle_initWithRxSingle_(RxSinglesBlockingSingle *self, RxSingle *single) {
  NSObject_init(self);
  self->single_ = single;
}

RxSinglesBlockingSingle *new_RxSinglesBlockingSingle_initWithRxSingle_(RxSingle *single) {
  J2OBJC_NEW_IMPL(RxSinglesBlockingSingle, initWithRxSingle_, single)
}

RxSinglesBlockingSingle *create_RxSinglesBlockingSingle_initWithRxSingle_(RxSingle *single) {
  J2OBJC_CREATE_IMPL(RxSinglesBlockingSingle, initWithRxSingle_, single)
}

RxSinglesBlockingSingle *RxSinglesBlockingSingle_fromWithRxSingle_(RxSingle *single) {
  RxSinglesBlockingSingle_initialize();
  return new_RxSinglesBlockingSingle_initWithRxSingle_(single);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSinglesBlockingSingle)

@implementation RxSinglesBlockingSingle_$1

- (void)onSuccessWithId:(id)value {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$returnItem_)) setWithId:value];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (void)onErrorWithNSException:(NSException *)error {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$returnException_)) setWithId:error];
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(val$latch_)) countDown];
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                           withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)capture$1
                    withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$2 {
  RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onSuccessWithId:", "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { "onErrorWithNSException:", "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { "initWithJavaUtilConcurrentAtomicAtomicReference:withJavaUtilConcurrentCountDownLatch:withJavaUtilConcurrentAtomicAtomicReference:", NULL, 0x0, -1, 5, -1, 6, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$returnItem_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$returnException_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "LJavaUtilConcurrentAtomicAtomicReference;LJavaUtilConcurrentCountDownLatch;LJavaUtilConcurrentAtomicAtomicReference;", "(Ljava/util/concurrent/atomic/AtomicReference<TT;>;Ljava/util/concurrent/CountDownLatch;Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Throwable;>;", "LRxSinglesBlockingSingle;", "value", "Lrx/SingleSubscriber<TT;>;" };
  static const J2ObjcClassInfo _RxSinglesBlockingSingle_$1 = { "", "rx.singles", ptrTable, methods, fields, 7, 0x8008, 3, 3, 9, -1, 10, 11, -1 };
  return &_RxSinglesBlockingSingle_$1;
}

@end

void RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(RxSinglesBlockingSingle_$1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  self->val$returnItem_ = capture$0;
  self->val$latch_ = capture$1;
  self->val$returnException_ = capture$2;
  RxSingleSubscriber_init(self);
}

RxSinglesBlockingSingle_$1 *new_RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_NEW_IMPL(RxSinglesBlockingSingle_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

RxSinglesBlockingSingle_$1 *create_RxSinglesBlockingSingle_$1_initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_(JavaUtilConcurrentAtomicAtomicReference *capture$0, JavaUtilConcurrentCountDownLatch *capture$1, JavaUtilConcurrentAtomicAtomicReference *capture$2) {
  J2OBJC_CREATE_IMPL(RxSinglesBlockingSingle_$1, initWithJavaUtilConcurrentAtomicAtomicReference_withJavaUtilConcurrentCountDownLatch_withJavaUtilConcurrentAtomicAtomicReference_, capture$0, capture$1, capture$2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RxSinglesBlockingSingle_$1)
