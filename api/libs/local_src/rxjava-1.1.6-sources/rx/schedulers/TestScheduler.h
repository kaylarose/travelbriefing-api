//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/schedulers/TestScheduler.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSchedulersTestScheduler")
#ifdef RESTRICT_RxSchedulersTestScheduler
#define INCLUDE_ALL_RxSchedulersTestScheduler 0
#else
#define INCLUDE_ALL_RxSchedulersTestScheduler 1
#endif
#undef RESTRICT_RxSchedulersTestScheduler

#if !defined (RxSchedulersTestScheduler_) && (INCLUDE_ALL_RxSchedulersTestScheduler || defined(INCLUDE_RxSchedulersTestScheduler))
#define RxSchedulersTestScheduler_

#define RESTRICT_RxScheduler 1
#define INCLUDE_RxScheduler 1
#include "rx/Scheduler.h"

@class JavaUtilConcurrentTimeUnit;
@class RxScheduler_Worker;
@protocol JavaUtilQueue;

/*!
 @brief The <code>TestScheduler</code> is useful for debugging.
 It allows you to test schedules of events by manually
 advancing the clock at whatever pace you choose.
 */
@interface RxSchedulersTestScheduler : RxScheduler {
 @public
  id<JavaUtilQueue> queue_;
  jlong time_;
}

+ (jlong)counter;

+ (void)setCounter:(jlong)value;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Moves the Scheduler's clock forward by a specified amount of time.
 @param delayTime
 the amount of time to move the Scheduler's clock forward
 @param unit
 the units of time that <code>delayTime</code> is expressed in
 */
- (void)advanceTimeByWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Moves the Scheduler's clock to a particular moment in time.
 @param delayTime
 the point in time to move the Scheduler's clock to
 @param unit
 the units of time that <code>delayTime</code> is expressed in
 */
- (void)advanceTimeToWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (RxScheduler_Worker *)createWorker;

- (jlong)now;

/*!
 @brief Triggers any actions that have not yet been triggered and that are scheduled to be triggered at or
 before this Scheduler's present time.
 */
- (void)triggerActions;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSchedulersTestScheduler)

J2OBJC_FIELD_SETTER(RxSchedulersTestScheduler, queue_, id<JavaUtilQueue>)

inline jlong RxSchedulersTestScheduler_get_counter();
inline jlong RxSchedulersTestScheduler_set_counter(jlong value);
inline jlong *RxSchedulersTestScheduler_getRef_counter();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxSchedulersTestScheduler_counter;
J2OBJC_STATIC_FIELD_PRIMITIVE(RxSchedulersTestScheduler, counter, jlong)

FOUNDATION_EXPORT void RxSchedulersTestScheduler_init(RxSchedulersTestScheduler *self);

FOUNDATION_EXPORT RxSchedulersTestScheduler *new_RxSchedulersTestScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSchedulersTestScheduler *create_RxSchedulersTestScheduler_init();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersTestScheduler)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSchedulersTestScheduler")
