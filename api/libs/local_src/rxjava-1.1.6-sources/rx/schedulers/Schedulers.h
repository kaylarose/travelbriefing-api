//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/schedulers/Schedulers.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSchedulersSchedulers")
#ifdef RESTRICT_RxSchedulersSchedulers
#define INCLUDE_ALL_RxSchedulersSchedulers 0
#else
#define INCLUDE_ALL_RxSchedulersSchedulers 1
#endif
#undef RESTRICT_RxSchedulersSchedulers

#if !defined (RxSchedulersSchedulers_) && (INCLUDE_ALL_RxSchedulersSchedulers || defined(INCLUDE_RxSchedulersSchedulers))
#define RxSchedulersSchedulers_

@class RxScheduler;
@class RxSchedulersTestScheduler;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief Static factory methods for creating Schedulers.
 */
@interface RxSchedulersSchedulers : NSObject

#pragma mark Public

/*!
 @brief Creates and returns a <code>Scheduler</code> intended for computational work.
 <p>
 This can be used for event-loops, processing callbacks and other computational work.
 <p>
 Do not perform IO-bound work on this scheduler. Use <code>io()</code> instead.
 <p>
 Unhandled errors will be delivered to the scheduler Thread's <code>java.lang.Thread.UncaughtExceptionHandler</code>.
 @return a <code>Scheduler</code> meant for computation-bound work
 */
+ (RxScheduler *)computation;

/*!
 @brief Converts an <code>Executor</code> into a new Scheduler instance.
 @param executor
 the executor to wrap
 @return the new Scheduler wrapping the Executor
 */
+ (RxScheduler *)fromWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Creates and returns a <code>Scheduler</code> that executes work immediately on the current thread.
 @return a <code>Scheduler</code> that executes work immediately
 */
+ (RxScheduler *)immediate;

/*!
 @brief Creates and returns a <code>Scheduler</code> intended for IO-bound work.
 <p>
 The implementation is backed by an <code>Executor</code> thread-pool that will grow as needed.
 <p>
 This can be used for asynchronously performing blocking IO.
 <p>
 Do not perform computational work on this scheduler. Use <code>computation()</code> instead.
 <p>
 Unhandled errors will be delivered to the scheduler Thread's <code>java.lang.Thread.UncaughtExceptionHandler</code>.
 @return a <code>Scheduler</code> meant for IO-bound work
 */
+ (RxScheduler *)io;

/*!
 @brief Creates and returns a <code>Scheduler</code> that creates a new <code>Thread</code> for each unit of work.
 <p>
 Unhandled errors will be delivered to the scheduler Thread's <code>java.lang.Thread.UncaughtExceptionHandler</code>.
 @return a <code>Scheduler</code> that creates new threads
 */
+ (RxScheduler *)newThread OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Resets the current <code>Schedulers</code> instance.
 This will re-init the cached schedulers on the next usage,
 which can be useful in testing.
 */
+ (void)reset;

/*!
 @brief Shuts down those standard Schedulers which support the SchedulerLifecycle interface.
 <p>The operation is idempotent and threadsafe.
 */
+ (void)shutdown;

/*!
 @brief Creates and returns a <code>TestScheduler</code>, which is useful for debugging.
 It allows you to test
 schedules of events by manually advancing the clock at whatever pace you choose.
 @return a <code>TestScheduler</code> meant for debugging
 */
+ (RxSchedulersTestScheduler *)test;

/*!
 @brief Creates and returns a <code>Scheduler</code> that queues work on the current thread to be executed after the
 current work completes.
 @return a <code>Scheduler</code> that queues work on the current thread
 */
+ (RxScheduler *)trampoline;

#pragma mark Package-Private

/*!
 @brief Start the instance-specific schedulers.
 */
- (void)shutdownInstance;

/*!
 @brief Starts those standard Schedulers which support the SchedulerLifecycle interface.
 <p>The operation is idempotent and threadsafe.
 */
+ (void)start;

/*!
 @brief Start the instance-specific schedulers.
 */
- (void)startInstance;

@end

J2OBJC_STATIC_INIT(RxSchedulersSchedulers)

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_immediate();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_trampoline();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_newThread();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_computation();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_io();

FOUNDATION_EXPORT RxSchedulersTestScheduler *RxSchedulersSchedulers_test();

FOUNDATION_EXPORT RxScheduler *RxSchedulersSchedulers_fromWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT void RxSchedulersSchedulers_reset();

FOUNDATION_EXPORT void RxSchedulersSchedulers_start();

FOUNDATION_EXPORT void RxSchedulersSchedulers_shutdown();

J2OBJC_TYPE_LITERAL_HEADER(RxSchedulersSchedulers)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSchedulersSchedulers")
