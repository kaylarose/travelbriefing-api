//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/SingleSubscriber.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSingleSubscriber")
#ifdef RESTRICT_RxSingleSubscriber
#define INCLUDE_ALL_RxSingleSubscriber 0
#else
#define INCLUDE_ALL_RxSingleSubscriber 1
#endif
#undef RESTRICT_RxSingleSubscriber

#if !defined (RxSingleSubscriber_) && (INCLUDE_ALL_RxSingleSubscriber || defined(INCLUDE_RxSingleSubscriber))
#define RxSingleSubscriber_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

/*!
 @brief Provides a mechanism for receiving push-based notifications.
 <p>
 After a SingleSubscriber calls a <code>Single</code>'s <code>subscribe</code> method, the
 <code>Single</code> calls the SingleSubscriber's <code>onSuccess</code> and <code>onError</code> methods to provide
 notifications. A well-behaved <code>Single</code> will call a SingleSubscriber's <code>onSuccess</code> method exactly
 once or the SingleSubscriber's <code>onError</code> method exactly once.
 - seealso: <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation: Observable</a>
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
@interface RxSingleSubscriber : NSObject < RxSubscription >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Adds a <code>Subscription</code> to this Subscriber's list of subscriptions if this list is not marked as
 unsubscribed.
 If the list <em>is</em> marked as unsubscribed, <code>add</code> will indicate this by
 explicitly unsubscribing the new <code>Subscription</code> as well.
 @param s
 the <code>Subscription</code> to add
 */
- (void)addWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Indicates whether this Subscriber has unsubscribed from its list of subscriptions.
 @return <code>true</code> if this Subscriber has unsubscribed from its subscriptions, <code>false</code> otherwise
 */
- (jboolean)isUnsubscribed;

/*!
 @brief Notifies the SingleSubscriber that the <code>Single</code> has experienced an error condition.
 <p>
 If the <code>Single</code> calls this method, it will not thereafter call <code>onSuccess</code>.
 @param error
 the exception encountered by the Single
 */
- (void)onErrorWithNSException:(NSException *)error;

/*!
 @brief Notifies the SingleSubscriber with a single item and that the <code>Single</code> has finished sending
 push-based notifications.
 <p>
 The <code>Single</code> will not call this method if it calls <code>onError</code>.
 @param value
 the item emitted by the Single
 */
- (void)onSuccessWithId:(id)value;

- (void)unsubscribe;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingleSubscriber)

FOUNDATION_EXPORT void RxSingleSubscriber_init(RxSingleSubscriber *self);

J2OBJC_TYPE_LITERAL_HEADER(RxSingleSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSingleSubscriber")
