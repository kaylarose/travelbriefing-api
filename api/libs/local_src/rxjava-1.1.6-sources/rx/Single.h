//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Single.java
//

/*!
 @brief Copyright 2015 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 the License for the specific language governing permissions and limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSingle")
#ifdef RESTRICT_RxSingle
#define INCLUDE_ALL_RxSingle 0
#else
#define INCLUDE_ALL_RxSingle 1
#endif
#undef RESTRICT_RxSingle

#if !defined (RxSingle_) && (INCLUDE_ALL_RxSingle || defined(INCLUDE_RxSingle))
#define RxSingle_

@class IOSObjectArray;
@class JavaUtilConcurrentTimeUnit;
@class RxCompletable;
@class RxObservable;
@class RxPluginsRxJavaSingleExecutionHook;
@class RxScheduler;
@class RxSingleSubscriber;
@class RxSinglesBlockingSingle;
@class RxSubscriber;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc1;
@protocol RxFunctionsFunc2;
@protocol RxFunctionsFunc3;
@protocol RxFunctionsFunc4;
@protocol RxFunctionsFunc5;
@protocol RxFunctionsFunc6;
@protocol RxFunctionsFunc7;
@protocol RxFunctionsFunc8;
@protocol RxFunctionsFunc9;
@protocol RxFunctionsFuncN;
@protocol RxObservable_OnSubscribe;
@protocol RxObservable_Operator;
@protocol RxObserver;
@protocol RxSingle_OnSubscribe;
@protocol RxSingle_Transformer;
@protocol RxSubscription;

/*!
 @brief The Single class implements the Reactive Pattern for a single value response.
 See <code>Observable</code> for the
 implementation of the Reactive Pattern for a stream or vector of values.
 <p>
 <code>Single</code> behaves the same as <code>Observable</code> except that it can only emit either a single successful
 value, or an error (there is no "onComplete" notification as there is for <code>Observable</code>)
 <p>
 Like an <code>Observable</code>, a <code>Single</code> is lazy, can be either "hot" or "cold", synchronous or
 asynchronous.
 <p>
 The documentation for this class makes use of marble diagrams. The following legend explains these diagrams:
 <p>
 <img width="605" height="285" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.legend.png" alt="">
 <p>
 For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX
 documentation</a>.
 @since (If this class graduates from "Experimental" replace this parenthetical with the release number)
 */
@interface RxSingle : NSObject {
 @public
  id<RxObservable_OnSubscribe> onSubscribe_;
}

+ (RxPluginsRxJavaSingleExecutionHook *)hook;

+ (void)setHook:(RxPluginsRxJavaSingleExecutionHook *)value;

#pragma mark Public

/*!
 @brief Transform a Single by applying a particular Transformer function to it.
 <p>
 This method operates on the Single itself whereas <code>lift</code> operates on the Single's Subscribers or
 Observers.
 <p>
 If the operator you are creating is designed to act on the individual item emitted by a Single, use
 <code>lift</code>. If your operator is designed to transform the source Single as a whole (for instance, by
 applying a particular set of existing RxJava operators to it) use <code>compose</code>.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>compose</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param transformer
 implements the function that transforms the source Single
 @return the source Single, transformed by the transformer function
 - seealso: <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
- (RxSingle *)composeWithRxSingle_Transformer:(id<RxSingle_Transformer>)transformer;

/*!
 @brief Returns an Observable that emits the items emitted by two Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 an Single to be concatenated
 @param t2
 an Single to be concatenated
 @return an Observable that emits items emitted by the two source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2;

/*!
 @brief Returns an Observable that emits the items emitted by three Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @return an Observable that emits items emitted by the three source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3;

/*!
 @brief Returns an Observable that emits the items emitted by four Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @return an Observable that emits items emitted by the four source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4;

/*!
 @brief Returns an Observable that emits the items emitted by five Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @param t5
 a Single to be concatenated
 @return an Observable that emits items emitted by the five source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4
                        withRxSingle:(RxSingle *)t5;

/*!
 @brief Returns an Observable that emits the items emitted by six Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @param t5
 a Single to be concatenated
 @param t6
 a Single to be concatenated
 @return an Observable that emits items emitted by the six source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4
                        withRxSingle:(RxSingle *)t5
                        withRxSingle:(RxSingle *)t6;

/*!
 @brief Returns an Observable that emits the items emitted by seven Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @param t5
 a Single to be concatenated
 @param t6
 a Single to be concatenated
 @param t7
 a Single to be concatenated
 @return an Observable that emits items emitted by the seven source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4
                        withRxSingle:(RxSingle *)t5
                        withRxSingle:(RxSingle *)t6
                        withRxSingle:(RxSingle *)t7;

/*!
 @brief Returns an Observable that emits the items emitted by eight Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @param t5
 a Single to be concatenated
 @param t6
 a Single to be concatenated
 @param t7
 a Single to be concatenated
 @param t8
 a Single to be concatenated
 @return an Observable that emits items emitted by the eight source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4
                        withRxSingle:(RxSingle *)t5
                        withRxSingle:(RxSingle *)t6
                        withRxSingle:(RxSingle *)t7
                        withRxSingle:(RxSingle *)t8;

/*!
 @brief Returns an Observable that emits the items emitted by nine Singles, one after the other.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated
 @param t2
 a Single to be concatenated
 @param t3
 a Single to be concatenated
 @param t4
 a Single to be concatenated
 @param t5
 a Single to be concatenated
 @param t6
 a Single to be concatenated
 @param t7
 a Single to be concatenated
 @param t8
 a Single to be concatenated
 @param t9
 a Single to be concatenated
 @return an Observable that emits items emitted by the nine source Singles, one after the other.
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
+ (RxObservable *)concatWithRxSingle:(RxSingle *)t1
                        withRxSingle:(RxSingle *)t2
                        withRxSingle:(RxSingle *)t3
                        withRxSingle:(RxSingle *)t4
                        withRxSingle:(RxSingle *)t5
                        withRxSingle:(RxSingle *)t6
                        withRxSingle:(RxSingle *)t7
                        withRxSingle:(RxSingle *)t8
                        withRxSingle:(RxSingle *)t9;

/*!
 @brief Returns an Observable that emits the item emitted by the source Single, then the item emitted by the
 specified Single.
 <p>
 <img width="640" height="335" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatWith.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>concat</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be concatenated after the current
 @return an Observable that emits the item emitted by the source Single, followed by the item emitted by
 <code>t1</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
- (RxObservable *)concatWithWithRxSingle:(RxSingle *)t1;

/*!
 @brief Returns a Single that will execute the specified function when a <code>SingleSubscriber</code> executes it or
 a <code>Subscriber</code> subscribes to it.
 <p>
 <img width="640" height="200" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.create.png" alt="">
 <p>
 Write the function you pass to <code>create</code> so that it behaves as a Single: It should invoke the
 SingleSubscriber <code>onSuccess</code> and/or
 <code>onError</code> methods appropriately.
 <p>
 A well-formed Single must invoke either the SingleSubscriber's <code>onSuccess</code> method exactly once or
 its <code>onError</code> method exactly once.
 <p>
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>create</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param f
 a function that accepts an <code>SingleSubscriber<T></code>, and invokes its <code>onSuccess</code> or
 <code>onError</code> methods as appropriate
 @return a Single that, when a <code>Subscriber</code> subscribes to it, will execute the specified function
 - seealso: <a href="http://reactivex.io/documentation/operators/create.html">ReactiveX operators documentation: Create</a>
 */
+ (RxSingle *)createWithRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)f;

/*!
 @brief Returns a <code>Single</code> that calls a <code>Single</code> factory to create a <code>Single</code> for each new Observer
 that subscribes.
 That is, for each subscriber, the actual <code>Single</code> that subscriber observes is
 determined by the factory function.
 <p>
 <img width="640" height="340" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/defer.png" alt="">
 <p>
 The defer Observer allows you to defer or delay emitting value from a <code>Single</code> until such time as an
 Observer subscribes to the <code>Single</code>. This allows an <code>Observer</code> to easily obtain updates or a
 refreshed version of the sequence.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>defer</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param singleFactory
 the <code>Single</code> factory function to invoke for each <code>Observer</code> that subscribes to the
 resulting <code>Single</code>.
 @return a <code>Single</code> whose <code>Observer</code>s' subscriptions trigger an invocation of the given
 <code>Single</code> factory function.
 - seealso: <a href="http://reactivex.io/documentation/operators/defer.html">ReactiveX operators documentation: Defer</a>
 */
+ (RxSingle *)deferWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)singleFactory;

/*!
 @brief Returns an Single that emits the items emitted by the source Single shifted forward in time by a
 specified delay.
 Error notifications from the source Observable are not delayed.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>This version of <code>delay</code> operates by default on the <code>computation</code> <code>Scheduler</code>.</dd>
 </dl>
 @param delay
 the delay to shift the source by
 @param unit
 the <code>TimeUnit</code> in which <code>period</code> is defined
 @return the source Single shifted in time by the specified delay
 - seealso: <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 */
- (RxSingle *)delayWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns an Single that emits the items emitted by the source Single shifted forward in time by a
 specified delay.
 Error notifications from the source Single are not delayed.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.s.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param delay
 the delay to shift the source by
 @param unit
 the time unit of <code>delay</code>
 @param scheduler
 the <code>Scheduler</code> to use for delaying
 @return the source Single shifted in time by the specified delay
 - seealso: <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 */
- (RxSingle *)delayWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Single that delays the subscription to this Single
 until the Observable completes.
 In case the <code>onError</code> of the supplied observer throws,
 the exception will be propagated to the downstream subscriber
 and will result in skipping the subscription of this Single.
 <p>
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>This method does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param other the Observable that should trigger the subscription
 to this Single.
 @return a Single that delays the subscription to this Single
 until the Observable emits an element or completes normally.
 */
- (RxSingle *)delaySubscriptionWithRxObservable:(RxObservable *)other;

/*!
 @brief Registers an <code>Action0</code> to be called when this <code>Single</code> invokes either
 <code>SingleSubscriber.onSuccess(Object)</code>  onSuccess} or <code>onError</code>.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/finallyDo.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>doAfterTerminate</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param action
 an <code>Action0</code> to be invoked when the source <code>Single</code> finishes.
 @return a <code>Single</code> that emits the same item or error as the source <code>Single</code>, then invokes the
 <code>Action0</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 */
- (RxSingle *)doAfterTerminateWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

/*!
 @brief Modifies the source <code>Single</code> so that it invokes an action if it calls <code>onError</code>.
 <p>
 In case the onError action throws, the downstream will receive a composite exception containing
 the original exception and the exception thrown by onError.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>doOnError</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param onError
 the action to invoke if the source <code>Single</code> calls <code>onError</code>
 @return the source <code>Single</code> with the side-effecting behavior applied
 - seealso: <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 */
- (RxSingle *)doOnErrorWithRxFunctionsAction1:(id<RxFunctionsAction1>)onError;

/*!
 @brief Modifies the source <code>Single</code> so that it invokes the given action when it is subscribed from
 its subscribers.
 Each subscription will result in an invocation of the given action except when the
 source <code>Single</code> is reference counted, in which case the source <code>Single</code> will invoke
 the given action for the first subscription.
 <p>
 <img width="640" height="390" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSubscribe.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>doOnSubscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param subscribe
 the action that gets called when an observer subscribes to this <code>Single</code>
 @return the source <code>Single</code> modified so as to call this Action when appropriate
 - seealso: <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 */
- (RxSingle *)doOnSubscribeWithRxFunctionsAction0:(id<RxFunctionsAction0>)subscribe;

/*!
 @brief Modifies the source <code>Single</code> so that it invokes an action when it calls <code>onSuccess</code>.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnNext.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>doOnSuccess</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param onSuccess
 the action to invoke when the source <code>Single</code> calls <code>onSuccess</code>
 @return the source <code>Single</code> with the side-effecting behavior applied
 - seealso: <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 */
- (RxSingle *)doOnSuccessWithRxFunctionsAction1:(id<RxFunctionsAction1>)onSuccess;

/*!
 @brief Modifies the source <code>Single</code> so that it invokes the given action when it is unsubscribed from
 its subscribers.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnUnsubscribe.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>doOnUnsubscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param action
 the action that gets called when this <code>Single</code> is unsubscribed.
 @return the source <code>Single</code> modified so as to call this Action when appropriate.
 - seealso: <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 */
- (RxSingle *)doOnUnsubscribeWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

/*!
 @brief Returns a Single that invokes a subscriber's <code>onError</code> method when the
 subscriber subscribes to it.
 <p>
 <img width="640" height="190" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.error.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>error</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param exception
 the particular Throwable to pass to <code>onError</code>
 @return a Single that invokes the subscriber's <code>onError</code> method when
 the subscriber subscribes to it
 - seealso: <a href="http://reactivex.io/documentation/operators/empty-never-throw.html">ReactiveX operators documentation: Throw</a>
 */
+ (RxSingle *)errorWithNSException:(NSException *)exception;

/*!
 @brief Returns a Single that is based on applying a specified function to the item emitted by the source Single,
 where that function returns a Single.
 <p>
 <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>flatMap</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param func
 a function that, when applied to the item emitted by the source Single, returns a Single
 @return the Single returned from <code>func</code> when applied to the item emitted by the source Single
 - seealso: <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
- (RxSingle *)flatMapWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)func;

/*!
 @brief Returns an Observable that emits items based on applying a specified function to the item emitted by the
 source Observable, where that function returns an Observable.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>flatMapObservable</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param func
 a function that, when applied to the item emitted by the source Single, returns an
 Observable
 @return the Observable returned from <code>func</code> when applied to the item emitted by the source Single
 - seealso: <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
- (RxObservable *)flatMapObservableWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)func;

/*!
 @brief Converts a <code>Future</code> into a <code>Single</code>.
 <p>
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt="">
 <p>
 You can convert any object that supports the <code>Future</code> interface into a Single that emits the return
 value of the <code>Future.get</code> method of that object, by passing the object into the <code>from</code>
 method.
 <p>
 <em>Important note:</em> This Single is blocking; you cannot unsubscribe from it.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>from</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param future
 the source <code>Future</code>
 @return a <code>Single</code> that emits the item from the source <code>Future</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
+ (RxSingle *)fromWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

/*!
 @brief Converts a <code>Future</code> into a <code>Single</code>, with a timeout on the Future.
 <p>
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt="">
 <p>
 You can convert any object that supports the <code>Future</code> interface into a <code>Single</code> that emits
 the return value of the <code>Future.get</code> method of that object, by passing the object into the
 <code>from</code> method.
 <p>
 <em>Important note:</em> This <code>Single</code> is blocking; you cannot unsubscribe from it.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>from</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param future
 the source <code>Future</code>
 @param timeout
 the maximum time to wait before calling <code>get</code>
 @param unit
 the <code>TimeUnit</code> of the <code>timeout</code> argument
 @return a <code>Single</code> that emits the item from the source <code>Future</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
+ (RxSingle *)fromWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                      withLong:(jlong)timeout
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Converts a <code>Future</code>, operating on a specified <code>Scheduler</code>, into a <code>Single</code>.
 <p>
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.s.png" alt="">
 <p>
 You can convert any object that supports the <code>Future</code> interface into a <code>Single</code> that emits
 the return value of the <code>Future.get</code> method of that object, by passing the object into the
 <code>from</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param future
 the source <code>Future</code>
 @param scheduler
 the <code>Scheduler</code> to wait for the Future on. Use a Scheduler such as
 <code>Schedulers.io()</code> that can block and wait on the Future
 @return a <code>Single</code> that emits the item from the source <code>Future</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
+ (RxSingle *)fromWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                               withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a <code>Single</code> that invokes passed function and emits its result for each new Observer that subscribes.
 <p>
 Allows you to defer execution of passed function until Observer subscribes to the <code>Single</code>.
 It makes passed function "lazy".
 Result of the function invocation will be emitted by the <code>Single</code>.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>fromCallable</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param func
 function which execution should be deferred, it will be invoked when Observer will subscribe to the <code>Single</code>.
 @return a <code>Single</code> whose <code>Observer</code>s' subscriptions trigger an invocation of the given function.
 */
+ (RxSingle *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)func;

/*!
 @brief Returns a <code>Single</code> that emits a specified item.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.just.png" alt="">
 <p>
 To convert any object into a <code>Single</code> that emits that object, pass that object into the
 <code>just</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>just</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param value
 the item to emit
 @return a <code>Single</code> that emits <code>value</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/just.html">ReactiveX operators documentation: Just</a>
 */
+ (RxSingle *)justWithId:(id)value;

/*!
 @brief Lifts a function to the current Single and returns a new Single that when subscribed to will pass the
 values of the current Single through the Operator function.
 <p>
 In other words, this allows chaining TaskExecutors together on a Single for acting on the values within
 the Single.
 <p>
 <code>task.map(...).filter(...).lift(new OperatorA()).lift(new OperatorB(...)).subscribe()</code>
 <p>
 If the operator you are creating is designed to act on the item emitted by a source Single, use
 <code>lift</code>. If your operator is designed to transform the source Single as a whole (for instance, by
 applying a particular set of existing RxJava operators to it) use <code>compose</code>.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>lift</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param lift
 the Operator that implements the Single-operating function to be applied to the source Single
 @return a Single that is the result of applying the lifted Operator to the source Single
 - seealso: <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
- (RxSingle *)liftWithRxObservable_Operator:(id<RxObservable_Operator>)lift;

/*!
 @brief Returns a Single that applies a specified function to the item emitted by the source Single and
 emits the result of this function application.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.map.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>map</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param func
 a function to apply to the item emitted by the Single
 @return a Single that emits the item from the source Single, transformed by the specified function
 - seealso: <a href="http://reactivex.io/documentation/operators/map.html">ReactiveX operators documentation: Map</a>
 */
- (RxSingle *)mapWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)func;

/*!
 @brief Flattens a <code>Single</code> that emits a <code>Single</code> into a single <code>Single</code> that emits the item
 emitted by the nested <code>Single</code>, without any transformation.
 <p>
 <img width="640" height="370" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.oo.png" alt="">
 <p>
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param source
 a <code>Single</code> that emits a <code>Single</code>
 @return a <code>Single</code> that emits the item that is the result of flattening the <code>Single</code> emitted
 by <code>source</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxSingle *)mergeWithRxSingle:(RxSingle *)source;

/*!
 @brief Flattens two Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by
 using the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2;

/*!
 @brief Flattens three Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3;

/*!
 @brief Flattens four Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4;

/*!
 @brief Flattens five Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @param t5
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4
                       withRxSingle:(RxSingle *)t5;

/*!
 @brief Flattens six Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @param t5
 a Single to be merged
 @param t6
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4
                       withRxSingle:(RxSingle *)t5
                       withRxSingle:(RxSingle *)t6;

/*!
 @brief Flattens seven Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @param t5
 a Single to be merged
 @param t6
 a Single to be merged
 @param t7
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4
                       withRxSingle:(RxSingle *)t5
                       withRxSingle:(RxSingle *)t6
                       withRxSingle:(RxSingle *)t7;

/*!
 @brief Flattens eight Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @param t5
 a Single to be merged
 @param t6
 a Single to be merged
 @param t7
 a Single to be merged
 @param t8
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4
                       withRxSingle:(RxSingle *)t5
                       withRxSingle:(RxSingle *)t6
                       withRxSingle:(RxSingle *)t7
                       withRxSingle:(RxSingle *)t8;

/*!
 @brief Flattens nine Singles into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>merge</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>merge</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @param t2
 a Single to be merged
 @param t3
 a Single to be merged
 @param t4
 a Single to be merged
 @param t5
 a Single to be merged
 @param t6
 a Single to be merged
 @param t7
 a Single to be merged
 @param t8
 a Single to be merged
 @param t9
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
+ (RxObservable *)mergeWithRxSingle:(RxSingle *)t1
                       withRxSingle:(RxSingle *)t2
                       withRxSingle:(RxSingle *)t3
                       withRxSingle:(RxSingle *)t4
                       withRxSingle:(RxSingle *)t5
                       withRxSingle:(RxSingle *)t6
                       withRxSingle:(RxSingle *)t7
                       withRxSingle:(RxSingle *)t8
                       withRxSingle:(RxSingle *)t9;

/*!
 @brief Flattens this and another Single into a single Observable, without any transformation.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt="">
 <p>
 You can combine items emitted by multiple Singles so that they appear as a single Observable, by using
 the <code>mergeWith</code> method.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>mergeWith</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param t1
 a Single to be merged
 @return an Observable that emits all of the items emitted by the source Singles
 - seealso: <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
- (RxObservable *)mergeWithWithRxSingle:(RxSingle *)t1;

/*!
 @brief Modifies a Single to emit its item (or notify of its error) on a specified <code>Scheduler</code>,
 asynchronously.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.observeOn.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param scheduler
 the <code>Scheduler</code> to notify subscribers on
 @return the source Single modified so that its subscribers are notified on the specified
 <code>Scheduler</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/observeon.html">ReactiveX operators documentation: ObserveOn</a>
 - seealso: <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 - seealso: #subscribeOn
 */
- (RxSingle *)observeOnWithRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Instructs a Single to pass control to another Single rather than invoking
 <code>Observer.onError(Throwable)</code> if it encounters an error.
 <p/>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt="">
 <p/>
 By default, when a Single encounters an error that prevents it from emitting the expected item to
 its <code>Observer</code>, the Single invokes its Observer's <code>onError</code> method, and then quits
 without invoking any more of its Observer's methods. The <code>onErrorResumeNext</code> method changes this
 behavior. If you pass a function that will return another Single (<code>resumeFunctionInCaseOfError</code>) to an Single's
 <code>onErrorResumeNext</code> method, if the original Single encounters an error, instead of invoking its
 Observer's <code>onError</code> method, it will instead relinquish control to <code>resumeSingleInCaseOfError</code> which
 will invoke the Observer's <code>onNext</code> method if it is able to do so. In such a case,
 because no Single necessarily invokes <code>onError</code>, the Observer may never know that an error
 happened.
 <p/>
 You can use this to prevent errors from propagating or to supply fallback data should errors be
 encountered.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>onErrorResumeNext</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param resumeFunctionInCaseOfError a function that returns a Single that will take control if source Single encounters an error.
 @return the original Single, with appropriately modified behavior.
 - seealso: <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
  The behavior of this can change at any time.
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
- (RxSingle *)onErrorResumeNextWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)resumeFunctionInCaseOfError;

/*!
 @brief Instructs a Single to pass control to another Single rather than invoking
 <code>Observer.onError(Throwable)</code> if it encounters an error.
 <p/>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt="">
 <p/>
 By default, when a Single encounters an error that prevents it from emitting the expected item to
 its <code>Observer</code>, the Single invokes its Observer's <code>onError</code> method, and then quits
 without invoking any more of its Observer's methods. The <code>onErrorResumeNext</code> method changes this
 behavior. If you pass another Single (<code>resumeSingleInCaseOfError</code>) to an Single's
 <code>onErrorResumeNext</code> method, if the original Single encounters an error, instead of invoking its
 Observer's <code>onError</code> method, it will instead relinquish control to <code>resumeSingleInCaseOfError</code> which
 will invoke the Observer's <code>onNext</code> method if it is able to do so. In such a case,
 because no Single necessarily invokes <code>onError</code>, the Observer may never know that an error
 happened.
 <p/>
 You can use this to prevent errors from propagating or to supply fallback data should errors be
 encountered.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>onErrorResumeNext</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param resumeSingleInCaseOfError a Single that will take control if source Single encounters an error.
 @return the original Single, with appropriately modified behavior.
 - seealso: <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
  The behavior of this can change at any time.
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
- (RxSingle *)onErrorResumeNextWithRxSingle:(RxSingle *)resumeSingleInCaseOfError;

/*!
 @brief Instructs a Single to emit an item (returned by a specified function) rather than invoking
 <code>onError</code> if it encounters an error.
 <p>
 <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorReturn.png" alt="">
 <p>
 By default, when a Single encounters an error that prevents it from emitting the expected item to its
 subscriber, the Single invokes its subscriber's <code>Subscriber.onError</code> method, and then quits
 without invoking any more of its subscriber's methods. The <code>onErrorReturn</code> method changes this
 behavior. If you pass a function (<code>resumeFunction</code>) to a Single's <code>onErrorReturn</code> method, if
 the original Single encounters an error, instead of invoking its subscriber's
 <code>Subscriber.onError</code> method, it will instead emit the return value of <code>resumeFunction</code>.
 <p>
 You can use this to prevent errors from propagating or to supply fallback data should errors be
 encountered.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>onErrorReturn</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param resumeFunction
 a function that returns an item that the new Single will emit if the source Single encounters
 an error
 @return the original Single with appropriately modified behavior
 - seealso: <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 */
- (RxSingle *)onErrorReturnWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)resumeFunction;

/*!
 @brief Returns a Single that mirrors the source Single, resubscribing to it if it calls <code>onError</code>
 (infinite retry count).
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt="">
 If the source Single calls <code>SingleSubscriber.onError</code>, this method will resubscribe to the source
 Single rather than propagating the <code>onError</code> call.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>retry</code> operates by default on the <code>trampoline</code> <code>Scheduler</code>.</dd>
 </dl>
 @return the source Single modified with retry logic
 - seealso: <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
- (RxSingle *)retry;

/*!
 @brief Returns an Single that mirrors the source Single, resubscribing to it if it calls <code>onError</code>
 and the predicate returns true for that specific exception and retry count.
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt="">
 <dl>
 <dt><b>Backpressure Support:</b></dt>
 <dd>This operator honors backpressure.</td>
 <dt><b>Scheduler:</b></dt>
 <dd><code>retry</code> operates by default on the <code>trampoline</code> <code>Scheduler</code>.</dd>
 </dl>
 @param predicate
 the predicate that determines if a resubscription may happen in case of a specific exception
 and retry count
 @return the source Single modified with retry logic
 - seealso: #retry()
 - seealso: <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
- (RxSingle *)retryWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)predicate;

/*!
 @brief Returns an Single that mirrors the source Single, resubscribing to it if it calls <code>onError</code>
 up to a specified number of retries.
 <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt="">
 If the source Single calls <code>SingleSubscriber.onError</code>, this method will resubscribe to the source
 Single for a maximum of <code>count</code> resubscriptions rather than propagating the
 <code>onError</code> call.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>retry</code> operates by default on the <code>trampoline</code> <code>Scheduler</code>.</dd>
 </dl>
 @param count
 number of retry attempts before failing
 @return the source Single modified with retry logic
 - seealso: <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
- (RxSingle *)retryWithLong:(jlong)count;

/*!
 @brief Returns a Single that emits the same values as the source Single with the exception of an
 <code>onError</code>.
 An <code>onError</code> notification from the source will result in the emission of a
 <code>Throwable</code> item to the Observable provided as an argument to the <code>notificationHandler</code>
 function. 
 <p>Emissions from the handler <code>Observable</code> is treated as follows:
 <ul>
 <li>If the handler <code>Observable</code> emits an <code>onCompleted</code> the <code>retryWhen</code> will call <code>onError</code>
 with <code>NoSuchElementException</code> on the child subscription.</li> 
 <li>If the handler <code>Observable</code> emits an <code>onError</code> the <code>retryWhen</code> will call
 <code>onError</code> with the same Throwable instance on the child subscription. 
 <li>Otherwise, the operator will resubscribe to the source Single.</li>
 </ul>
 <p>The <code>notificationHandler</code> function is called for each subscriber individually. This allows per-Subscriber
 state to be added to the error notification sequence.</p>
 @code
<code>
  single.retryWhen(error -&gt; {
     AtomicInteger counter = new AtomicInteger();
     return error.takeWhile(e -&gt; counter.incrementAndGet() &lt; 3).map(e -&gt; "retry");
  }).subscribe(...);
  
@endcode
 <p>
 Note that you must compose over the input <code>Observable</code> provided in the function call because  expects
 an emission of the exception to be matched by an event from the handler Observable.
 <p>
 <img width="640" height="430" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retryWhen.f.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>retryWhen</code> operates by default on the <code>trampoline</code> <code>Scheduler</code>.</dd>
 </dl>
 @param notificationHandler
 receives an Observable of notifications with which a user can complete or error, aborting the
 retry
 @return the source Single modified with retry logic
 - seealso: <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
- (RxSingle *)retryWhenWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)notificationHandler;

/*!
 @brief Subscribes to a Single but ignore its emission or notification.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>subscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @return a <code>Subscription</code> reference can request the <code>Single</code> stop work.
 @throws OnErrorNotImplementedException
 if the Single tries to call <code>Subscriber.onError</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
- (id<RxSubscription>)subscribe;

/*!
 @brief Subscribes to a Single and provides a callback to handle the item it emits.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>subscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param onSuccess
 the <code>Action1<T></code> you have designed to accept the emission from the Single
 @return a <code>Subscription</code> reference can request the <code>Single</code> stop work.
 @throws IllegalArgumentException
 if <code>onNext</code> is null
 @throws OnErrorNotImplementedException
 if the Single tries to call <code>Subscriber.onError</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
- (id<RxSubscription>)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onSuccess;

/*!
 @brief Subscribes to a Single and provides callbacks to handle the item it emits or any error notification it
 issues.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>subscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param onSuccess
 the <code>Action1<T></code> you have designed to accept the emission from the Single
 @param onError
 the <code>Action1<Throwable></code> you have designed to accept any error notification from the
 Single
 @return a <code>Subscription</code> reference can request the <code>Single</code> stop work.
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 @throws IllegalArgumentException
 if <code>onNext</code> is null, or
 if <code>onError</code> is null
 */
- (id<RxSubscription>)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onSuccess
                               withRxFunctionsAction1:(id<RxFunctionsAction1>)onError;

/*!
 @brief Subscribes an Observer to this single and returns a Subscription that allows
 unsubscription.
 @param observer the Observer to subscribe
 @return the Subscription that allows unsubscription
 */
- (id<RxSubscription>)subscribeWithRxObserver:(id<RxObserver>)observer;

/*!
 @brief Subscribes to a Single and provides a <code>SingleSubscriber</code> that implements functions to handle the
 item the Single emits or any error notification it issues.
 <p>
 A typical implementation of <code>subscribe</code> does the following:
 <ol>
 <li>It stores a reference to the Subscriber in a collection object, such as a <code>List<T></code> object.</li>
 <li>It returns a reference to the <code>Subscription</code> interface. This enables Subscribers to
 unsubscribe, that is, to stop receiving the item or notification before the Single completes.</li>
 </ol><p>
 A <code>Single<T></code> instance is responsible for accepting all subscriptions and notifying all
 Subscribers. Unless the documentation for a particular <code>Single<T></code> implementation indicates
 otherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will
 receive their notifications.
 <p>
 For more information see the
 <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>subscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param te
 the <code>SingleSubscriber</code> that will handle the emission or notification from the Single
 @return a <code>Subscription</code> reference can request the <code>Single</code> stop work.
 @throws IllegalStateException
 if <code>subscribe</code> is unable to obtain an <code>OnSubscribe<></code> function
 @throws IllegalArgumentException
 if the <code>SingleSubscriber</code> provided as the argument to <code>subscribe</code> is <code>null</code>
 @throws OnErrorNotImplementedException
 if the <code>SingleSubscriber</code>'s <code>onError</code> method is null
 @throws RuntimeException
 if the <code>SingleSubscriber</code>'s <code>onError</code> method itself threw a <code>Throwable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
- (id<RxSubscription>)subscribeWithRxSingleSubscriber:(RxSingleSubscriber *)te;

/*!
 @brief Subscribes to a Single and provides a Subscriber that implements functions to handle the item the Single
 emits or any error notification it issues.
 <p>
 A typical implementation of <code>subscribe</code> does the following:
 <ol>
 <li>It stores a reference to the Subscriber in a collection object, such as a <code>List<T></code> object.</li>
 <li>It returns a reference to the <code>Subscription</code> interface. This enables Subscribers to
 unsubscribe, that is, to stop receiving the item or notification before the Single completes.</li>
 </ol><p>
 A <code>Single<T></code> instance is responsible for accepting all subscriptions and notifying all
 Subscribers. Unless the documentation for a particular <code>Single<T></code> implementation indicates
 otherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will
 receive their notifications.
 <p>
 For more information see the
 <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>subscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param subscriber
 the <code>Subscriber</code> that will handle the emission or notification from the Single
 @return a <code>Subscription</code> reference can request the <code>Single</code> stop work.
 @throws IllegalStateException
 if <code>subscribe</code> is unable to obtain an <code>OnSubscribe<></code> function
 @throws IllegalArgumentException
 if the <code>Subscriber</code> provided as the argument to <code>subscribe</code> is <code>null</code>
 @throws OnErrorNotImplementedException
 if the <code>Subscriber</code>'s <code>onError</code> method is null
 @throws RuntimeException
 if the <code>Subscriber</code>'s <code>onError</code> method itself threw a <code>Throwable</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
- (id<RxSubscription>)subscribeWithRxSubscriber:(RxSubscriber *)subscriber;

/*!
 @brief Asynchronously subscribes subscribers to this Single on the specified <code>Scheduler</code>.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribeOn.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param scheduler
 the <code>Scheduler</code> to perform subscription actions on
 @return the source Single modified so that its subscriptions happen on the specified <code>Scheduler</code>
 - seealso: <a href="http://reactivex.io/documentation/operators/subscribeon.html">ReactiveX operators documentation: SubscribeOn</a>
 - seealso: <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 - seealso: #observeOn
 */
- (RxSingle *)subscribeOnWithRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Single that emits the item emitted by the source Single until a Completable terminates.
 Upon
 termination of <code>other</code>, this will emit a <code>CancellationException</code> rather than go to
 <code>SingleSubscriber.onSuccess(Object)</code>.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>takeUntil</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param other
 the Completable whose termination will cause <code>takeUntil</code> to emit the item from the source
 Single
 @return a Single that emits the item emitted by the source Single until such time as <code>other</code> terminates.
 - seealso: <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
- (RxSingle *)takeUntilWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a Single that emits the item emitted by the source Single until an Observable emits an item.
 Upon
 emission of an item from <code>other</code>, this will emit a <code>CancellationException</code> rather than go to
 <code>SingleSubscriber.onSuccess(Object)</code>.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>takeUntil</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param other
 the Observable whose first emitted item will cause <code>takeUntil</code> to emit the item from the source
 Single
 @return a Single that emits the item emitted by the source Single until such time as <code>other</code> emits
 its first item
 - seealso: <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
- (RxSingle *)takeUntilWithRxObservable:(RxObservable *)other;

/*!
 @brief Returns a Single that emits the item emitted by the source Single until a second Single emits an item.
 Upon
 emission of an item from <code>other</code>, this will emit a <code>CancellationException</code> rather than go to
 <code>SingleSubscriber.onSuccess(Object)</code>.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>takeUntil</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param other
 the Single whose emitted item will cause <code>takeUntil</code> to emit the item from the source Single
 @return a Single that emits the item emitted by the source Single until such time as <code>other</code> emits its item
 - seealso: <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
- (RxSingle *)takeUntilWithRxSingle:(RxSingle *)other;

/*!
 @brief Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item.
 If it
 is not emitted within the specified timeout duration, the resulting Single terminates and notifies
 subscribers of a <code>TimeoutException</code>.
 <p>
 <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>This version of <code>timeout</code> operates by default on the <code>computation</code> <code>Scheduler</code>.</dd>
 </dl>
 @param timeout
 maximum duration before the Single times out
 @param timeUnit
 the unit of time that applies to the <code>timeout</code> argument.
 @return the source Single modified to notify subscribers of a <code>TimeoutException</code> in case of a
 timeout
 - seealso: <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
- (RxSingle *)timeoutWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit;

/*!
 @brief Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, where
 this policy is governed on a specified Scheduler.
 If the item is not emitted within the specified timeout
 duration, the resulting Single terminates and notifies subscribers of a <code>TimeoutException</code>.
 <p>
 <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1s.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param timeout
 maximum duration before the Single times out
 @param timeUnit
 the unit of time that applies to the <code>timeout</code> argument
 @param scheduler
 the Scheduler to run the timeout timers on
 @return the source Single modified to notify subscribers of a <code>TimeoutException</code> in case of a
 timeout
 - seealso: <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
- (RxSingle *)timeoutWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
              withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item.
 If it
 is not emitted within the specified timeout duration, the resulting Single instead mirrors a fallback
 Single.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>This version of <code>timeout</code> operates by default on the <code>computation</code> <code>Scheduler</code>.</dd>
 </dl>
 @param timeout
 maximum time before a timeout occurs
 @param timeUnit
 the unit of time that applies to the <code>timeout</code> argument
 @param other
 the fallback Single to use in case of a timeout
 @return the source Single modified to switch to the fallback Single in case of a timeout
 - seealso: <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
- (RxSingle *)timeoutWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                 withRxSingle:(RxSingle *)other;

/*!
 @brief Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, using
 a specified Scheduler.
 If the item isn't emitted within the specified timeout duration, the resulting
 Single instead mirrors a fallback Single.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2s.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd>you specify which <code>Scheduler</code> this operator will use</dd>
 </dl>
 @param timeout
 maximum duration before a timeout occurs
 @param timeUnit
 the unit of time that applies to the <code>timeout</code> argument
 @param other
 the Single to use as the fallback in case of a timeout
 @param scheduler
 the <code>Scheduler</code> to run the timeout timers on
 @return the source Single modified so that it will switch to the fallback Single in case of a timeout
 - seealso: <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
- (RxSingle *)timeoutWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit
                 withRxSingle:(RxSingle *)other
              withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Converts a Single into a <code>BlockingSingle</code> (a Single with blocking operators).
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>toBlocking</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @return a <code>BlockingSingle</code> version of this Single.
 - seealso: <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
 */
- (RxSinglesBlockingSingle *)toBlocking;

/*!
 @brief Returns a <code>Completable</code> that discards result of the <code>Single</code> (similar to
 <code>Observable.ignoreElements()</code>) and calls <code>onCompleted</code> when this source <code>Single</code> calls
 <code>onSuccess</code>.
 Error terminal event is propagated.
 <p>
 <img width="640" height="295" src=
 "https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toCompletable.png"
 alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>toCompletable</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @return a <code>Completable</code> that calls <code>onCompleted</code> on it's subscriber when the source <code>Single</code>
 calls <code>onSuccess</code>.
 - seealso: <a href="http://reactivex.io/documentation/completable.html">ReactiveX documentation: Completable</a>
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical
 with the release number).
 */
- (RxCompletable *)toCompletable;

/*!
 @brief Converts this Single into an <code>Observable</code>.
 <p>
 <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">
 @return an <code>Observable</code> that emits a single item T.
 */
- (RxObservable *)toObservable;

/*!
 @brief Subscribes to a Single and invokes the <code>OnSubscribe</code> function without any contract protection,
 error handling, unsubscribe, or execution hooks.
 <p>
 Use this only for implementing an <code>Operator</code> that requires nested subscriptions. For other
 purposes, use <code>subscribe(Subscriber)</code> which ensures the Rx contract and other functionality.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>unsafeSubscribe</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param subscriber
 the Subscriber that will handle the emission or notification from the Single
 @return the subscription that allows unsubscribing
 */
- (id<RxSubscription>)unsafeSubscribeWithRxSubscriber:(RxSubscriber *)subscriber;

/*!
 @brief Constructs an Single that creates a dependent resource object which is disposed of on unsubscription.
 <p>
 <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>using</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param resourceFactory
 the factory function to create a resource object that depends on the Single
 @param singleFactory
 the factory function to create a Single
 @param disposeAction
 the function that will dispose of the resource
 @return the Single whose lifetime controls the lifetime of the dependent resource object
 - seealso: <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
 */
+ (RxSingle *)using__WithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFactory
                     withRxFunctionsFunc1:(id<RxFunctionsFunc1>)singleFactory
                   withRxFunctionsAction1:(id<RxFunctionsAction1>)disposeAction;

/*!
 @brief Constructs an Single that creates a dependent resource object which is disposed of just before 
 termination if you have set <code>disposeEagerly</code> to <code>true</code> and unsubscription does not occur
 before termination.
 Otherwise resource disposal will occur on unsubscription.  Eager disposal is
 particularly appropriate for a synchronous Single that reuses resources. <code>disposeAction</code> will
 only be called once per subscription.
 <p>
 <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>using</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param resourceFactory
 the factory function to create a resource object that depends on the Single
 @param singleFactory
 the factory function to create a Single
 @param disposeAction
 the function that will dispose of the resource
 @param disposeEagerly
 if <code>true</code> then disposal will happen either on unsubscription or just before emission of 
 a terminal event (<code>onComplete</code> or <code>onError</code>).
 @return the Single whose lifetime controls the lifetime of the dependent resource object
 - seealso: <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
  The behavior of this can change at any time.
 @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
+ (RxSingle *)using__WithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFactory
                     withRxFunctionsFunc1:(id<RxFunctionsFunc1>)singleFactory
                   withRxFunctionsAction1:(id<RxFunctionsAction1>)disposeAction
                              withBoolean:(jboolean)disposeEagerly;

/*!
 @brief Returns a Single that emits the result of specified combiner function applied to combination of
 items emitted, in sequence, by an Iterable of other Singles.
 <p>
 <code>zip</code> applies this function in strict sequence.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param singles
 an Iterable of source Singles. Should not be empty because <code>Single</code> either emits result or error.
 <code>java.util.NoSuchElementException</code> will be emit as error if Iterable will be empty.
 @param zipFunction
 a function that, when applied to an item emitted by each of the source Singles, results in
 an item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithJavaLangIterable:(id<JavaLangIterable>)singles
                 withRxFunctionsFuncN:(id<RxFunctionsFuncN>)zipFunction;

/*!
 @brief Returns a Single that emits the results of a specified combiner function applied to two items emitted by
 two other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
         withRxFunctionsFunc2:(id<RxFunctionsFunc2>)zipFunction;

/*!
 @brief Returns a Single that emits the results of a specified combiner function applied to three items emitted
 by three other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
         withRxFunctionsFunc3:(id<RxFunctionsFunc3>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to four items
 emitted by four other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
         withRxFunctionsFunc4:(id<RxFunctionsFunc4>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to five items
 emitted by five other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param s5
 a fifth source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
                 withRxSingle:(RxSingle *)s5
         withRxFunctionsFunc5:(id<RxFunctionsFunc5>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to six items
 emitted by six other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param s5
 a fifth source Single
 @param s6
 a sixth source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
                 withRxSingle:(RxSingle *)s5
                 withRxSingle:(RxSingle *)s6
         withRxFunctionsFunc6:(id<RxFunctionsFunc6>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to seven items
 emitted by seven other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param s5
 a fifth source Single
 @param s6
 a sixth source Single
 @param s7
 a seventh source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
                 withRxSingle:(RxSingle *)s5
                 withRxSingle:(RxSingle *)s6
                 withRxSingle:(RxSingle *)s7
         withRxFunctionsFunc7:(id<RxFunctionsFunc7>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to eight items
 emitted by eight other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param s5
 a fifth source Single
 @param s6
 a sixth source Single
 @param s7
 a seventh source Single
 @param s8
 an eighth source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
                 withRxSingle:(RxSingle *)s5
                 withRxSingle:(RxSingle *)s6
                 withRxSingle:(RxSingle *)s7
                 withRxSingle:(RxSingle *)s8
         withRxFunctionsFunc8:(id<RxFunctionsFunc8>)zipFunction;

/*!
 @brief Returns an Observable that emits the results of a specified combiner function applied to nine items
 emitted by nine other Singles.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zip</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param s1
 the first source Single
 @param s2
 a second source Single
 @param s3
 a third source Single
 @param s4
 a fourth source Single
 @param s5
 a fifth source Single
 @param s6
 a sixth source Single
 @param s7
 a seventh source Single
 @param s8
 an eighth source Single
 @param s9
 a ninth source Single
 @param zipFunction
 a function that, when applied to the item emitted by each of the source Singles, results in an
 item that will be emitted by the resulting Single
 @return a Single that emits the zipped results
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
+ (RxSingle *)zipWithRxSingle:(RxSingle *)s1
                 withRxSingle:(RxSingle *)s2
                 withRxSingle:(RxSingle *)s3
                 withRxSingle:(RxSingle *)s4
                 withRxSingle:(RxSingle *)s5
                 withRxSingle:(RxSingle *)s6
                 withRxSingle:(RxSingle *)s7
                 withRxSingle:(RxSingle *)s8
                 withRxSingle:(RxSingle *)s9
         withRxFunctionsFunc9:(id<RxFunctionsFunc9>)zipFunction;

/*!
 @brief Returns a Single that emits the result of applying a specified function to the pair of items emitted by
 the source Single and another specified Single.
 <p>
 <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt="">
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>zipWith</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param other
 the other Observable
 @param zipFunction
 a function that combines the pairs of items from the two Observables to generate the items to
 be emitted by the resulting Single
 @return an Observable that pairs up values from the source Observable and the <code>other</code> Observable
 and emits the results of <code>zipFunction</code> applied to these pairs
 - seealso: <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
- (RxSingle *)zipWithWithRxSingle:(RxSingle *)other
             withRxFunctionsFunc2:(id<RxFunctionsFunc2>)zipFunction;

#pragma mark Protected

/*!
 @brief Creates a Single with a Function to execute when it is subscribed to (executed).
 <p>
 <em>Note:</em> Use <code>create(OnSubscribe)</code> to create a Single, instead of this constructor,
 unless you specifically have a need for inheritance.
 @param f
 <code>OnExecute</code> to be executed when <code>execute(SingleSubscriber)</code> or
 <code>subscribe(Subscriber)</code> is called
 */
- (instancetype)initWithRxSingle_OnSubscribe:(id<RxSingle_OnSubscribe>)f;

#pragma mark Package-Private

/*!
 @brief FOR INTERNAL USE ONLY.
 <p>
 Converts <code>Iterable</code> of <code>Single</code> to array of <code>Single</code>.
 @param singlesIterable
 non null iterable of <code>Single</code>.
 @return array of <code>Single</code> with same length as passed iterable.
 */
+ (IOSObjectArray *)iterableToArrayWithJavaLangIterable:(id<JavaLangIterable>)singlesIterable;

@end

J2OBJC_STATIC_INIT(RxSingle)

J2OBJC_FIELD_SETTER(RxSingle, onSubscribe_, id<RxObservable_OnSubscribe>)

inline RxPluginsRxJavaSingleExecutionHook *RxSingle_get_hook();
inline RxPluginsRxJavaSingleExecutionHook *RxSingle_set_hook(RxPluginsRxJavaSingleExecutionHook *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxPluginsRxJavaSingleExecutionHook *RxSingle_hook;
J2OBJC_STATIC_FIELD_OBJ(RxSingle, hook, RxPluginsRxJavaSingleExecutionHook *)

FOUNDATION_EXPORT void RxSingle_initWithRxSingle_OnSubscribe_(RxSingle *self, id<RxSingle_OnSubscribe> f);

FOUNDATION_EXPORT RxSingle *new_RxSingle_initWithRxSingle_OnSubscribe_(id<RxSingle_OnSubscribe> f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxSingle *create_RxSingle_initWithRxSingle_OnSubscribe_(id<RxSingle_OnSubscribe> f);

FOUNDATION_EXPORT RxSingle *RxSingle_createWithRxSingle_OnSubscribe_(id<RxSingle_OnSubscribe> f);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7, RxSingle *t8);

FOUNDATION_EXPORT RxObservable *RxSingle_concatWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7, RxSingle *t8, RxSingle *t9);

FOUNDATION_EXPORT RxSingle *RxSingle_errorWithNSException_(NSException *exception);

FOUNDATION_EXPORT RxSingle *RxSingle_fromWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT RxSingle *RxSingle_fromWithJavaUtilConcurrentFuture_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, jlong timeout, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT RxSingle *RxSingle_fromWithJavaUtilConcurrentFuture_withRxScheduler_(id<JavaUtilConcurrentFuture> future, RxScheduler *scheduler);

FOUNDATION_EXPORT RxSingle *RxSingle_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> func);

FOUNDATION_EXPORT RxSingle *RxSingle_justWithId_(id value);

FOUNDATION_EXPORT RxSingle *RxSingle_mergeWithRxSingle_(RxSingle *source);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7, RxSingle *t8);

FOUNDATION_EXPORT RxObservable *RxSingle_mergeWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_(RxSingle *t1, RxSingle *t2, RxSingle *t3, RxSingle *t4, RxSingle *t5, RxSingle *t6, RxSingle *t7, RxSingle *t8, RxSingle *t9);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxFunctionsFunc2_(RxSingle *s1, RxSingle *s2, id<RxFunctionsFunc2> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc3_(RxSingle *s1, RxSingle *s2, RxSingle *s3, id<RxFunctionsFunc3> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc4_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, id<RxFunctionsFunc4> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc5_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, RxSingle *s5, id<RxFunctionsFunc5> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc6_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, RxSingle *s5, RxSingle *s6, id<RxFunctionsFunc6> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc7_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, RxSingle *s5, RxSingle *s6, RxSingle *s7, id<RxFunctionsFunc7> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc8_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, RxSingle *s5, RxSingle *s6, RxSingle *s7, RxSingle *s8, id<RxFunctionsFunc8> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxSingle_withRxFunctionsFunc9_(RxSingle *s1, RxSingle *s2, RxSingle *s3, RxSingle *s4, RxSingle *s5, RxSingle *s6, RxSingle *s7, RxSingle *s8, RxSingle *s9, id<RxFunctionsFunc9> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_zipWithJavaLangIterable_withRxFunctionsFuncN_(id<JavaLangIterable> singles, id<RxFunctionsFuncN> zipFunction);

FOUNDATION_EXPORT RxSingle *RxSingle_deferWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> singleFactory);

FOUNDATION_EXPORT IOSObjectArray *RxSingle_iterableToArrayWithJavaLangIterable_(id<JavaLangIterable> singlesIterable);

FOUNDATION_EXPORT RxSingle *RxSingle_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> singleFactory, id<RxFunctionsAction1> disposeAction);

FOUNDATION_EXPORT RxSingle *RxSingle_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFactory, id<RxFunctionsFunc1> singleFactory, id<RxFunctionsAction1> disposeAction, jboolean disposeEagerly);

J2OBJC_TYPE_LITERAL_HEADER(RxSingle)

#endif

#if !defined (RxSingle_OnSubscribe_) && (INCLUDE_ALL_RxSingle || defined(INCLUDE_RxSingle_OnSubscribe))
#define RxSingle_OnSubscribe_

#define RESTRICT_RxFunctionsAction1 1
#define INCLUDE_RxFunctionsAction1 1
#include "rx/functions/Action1.h"

/*!
 @brief Invoked when Single.execute is called.
 */
@protocol RxSingle_OnSubscribe < RxFunctionsAction1, JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingle_OnSubscribe)

J2OBJC_TYPE_LITERAL_HEADER(RxSingle_OnSubscribe)

#endif

#if !defined (RxSingle_Transformer_) && (INCLUDE_ALL_RxSingle || defined(INCLUDE_RxSingle_Transformer))
#define RxSingle_Transformer_

#define RESTRICT_RxFunctionsFunc1 1
#define INCLUDE_RxFunctionsFunc1 1
#include "rx/functions/Func1.h"

@class RxSingle;

/*!
 @brief Transformer function used by <code>compose</code>.
  more complete description needed
 */
@protocol RxSingle_Transformer < RxFunctionsFunc1, JavaObject >

- (RxSingle *)callWithId:(RxSingle *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSingle_Transformer)

J2OBJC_TYPE_LITERAL_HEADER(RxSingle_Transformer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSingle")
