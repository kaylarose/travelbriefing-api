//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Completable.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxCompletable")
#ifdef RESTRICT_RxCompletable
#define INCLUDE_ALL_RxCompletable 0
#else
#define INCLUDE_ALL_RxCompletable 1
#endif
#undef RESTRICT_RxCompletable

#if !defined (RxCompletable_) && (INCLUDE_ALL_RxCompletable || defined(INCLUDE_RxCompletable))
#define RxCompletable_

@class IOSObjectArray;
@class JavaLangNullPointerException;
@class JavaUtilConcurrentTimeUnit;
@class RxObservable;
@class RxPluginsRxJavaCompletableExecutionHook;
@class RxPluginsRxJavaErrorHandler;
@class RxScheduler;
@class RxSingle;
@class RxSubscriber;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentFuture;
@protocol RxCompletable_CompletableOnSubscribe;
@protocol RxCompletable_CompletableOperator;
@protocol RxCompletable_CompletableSubscriber;
@protocol RxCompletable_CompletableTransformer;
@protocol RxFunctionsAction0;
@protocol RxFunctionsAction1;
@protocol RxFunctionsFunc0;
@protocol RxFunctionsFunc1;
@protocol RxFunctionsFunc2;
@protocol RxSubscription;

/*!
 @brief Represents a deferred computation without any value but only indication for completion or exception.
 The class follows a similar event pattern as Reactive-Streams: onSubscribe (onError|onComplete)?
 */
@interface RxCompletable : NSObject

+ (RxPluginsRxJavaErrorHandler *)ERROR_HANDLER;

+ (RxPluginsRxJavaCompletableExecutionHook *)HOOK;

+ (void)setHOOK:(RxPluginsRxJavaCompletableExecutionHook *)value;

+ (RxCompletable *)COMPLETE;

+ (RxCompletable *)NEVER;

#pragma mark Public

/*!
 @brief Returns a Completable which terminates as soon as one of the source Completables
 terminates (normally or with an error) and cancels all other Completables.
 @param sources the array of source Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)ambWithRxCompletableArray:(IOSObjectArray *)sources;

/*!
 @brief Returns a Completable which terminates as soon as one of the source Completables
 terminates (normally or with an error) and cancels all other Completables.
 @param sources the array of source Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)ambWithJavaLangIterable:(id<JavaLangIterable>)sources;

/*!
 @brief Returns a Completable that emits the a terminated event of either this Completable
 or the other Completable whichever fires first.
 @param other the other Completable, not null
 @return the new Completable instance
 @throws NullPointerException if other is null
 */
- (RxCompletable *)ambWithWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a completable that first runs this Completable
 and then the other completable.
 <p>
 This is an alias for <code>concatWith(Completable)</code>.
 @param next the other Completable, not null
 @return the new Completable instance
 @throws NullPointerException if other is null
 */
- (RxCompletable *)andThenWithRxCompletable:(RxCompletable *)next;

/*!
 @brief Returns an Observable which will subscribe to this Completable and once that is completed then 
 will subscribe to the <code>next</code> Observable.
 An error event from this Completable will be 
 propagated to the downstream subscriber and will result in skipping the subscription of the 
 Observable.  
 @param next the Observable to subscribe after this Completable is completed, not null
 @return Observable that composes this Completable and next
 @throws NullPointerException if next is null
 */
- (RxObservable *)andThenWithRxObservable:(RxObservable *)next;

/*!
 @brief Returns a Single which will subscribe to this Completable and once that is completed then
 will subscribe to the <code>next</code> Single.
 An error event from this Completable will be
 propagated to the downstream subscriber and will result in skipping the subscription of the
 Single.
 <dl>
 <dt><b>Scheduler:</b></dt>
 <dd><code>andThen</code> does not operate by default on a particular <code>Scheduler</code>.</dd>
 </dl>
 @param next the Single to subscribe after this Completable is completed, not null
 @return Single that composes this Completable and next
 */
- (RxSingle *)andThenWithRxSingle:(RxSingle *)next;

/*!
 @brief Subscribes to and awaits the termination of this Completable instance in a blocking manner and
 rethrows any exception emitted.
 @throws RuntimeException wrapping an InterruptedException if the current thread is interrupted
 */
- (void)await;

/*!
 @brief Subscribes to and awaits the termination of this Completable instance in a blocking manner
 with a specific timeout and rethrows any exception emitted within the timeout window.
 @param timeout the timeout value
 @param unit the timeout unit
 @return true if the this Completable instance completed normally within the time limit,
 false if the timeout elapsed before this Completable terminated.
 @throws RuntimeException wrapping an InterruptedException if the current thread is interrupted
 */
- (jboolean)awaitWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns a Completable instance that completes immediately when subscribed to.
 @return a Completable instance that completes immediately
 */
+ (RxCompletable *)complete;

/*!
 @brief Calls the given transformer function with this instance and returns the function's resulting
 Completable.
 @param transformer the transformer function, not null
 @return the Completable returned by the function
 @throws NullPointerException if transformer is null
 */
- (RxCompletable *)composeWithRxCompletable_CompletableTransformer:(id<RxCompletable_CompletableTransformer>)transformer;

/*!
 @brief Returns a Completable which completes only when all sources complete, one after another.
 @param sources the sources to concatenate
 @return the Completable instance which completes only when all sources complete
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)concatWithRxCompletableArray:(IOSObjectArray *)sources;

/*!
 @brief Returns a Completable which completes only when all sources complete, one after another.
 @param sources the sources to concatenate
 @return the Completable instance which completes only when all sources complete
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)concatWithJavaLangIterable:(id<JavaLangIterable>)sources;

/*!
 @brief Returns a Completable which completes only when all sources complete, one after another.
 @param sources the sources to concatenate
 @return the Completable instance which completes only when all sources complete
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)concatWithRxObservable:(RxObservable *)sources;

/*!
 @brief Returns a Completable which completes only when all sources complete, one after another.
 @param sources the sources to concatenate
 @param prefetch the number of sources to prefetch from the sources
 @return the Completable instance which completes only when all sources complete
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)concatWithRxObservable:(RxObservable *)sources
                                  withInt:(jint)prefetch;

/*!
 @brief Concatenates this Completable with another Completable.
 @param other the other Completable, not null
 @return the new Completable which subscribes to this and then the other Completable
 @throws NullPointerException if other is null
 */
- (RxCompletable *)concatWithWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Constructs a Completable instance by wrapping the given onSubscribe callback.
 @param onSubscribe the callback which will receive the CompletableSubscriber instances
 when the Completable is subscribed to.
 @return the created Completable instance
 @throws NullPointerException if onSubscribe is null
 */
+ (RxCompletable *)createWithRxCompletable_CompletableOnSubscribe:(id<RxCompletable_CompletableOnSubscribe>)onSubscribe;

/*!
 @brief Defers the subscription to a Completable instance returned by a supplier.
 @param completableFunc0 the supplier that returns the Completable that will be subscribed to.
 @return the Completable instance
 */
+ (RxCompletable *)deferWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)completableFunc0;

/*!
 @brief Returns a Completable which delays the emission of the completion event by the given time.
 @param delay the delay time
 @param unit the delay unit
 @return the new Completable instance
 @throws NullPointerException if unit is null
 */
- (RxCompletable *)delayWithLong:(jlong)delay
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns a Completable which delays the emission of the completion event by the given time while
 running on the specified scheduler.
 @param delay the delay time
 @param unit the delay unit
 @param scheduler the scheduler to run the delayed completion on
 @return the new Completable instance
 @throws NullPointerException if unit or scheduler is null
 */
- (RxCompletable *)delayWithLong:(jlong)delay
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Completable which delays the emission of the completion event, and optionally the error as well, by the given time while
 running on the specified scheduler.
 @param delay the delay time
 @param unit the delay unit
 @param scheduler the scheduler to run the delayed completion on
 @param delayError delay the error emission as well?
 @return the new Completable instance
 @throws NullPointerException if unit or scheduler is null
 */
- (RxCompletable *)delayWithLong:(jlong)delay
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withRxScheduler:(RxScheduler *)scheduler
                     withBoolean:(jboolean)delayError;

/*!
 @brief Returns a Completable instance that calls the given onAfterComplete callback after this
 Completable completes normally.
 @param onAfterComplete the callback to call after this Completable emits an onComplete event.
 @return the new Completable instance
 @throws NullPointerException if onAfterComplete is null
 */
- (RxCompletable *)doAfterTerminateWithRxFunctionsAction0:(id<RxFunctionsAction0>)onAfterComplete;

/*!
 @brief Returns a Completable which calls the given onComplete callback if this Completable completes.
 @param onComplete the callback to call when this emits an onComplete event
 @return the new Completable instance
 @throws NullPointerException if onComplete is null
 */
- (RxCompletable *)doOnCompleteWithRxFunctionsAction0:(id<RxFunctionsAction0>)onComplete;

/*!
 @brief Returns a Completable which calls the given onCompleted callback if this Completable completes.
 @param onCompleted the callback to call when this emits an onComplete event
 @return the new Completable instance
 @throws NullPointerException if onComplete is null
 */
- (RxCompletable *)doOnCompletedWithRxFunctionsAction0:(id<RxFunctionsAction0>)onCompleted;

/*!
 @brief Returns a Completable which calls the given onError callback if this Completable emits an error.
 @param onError the error callback
 @return the new Completable instance
 @throws NullPointerException if onError is null
 */
- (RxCompletable *)doOnErrorWithRxFunctionsAction1:(id<RxFunctionsAction1>)onError;

/*!
 @brief Returns a Completable instance that calls the given onSubscribe callback with the disposable
 that child subscribers receive on subscription.
 @param onSubscribe the callback called when a child subscriber subscribes
 @return the new Completable instance
 @throws NullPointerException if onSubscribe is null
 */
- (RxCompletable *)doOnSubscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onSubscribe;

/*!
 @brief Returns a Completable instance that calls the given onTerminate callback just before this Completable
 completes normally or with an exception
 @param onTerminate the callback to call just before this Completable terminates
 @return the new Completable instance
 */
- (RxCompletable *)doOnTerminateWithRxFunctionsAction0:(id<RxFunctionsAction0>)onTerminate;

/*!
 @brief Returns a Completable which calls the given onUnsubscribe callback if the child subscriber cancels
 the subscription.
 @param onUnsubscribe the callback to call when the child subscriber cancels the subscription
 @return the new Completable instance
 @throws NullPointerException if onDispose is null
 */
- (RxCompletable *)doOnUnsubscribeWithRxFunctionsAction0:(id<RxFunctionsAction0>)onUnsubscribe;

/*!
 @brief Returns a completable that first runs this Completable
 and then the other completable.
 <p>
 This is an alias for <code>concatWith(Completable)</code>.
 @param other the other Completable, not null
 @return the new Completable instance
 @throws NullPointerException if other is null
 */
- (RxCompletable *)endWithWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns an Observable that first runs this Completable instance and
 resumes with the given next Observable.
 @param next the next Observable to continue
 @return the new Observable instance
 */
- (RxObservable *)endWithWithRxObservable:(RxObservable *)next;

/*!
 @brief Creates a Completable which calls the given error supplier for each subscriber
 and emits its returned Throwable.
 <p>
 If the errorFunc0 returns null, the child CompletableSubscribers will receive a
 NullPointerException.
 @param errorFunc0 the error supplier, not null
 @return the new Completable instance
 @throws NullPointerException if errorFunc0 is null
 */
+ (RxCompletable *)errorWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)errorFunc0;

/*!
 @brief Creates a Completable instance that emits the given Throwable exception to subscribers.
 @param error the Throwable instance to emit, not null
 @return the new Completable instance
 @throws NullPointerException if error is null
 */
+ (RxCompletable *)errorWithNSException:(NSException *)error;

/*!
 @brief Returns a Completable instance that runs the given Action0 for each subscriber and
 emits either an unchecked exception or simply completes.
 @param run the runnable to run for each subscriber
 @return the new Completable instance
 @throws NullPointerException if run is null
 */
+ (RxCompletable *)fromActionWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

/*!
 @brief Returns a Completable which when subscribed, executes the callable function, ignores its
 normal result and emits onError or onCompleted only.
 @param callable the callable instance to execute for each subscriber
 @return the new Completable instance
 */
+ (RxCompletable *)fromCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

/*!
 @brief Returns a Completable instance that reacts to the termination of the given Future in a blocking fashion.
 <p>
 Note that cancellation from any of the subscribers to this Completable will cancel the future.
 @param future the future to react to
 @return the new Completable instance
 */
+ (RxCompletable *)fromFutureWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

/*!
 @brief Returns a Completable instance that subscribes to the given flowable, ignores all values and
 emits only the terminal event.
 @param flowable the Flowable instance to subscribe to, not null
 @return the new Completable instance
 @throws NullPointerException if flowable is null
 */
+ (RxCompletable *)fromObservableWithRxObservable:(RxObservable *)flowable;

/*!
 @brief Returns a Completable instance that when subscribed to, subscribes to the Single instance and
 emits a completion event if the single emits onSuccess or forwards any onError events.
 @param single the Single instance to subscribe to, not null
 @return the new Completable instance
 @throws NullPointerException if single is null
 */
+ (RxCompletable *)fromSingleWithRxSingle:(RxSingle *)single;

/*!
 @brief Subscribes to this Completable instance and blocks until it terminates, then returns null or
 the emitted exception if any.
 @return the throwable if this terminated with an error, null otherwise
 @throws RuntimeException that wraps an InterruptedException if the wait is interrupted
 */
- (NSException *)get;

/*!
 @brief Subscribes to this Completable instance and blocks until it terminates or the specified timeout 
 elapses, then returns null for normal termination or the emitted exception if any.
 @return the throwable if this terminated with an error, null otherwise
 @throws RuntimeException that wraps an InterruptedException if the wait is interrupted or
 TimeoutException if the specified timeout elapsed before it
 */
- (NSException *)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Lifts a CompletableSubscriber transformation into the chain of Completables.
 @param onLift the lifting function that transforms the child subscriber with a parent subscriber.
 @return the new Completable instance
 @throws NullPointerException if onLift is null
 */
- (RxCompletable *)liftWithRxCompletable_CompletableOperator:(id<RxCompletable_CompletableOperator>)onLift;

/*!
 @brief Returns a Completable instance that subscribes to all sources at once and
 completes only when all source Completables complete or one of them emits an error.
 @param sources the iterable sequence of sources.
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeWithRxCompletableArray:(IOSObjectArray *)sources;

/*!
 @brief Returns a Completable instance that subscribes to all sources at once and
 completes only when all source Completables complete or one of them emits an error.
 @param sources the iterable sequence of sources.
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeWithJavaLangIterable:(id<JavaLangIterable>)sources;

/*!
 @brief Returns a Completable instance that subscribes to all sources at once and
 completes only when all source Completables complete or one of them emits an error.
 @param sources the iterable sequence of sources.
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeWithRxObservable:(RxObservable *)sources;

/*!
 @brief Returns a Completable instance that keeps subscriptions to a limited number of sources at once and
 completes only when all source Completables complete or one of them emits an error.
 @param sources the iterable sequence of sources.
 @param maxConcurrency the maximum number of concurrent subscriptions
 @return the new Completable instance
 @throws NullPointerException if sources is null
 @throws IllegalArgumentException if maxConcurrency is less than 1
 */
+ (RxCompletable *)mergeWithRxObservable:(RxObservable *)sources
                                 withInt:(jint)maxConcurrency;

/*!
 @brief Returns a Completable that subscribes to all Completables in the source array and delays
 any error emitted by either the sources observable or any of the inner Completables until all of
 them terminate in a way or another.
 @param sources the array of Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeDelayErrorWithRxCompletableArray:(IOSObjectArray *)sources;

/*!
 @brief Returns a Completable that subscribes to all Completables in the source sequence and delays
 any error emitted by either the sources observable or any of the inner Completables until all of
 them terminate in a way or another.
 @param sources the sequence of Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeDelayErrorWithJavaLangIterable:(id<JavaLangIterable>)sources;

/*!
 @brief Returns a Completable that subscribes to all Completables in the source sequence and delays
 any error emitted by either the sources observable or any of the inner Completables until all of
 them terminate in a way or another.
 @param sources the sequence of Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeDelayErrorWithRxObservable:(RxObservable *)sources;

/*!
 @brief Returns a Completable that subscribes to a limited number of inner Completables at once in 
 the source sequence and delays any error emitted by either the sources 
 observable or any of the inner Completables until all of
 them terminate in a way or another.
 @param sources the sequence of Completables
 @return the new Completable instance
 @throws NullPointerException if sources is null
 */
+ (RxCompletable *)mergeDelayErrorWithRxObservable:(RxObservable *)sources
                                           withInt:(jint)maxConcurrency;

/*!
 @brief Returns a Completable which subscribes to this and the other Completable and completes
 when both of them complete or one emits an error.
 @param other the other Completable instance
 @return the new Completable instance
 @throws NullPointerException if other is null
 */
- (RxCompletable *)mergeWithWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a Completable that never calls onError or onComplete.
 @return the singleton instance that never calls onError or onComplete
 */
+ (RxCompletable *)never;

/*!
 @brief Returns a Completable which emits the terminal events from the thread of the specified scheduler.
 @param scheduler the scheduler to emit terminal events on
 @return the new Completable instance
 @throws NullPointerException if scheduler is null
 */
- (RxCompletable *)observeOnWithRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Completable instance that if this Completable emits an error, it will emit an onComplete
 and swallow the throwable.
 @return the new Completable instance
 */
- (RxCompletable *)onErrorComplete;

/*!
 @brief Returns a Completable instance that if this Completable emits an error and the predicate returns
 true, it will emit an onComplete and swallow the throwable.
 @param predicate the predicate to call when an Throwable is emitted which should return true
 if the Throwable should be swallowed and replaced with an onComplete.
 @return the new Completable instance
 */
- (RxCompletable *)onErrorCompleteWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)predicate;

/*!
 @brief Returns a Completable instance that when encounters an error from this Completable, calls the
 specified mapper function that returns another Completable instance for it and resumes the
 execution with it.
 @param errorMapper the mapper function that takes the error and should return a Completable as
 continuation.
 @return the new Completable instance
 */
- (RxCompletable *)onErrorResumeNextWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)errorMapper;

/*!
 @brief Returns a Completable that repeatedly subscribes to this Completable until cancelled.
 @return the new Completable instance
 */
- (RxCompletable *)repeat;

/*!
 @brief Returns a Completable that subscribes repeatedly at most the given times to this Completable.
 @param times the number of times the resubscription should happen
 @return the new Completable instance
 @throws IllegalArgumentException if times is less than zero
 */
- (RxCompletable *)repeatWithLong:(jlong)times;

/*!
 @brief Returns a Completable instance that repeats when the Publisher returned by the handler
 emits an item or completes when this Publisher emits a completed event.
 @param handler the function that transforms the stream of values indicating the completion of
 this Completable and returns a Publisher that emits items for repeating or completes to indicate the
 repetition should stop
 @return the new Completable instance
 @throws NullPointerException if stop is null
 */
- (RxCompletable *)repeatWhenWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)handler;

/*!
 @brief Returns a Completable that retries this Completable as long as it emits an onError event.
 @return the new Completable instance
 */
- (RxCompletable *)retry;

/*!
 @brief Returns a Completable that retries this Completable in case of an error as long as the predicate
 returns true.
 @param predicate the predicate called when this emits an error with the repeat count and the latest exception
 and should return true to retry.
 @return the new Completable instance
 */
- (RxCompletable *)retryWithRxFunctionsFunc2:(id<RxFunctionsFunc2>)predicate;

/*!
 @brief Returns a Completable that when this Completable emits an error, retries at most the given
 number of times before giving up and emitting the last error.
 @param times the number of times the returned Completable should retry this Completable
 @return the new Completable instance
 @throws IllegalArgumentException if times is negative
 */
- (RxCompletable *)retryWithLong:(jlong)times;

/*!
 @brief Returns a Completable which given a Publisher and when this Completable emits an error, delivers
 that error through an Observable and the Publisher should return a value indicating a retry in response
 or a terminal event indicating a termination.
 @param handler the handler that receives an Observable delivering Throwables and should return a Publisher that
 emits items to indicate retries or emits terminal events to indicate termination.
 @return the new Completable instance
 @throws NullPointerException if handler is null
 */
- (RxCompletable *)retryWhenWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)handler;

/*!
 @brief Returns a Completable which first runs the other Completable
 then this completable if the other completed normally.
 @param other the other completable to run first
 @return the new Completable instance
 @throws NullPointerException if other is null
 */
- (RxCompletable *)startWithWithRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns an Observable which first delivers the events
 of the other Observable then runs this Completable.
 @param other the other Observable to run first
 @return the new Observable instance
 @throws NullPointerException if other is null
 */
- (RxObservable *)startWithWithRxObservable:(RxObservable *)other;

/*!
 @brief Subscribes to this Completable and returns a Subscription which can be used to cancel
 the subscription.
 @return the Subscription that allows cancelling the subscription
 */
- (id<RxSubscription>)subscribe;

/*!
 @brief Subscribes to this Completable and calls the given Action0 when this Completable
 completes normally.
 <p>
 If this Completable emits an error, it is sent to ERROR_HANDLER.handleError and gets swallowed.
 @param onComplete the runnable called when this Completable completes normally
 @return the Subscription that allows cancelling the subscription
 */
- (id<RxSubscription>)subscribeWithRxFunctionsAction0:(id<RxFunctionsAction0>)onComplete;

/*!
 @brief Subscribes to this Completable and calls back either the onError or onComplete functions.
 @param onError the consumer that is called if this Completable emits an error
 @param onComplete the runnable that is called if the Completable completes normally
 @return the Subscription that can be used for cancelling the subscription asynchronously
 @throws NullPointerException if either callback is null
 */
- (id<RxSubscription>)subscribeWithRxFunctionsAction1:(id<RxFunctionsAction1>)onError
                               withRxFunctionsAction0:(id<RxFunctionsAction0>)onComplete;

/*!
 @brief Subscribes the given CompletableSubscriber to this Completable instance
 and handles exceptions thrown by its onXXX methods.
 @param s the CompletableSubscriber, not null
 @throws NullPointerException if s is null
 */
- (void)subscribeWithRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)s;

/*!
 @brief Subscribes a regular Subscriber to this Completable instance which
 will receive only an onError or onComplete event
 and handles exceptions thrown by its onXXX methods.
 @param s the reactive-streams Subscriber, not null
 @throws NullPointerException if s is null
 */
- (void)subscribeWithRxSubscriber:(RxSubscriber *)s;

/*!
 @brief Returns a Completable which subscribes the child subscriber on the specified scheduler, making
 sure the subscription side-effects happen on that specific thread of the scheduler.
 @param scheduler the Scheduler to subscribe on
 @return the new Completable instance
 @throws NullPointerException if scheduler is null
 */
- (RxCompletable *)subscribeOnWithRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Completable that runs this Completable and emits a TimeoutException in case
 this Completable doesn't complete within the given time.
 @param timeout the timeout value
 @param unit the timeout unit
 @return the new Completable instance
 @throws NullPointerException if unit is null
 */
- (RxCompletable *)timeoutWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns a Completable that runs this Completable and switches to the other Completable
 in case this Completable doesn't complete within the given time.
 @param timeout the timeout value
 @param unit the timeout unit
 @param other the other Completable instance to switch to in case of a timeout
 @return the new Completable instance
 @throws NullPointerException if unit or other is null
 */
- (RxCompletable *)timeoutWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a Completable that runs this Completable and emits a TimeoutException in case
 this Completable doesn't complete within the given time while "waiting" on the specified
 Scheduler.
 @param timeout the timeout value
 @param unit the timeout unit
 @param scheduler the scheduler to use to wait for completion
 @return the new Completable instance
 @throws NullPointerException if unit or scheduler is null
 */
- (RxCompletable *)timeoutWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Completable that runs this Completable and switches to the other Completable
 in case this Completable doesn't complete within the given time while "waiting" on
 the specified scheduler.
 @param timeout the timeout value
 @param unit the timeout unit
 @param scheduler the scheduler to use to wait for completion
 @param other the other Completable instance to switch to in case of a timeout
 @return the new Completable instance
 @throws NullPointerException if unit, scheduler or other is null
 */
- (RxCompletable *)timeoutWithLong:(jlong)timeout
    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                   withRxScheduler:(RxScheduler *)scheduler
                 withRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a Completable that runs this Completable and optionally switches to the other Completable
 in case this Completable doesn't complete within the given time while "waiting" on
 the specified scheduler.
 @param timeout the timeout value
 @param unit the timeout unit
 @param scheduler the scheduler to use to wait for completion
 @param other the other Completable instance to switch to in case of a timeout, 
 if null a TimeoutException is emitted instead
 @return the new Completable instance
 @throws NullPointerException if unit or scheduler
 */
- (RxCompletable *)timeout0WithLong:(jlong)timeout
     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                    withRxScheduler:(RxScheduler *)scheduler
                  withRxCompletable:(RxCompletable *)other;

/*!
 @brief Returns a Completable instance that fires its onComplete event after the given delay elapsed.
 @param delay the delay time
 @param unit the delay unit
 @return the new Completable instance
 */
+ (RxCompletable *)timerWithLong:(jlong)delay
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns a Completable instance that fires its onComplete event after the given delay elapsed
 by using the supplied scheduler.
 @param delay the delay time
 @param unit the delay unit
 @return the new Completable instance
 */
+ (RxCompletable *)timerWithLong:(jlong)delay
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                 withRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Allows fluent conversion to another type via a function callback.
 @param converter the function called with this which should return some other value.
 @return the converted value
 @throws NullPointerException if converter is null
 */
- (id)toWithRxFunctionsFunc1:(id<RxFunctionsFunc1>)converter;

/*!
 @brief Returns an Observable which when subscribed to subscribes to this Completable and
 relays the terminal events to the subscriber.
 @return the new Observable created
 */
- (RxObservable *)toObservable;

/*!
 @brief Converts this Completable into a Single which when this Completable completes normally,
 calls the given supplier and emits its returned value through onSuccess.
 @param completionValueFunc0 the value supplier called when this Completable completes normally
 @return the new Single instance
 @throws NullPointerException if completionValueFunc0 is null
 */
- (RxSingle *)toSingleWithRxFunctionsFunc0:(id<RxFunctionsFunc0>)completionValueFunc0;

/*!
 @brief Converts this Completable into a Single which when this Completable completes normally,
 emits the given value through onSuccess.
 @param completionValue the value to emit when this Completable completes normally
 @return the new Single instance
 @throws NullPointerException if completionValue is null
 */
- (RxSingle *)toSingleDefaultWithId:(id)completionValue;

/*!
 @brief Subscribes the given CompletableSubscriber to this Completable instance.
 @param s the CompletableSubscriber, not null
 @throws NullPointerException if s is null
 */
- (void)unsafeSubscribeWithRxCompletable_CompletableSubscriber:(id<RxCompletable_CompletableSubscriber>)s;

/*!
 @brief Subscribes a regular Subscriber to this Completable instance which
 will receive only an onError or onComplete event.
 @param s the reactive-streams Subscriber, not null
 @throws NullPointerException if s is null
 */
- (void)unsafeSubscribeWithRxSubscriber:(RxSubscriber *)s;

/*!
 @brief Returns a Completable which makes sure when a subscriber cancels the subscription, the 
 dispose is called on the specified scheduler
 @param scheduler the target scheduler where to execute the cancellation
 @return the new Completable instance
 @throws NullPointerException if scheduler is null
 */
- (RxCompletable *)unsubscribeOnWithRxScheduler:(RxScheduler *)scheduler;

/*!
 @brief Returns a Completable instance which manages a resource along 
 with a custom Completable instance while the subscription is active.
 <p>
 This overload performs an eager unsubscription before the terminal event is emitted.
 @param resourceFunc0 the supplier that returns a resource to be managed.
 @param completableFunc1 the function that given a resource returns a Completable instance that will be subscribed to
 @param disposer the consumer that disposes the resource created by the resource supplier
 @return the new Completable instance
 */
+ (RxCompletable *)using__WithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFunc0
                          withRxFunctionsFunc1:(id<RxFunctionsFunc1>)completableFunc1
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)disposer;

/*!
 @brief Returns a Completable instance which manages a resource along 
 with a custom Completable instance while the subscription is active and performs eager or lazy
 resource disposition.
 <p>
 If this overload performs a lazy unsubscription after the terminal event is emitted.
 Exceptions thrown at this time will be delivered to RxJavaPlugins only.
 @param resourceFunc0 the supplier that returns a resource to be managed
 @param completableFunc1 the function that given a resource returns a non-null
 Completable instance that will be subscribed to
 @param disposer the consumer that disposes the resource created by the resource supplier
 @param eager if true, the resource is disposed before the terminal event is emitted, if false, the
 resource is disposed after the terminal event has been emitted
 @return the new Completable instance
 */
+ (RxCompletable *)using__WithRxFunctionsFunc0:(id<RxFunctionsFunc0>)resourceFunc0
                          withRxFunctionsFunc1:(id<RxFunctionsFunc1>)completableFunc1
                        withRxFunctionsAction1:(id<RxFunctionsAction1>)disposer
                                   withBoolean:(jboolean)eager;

#pragma mark Protected

/*!
 @brief Constructs a Completable instance with the given onSubscribe callback.
 @param onSubscribe the callback that will receive CompletableSubscribers when they subscribe,
 not null (not verified)
 */
- (instancetype)initWithRxCompletable_CompletableOnSubscribe:(id<RxCompletable_CompletableOnSubscribe>)onSubscribe;

/*!
 @brief Returns a Completable instance that calls the various callbacks on the specific
 lifecycle events.
 @param onSubscribe the consumer called when a CompletableSubscriber subscribes.
 @param onError the consumer called when this emits an onError event
 @param onComplete the runnable called just before when this Completable completes normally
 @param onAfterComplete the runnable called after this Completable completes normally
 @param onUnsubscribe the runnable called when the child cancels the subscription
 @return the new Completable instance
 */
- (RxCompletable *)doOnLifecycleWithRxFunctionsAction1:(id<RxFunctionsAction1>)onSubscribe
                                withRxFunctionsAction1:(id<RxFunctionsAction1>)onError
                                withRxFunctionsAction0:(id<RxFunctionsAction0>)onComplete
                                withRxFunctionsAction0:(id<RxFunctionsAction0>)onAfterComplete
                                withRxFunctionsAction0:(id<RxFunctionsAction0>)onUnsubscribe;

/*!
 @brief Returns a Completable instance that keeps subscriptions to a limited number of sources at once and
 completes only when all source Completables terminate in one way or another, combining any exceptions
 thrown by either the sources Observable or the inner Completable instances.
 @param sources the iterable sequence of sources.
 @param maxConcurrency the maximum number of concurrent subscriptions
 @param delayErrors delay all errors from the main source and from the inner Completables?
 @return the new Completable instance
 @throws NullPointerException if sources is null
 @throws IllegalArgumentException if maxConcurrency is less than 1
 */
+ (RxCompletable *)merge0WithRxObservable:(RxObservable *)sources
                                  withInt:(jint)maxConcurrency
                              withBoolean:(jboolean)delayErrors;

#pragma mark Package-Private

/*!
 @brief Java 7 backport: throws a NullPointerException if o is null.
 @param o the object to check
 @return the o value
 @throws NullPointerException if o is null
 */
+ (id)requireNonNullWithId:(id)o;

/*!
 @brief Creates a NullPointerException instance and sets the given Throwable as its initial cause.
 @param ex the Throwable instance to use as cause, not null (not verified)
 @return the created NullPointerException
 */
+ (JavaLangNullPointerException *)toNpeWithNSException:(NSException *)ex;

@end

J2OBJC_STATIC_INIT(RxCompletable)

/*!
 @brief The error handler instance.
 */
inline RxPluginsRxJavaErrorHandler *RxCompletable_get_ERROR_HANDLER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxPluginsRxJavaErrorHandler *RxCompletable_ERROR_HANDLER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxCompletable, ERROR_HANDLER, RxPluginsRxJavaErrorHandler *)

/*!
 @brief The completable hook.
 */
inline RxPluginsRxJavaCompletableExecutionHook *RxCompletable_get_HOOK();
inline RxPluginsRxJavaCompletableExecutionHook *RxCompletable_set_HOOK(RxPluginsRxJavaCompletableExecutionHook *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxPluginsRxJavaCompletableExecutionHook *RxCompletable_HOOK;
J2OBJC_STATIC_FIELD_OBJ(RxCompletable, HOOK, RxPluginsRxJavaCompletableExecutionHook *)

/*!
 @brief Single instance of a complete Completable.
 */
inline RxCompletable *RxCompletable_get_COMPLETE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxCompletable *RxCompletable_COMPLETE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxCompletable, COMPLETE, RxCompletable *)

/*!
 @brief Single instance of a never Completable.
 */
inline RxCompletable *RxCompletable_get_NEVER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT RxCompletable *RxCompletable_NEVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RxCompletable, NEVER, RxCompletable *)

FOUNDATION_EXPORT RxCompletable *RxCompletable_ambWithRxCompletableArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_ambWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_complete();

FOUNDATION_EXPORT RxCompletable *RxCompletable_concatWithRxCompletableArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_concatWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_concatWithRxObservable_(RxObservable *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_concatWithRxObservable_withInt_(RxObservable *sources, jint prefetch);

FOUNDATION_EXPORT RxCompletable *RxCompletable_createWithRxCompletable_CompletableOnSubscribe_(id<RxCompletable_CompletableOnSubscribe> onSubscribe);

FOUNDATION_EXPORT RxCompletable *RxCompletable_deferWithRxFunctionsFunc0_(id<RxFunctionsFunc0> completableFunc0);

FOUNDATION_EXPORT RxCompletable *RxCompletable_errorWithRxFunctionsFunc0_(id<RxFunctionsFunc0> errorFunc0);

FOUNDATION_EXPORT RxCompletable *RxCompletable_errorWithNSException_(NSException *error);

FOUNDATION_EXPORT RxCompletable *RxCompletable_fromActionWithRxFunctionsAction0_(id<RxFunctionsAction0> action);

FOUNDATION_EXPORT RxCompletable *RxCompletable_fromCallableWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> callable);

FOUNDATION_EXPORT RxCompletable *RxCompletable_fromFutureWithJavaUtilConcurrentFuture_(id<JavaUtilConcurrentFuture> future);

FOUNDATION_EXPORT RxCompletable *RxCompletable_fromObservableWithRxObservable_(RxObservable *flowable);

FOUNDATION_EXPORT RxCompletable *RxCompletable_fromSingleWithRxSingle_(RxSingle *single);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeWithRxCompletableArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeWithRxObservable_(RxObservable *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeWithRxObservable_withInt_(RxObservable *sources, jint maxConcurrency);

FOUNDATION_EXPORT RxCompletable *RxCompletable_merge0WithRxObservable_withInt_withBoolean_(RxObservable *sources, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeDelayErrorWithRxCompletableArray_(IOSObjectArray *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeDelayErrorWithJavaLangIterable_(id<JavaLangIterable> sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeDelayErrorWithRxObservable_(RxObservable *sources);

FOUNDATION_EXPORT RxCompletable *RxCompletable_mergeDelayErrorWithRxObservable_withInt_(RxObservable *sources, jint maxConcurrency);

FOUNDATION_EXPORT RxCompletable *RxCompletable_never();

FOUNDATION_EXPORT id RxCompletable_requireNonNullWithId_(id o);

FOUNDATION_EXPORT RxCompletable *RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit);

FOUNDATION_EXPORT RxCompletable *RxCompletable_timerWithLong_withJavaUtilConcurrentTimeUnit_withRxScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, RxScheduler *scheduler);

FOUNDATION_EXPORT JavaLangNullPointerException *RxCompletable_toNpeWithNSException_(NSException *ex);

FOUNDATION_EXPORT RxCompletable *RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_(id<RxFunctionsFunc0> resourceFunc0, id<RxFunctionsFunc1> completableFunc1, id<RxFunctionsAction1> disposer);

FOUNDATION_EXPORT RxCompletable *RxCompletable_using__WithRxFunctionsFunc0_withRxFunctionsFunc1_withRxFunctionsAction1_withBoolean_(id<RxFunctionsFunc0> resourceFunc0, id<RxFunctionsFunc1> completableFunc1, id<RxFunctionsAction1> disposer, jboolean eager);

FOUNDATION_EXPORT void RxCompletable_initWithRxCompletable_CompletableOnSubscribe_(RxCompletable *self, id<RxCompletable_CompletableOnSubscribe> onSubscribe);

FOUNDATION_EXPORT RxCompletable *new_RxCompletable_initWithRxCompletable_CompletableOnSubscribe_(id<RxCompletable_CompletableOnSubscribe> onSubscribe) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RxCompletable *create_RxCompletable_initWithRxCompletable_CompletableOnSubscribe_(id<RxCompletable_CompletableOnSubscribe> onSubscribe);

J2OBJC_TYPE_LITERAL_HEADER(RxCompletable)

#endif

#if !defined (RxCompletable_CompletableOnSubscribe_) && (INCLUDE_ALL_RxCompletable || defined(INCLUDE_RxCompletable_CompletableOnSubscribe))
#define RxCompletable_CompletableOnSubscribe_

#define RESTRICT_RxFunctionsAction1 1
#define INCLUDE_RxFunctionsAction1 1
#include "rx/functions/Action1.h"

/*!
 @brief Callback used for building deferred computations that takes a CompletableSubscriber.
 */
@protocol RxCompletable_CompletableOnSubscribe < RxFunctionsAction1, JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletable_CompletableOnSubscribe)

J2OBJC_TYPE_LITERAL_HEADER(RxCompletable_CompletableOnSubscribe)

#endif

#if !defined (RxCompletable_CompletableOperator_) && (INCLUDE_ALL_RxCompletable || defined(INCLUDE_RxCompletable_CompletableOperator))
#define RxCompletable_CompletableOperator_

#define RESTRICT_RxFunctionsFunc1 1
#define INCLUDE_RxFunctionsFunc1 1
#include "rx/functions/Func1.h"

@protocol RxCompletable_CompletableSubscriber;

/*!
 @brief Convenience interface and callback used by the lift operator that given a child CompletableSubscriber,
 return a parent CompletableSubscriber that does any kind of lifecycle-related transformations.
 */
@protocol RxCompletable_CompletableOperator < RxFunctionsFunc1, JavaObject >

- (id<RxCompletable_CompletableSubscriber>)callWithId:(id<RxCompletable_CompletableSubscriber>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletable_CompletableOperator)

J2OBJC_TYPE_LITERAL_HEADER(RxCompletable_CompletableOperator)

#endif

#if !defined (RxCompletable_CompletableSubscriber_) && (INCLUDE_ALL_RxCompletable || defined(INCLUDE_RxCompletable_CompletableSubscriber))
#define RxCompletable_CompletableSubscriber_

@protocol RxSubscription;

/*!
 @brief Represents the subscription API callbacks when subscribing to a Completable instance.
 */
@protocol RxCompletable_CompletableSubscriber < JavaObject >

/*!
 @brief Called once the deferred computation completes normally.
 */
- (void)onCompleted;

/*!
 @brief Called once if the deferred computation 'throws' an exception.
 @param e the exception, not null.
 */
- (void)onErrorWithNSException:(NSException *)e;

/*!
 @brief Called once by the Completable to set a Subscription on this instance which
 then can be used to cancel the subscription at any time.
 @param d the Subscription instance to call dispose on for cancellation, not null
 */
- (void)onSubscribeWithRxSubscription:(id<RxSubscription>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletable_CompletableSubscriber)

J2OBJC_TYPE_LITERAL_HEADER(RxCompletable_CompletableSubscriber)

#endif

#if !defined (RxCompletable_CompletableTransformer_) && (INCLUDE_ALL_RxCompletable || defined(INCLUDE_RxCompletable_CompletableTransformer))
#define RxCompletable_CompletableTransformer_

#define RESTRICT_RxFunctionsFunc1 1
#define INCLUDE_RxFunctionsFunc1 1
#include "rx/functions/Func1.h"

@class RxCompletable;

/*!
 @brief Convenience interface and callback used by the compose operator to turn a Completable into another
 Completable fluently.
 */
@protocol RxCompletable_CompletableTransformer < RxFunctionsFunc1, JavaObject >

- (RxCompletable *)callWithId:(RxCompletable *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(RxCompletable_CompletableTransformer)

J2OBJC_TYPE_LITERAL_HEADER(RxCompletable_CompletableTransformer)

#endif

#pragma pop_macro("INCLUDE_ALL_RxCompletable")
