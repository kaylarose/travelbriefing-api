//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Subscriber.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxSubscriber")
#ifdef RESTRICT_RxSubscriber
#define INCLUDE_ALL_RxSubscriber 0
#else
#define INCLUDE_ALL_RxSubscriber 1
#endif
#undef RESTRICT_RxSubscriber

#if !defined (RxSubscriber_) && (INCLUDE_ALL_RxSubscriber || defined(INCLUDE_RxSubscriber))
#define RxSubscriber_

#define RESTRICT_RxObserver 1
#define INCLUDE_RxObserver 1
#include "rx/Observer.h"

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@protocol RxProducer;

/*!
 @brief Provides a mechanism for receiving push-based notifications from Observables, and permits manual
 unsubscribing from these Observables.
 <p>
 After a Subscriber calls an <code>Observable</code>'s <code>subscribe</code> method, the
 <code>Observable</code> calls the Subscriber's <code>onNext</code> method to emit items. A well-behaved
 <code>Observable</code> will call a Subscriber's <code>onCompleted</code> method exactly once or the Subscriber's
 <code>onError</code> method exactly once.
 - seealso: <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation: Observable</a>
 */
@interface RxSubscriber : NSObject < RxObserver, RxSubscription >

#pragma mark Public

/*!
 @brief Adds a <code>Subscription</code> to this Subscriber's list of subscriptions if this list is not marked as
 unsubscribed.
 If the list <em>is</em> marked as unsubscribed, <code>add</code> will indicate this by
 explicitly unsubscribing the new <code>Subscription</code> as well.
 @param s
 the <code>Subscription</code> to add
 */
- (void)addWithRxSubscription:(id<RxSubscription>)s;

/*!
 @brief Indicates whether this Subscriber has unsubscribed from its list of subscriptions.
 @return <code>true</code> if this Subscriber has unsubscribed from its subscriptions, <code>false</code> otherwise
 */
- (jboolean)isUnsubscribed;

/*!
 @brief This method is invoked when the Subscriber and Observable have been connected but the Observable has
 not yet begun to emit items or send notifications to the Subscriber.
 Override this method to add any
 useful initialization to your subscription, for instance to initiate backpressure.
 */
- (void)onStart;

/*!
 @brief If other subscriber is set (by calling constructor
 <code>Subscriber(Subscriber)</code> or
 <code>Subscriber(Subscriber,boolean)</code>) then this method calls
 <code>setProducer</code> on the other subscriber.
 If the other subscriber
 is not set and no requests have been made to this subscriber then
 <code>p.request(Long.MAX_VALUE)</code> is called. If the other subscriber
 is not set and some requests have been made to this subscriber then
 <code>p.request(n)</code> is called where n is the accumulated requests
 to this subscriber.
 @param p
 producer to be used by this subscriber or the other subscriber
 (or recursively its other subscriber) to make requests from
 */
- (void)setProducerWithRxProducer:(id<RxProducer>)p;

- (void)unsubscribe;

#pragma mark Protected

- (instancetype)init;

/*!
 @brief Construct a Subscriber by using another Subscriber for backpressure and
 for holding the subscription list (when <code>this.add(sub)</code> is
 called this will in fact call <code>subscriber.add(sub)</code>).
 @param subscriber
 the other Subscriber
 */
- (instancetype)initWithRxSubscriber:(RxSubscriber *)subscriber;

/*!
 @brief Construct a Subscriber by using another Subscriber for backpressure and
 optionally for holding the subscription list (if
 <code>shareSubscriptions</code> is <code>true</code> then when
 <code>this.add(sub)</code> is called this will in fact call
 <code>subscriber.add(sub)</code>).
 <p>
 To retain the chaining of subscribers when setting
 <code>shareSubscriptions</code> to <code>false</code>, add the created
 instance to <code>subscriber</code> via <code>add</code>.
 @param subscriber
 the other Subscriber
 @param shareSubscriptions
 <code>true</code> to share the subscription list in <code>subscriber</code> with
 this instance
 @since 1.0.6
 */
- (instancetype)initWithRxSubscriber:(RxSubscriber *)subscriber
                         withBoolean:(jboolean)shareSubscriptions;

/*!
 @brief Request a certain maximum number of emitted items from the Observable this Subscriber is subscribed to.
 This is a way of requesting backpressure. To disable backpressure, pass <code>Long.MAX_VALUE</code> to this
 method.
 <p>
 Requests are additive but if a sequence of requests totals more than <code>Long.MAX_VALUE</code> then 
 <code>Long.MAX_VALUE</code> requests will be actioned and the extras <i>may</i> be ignored. Arriving at 
 <code>Long.MAX_VALUE</code> by addition of requests cannot be assumed to disable backpressure. For example, 
 the code below may result in <code>Long.MAX_VALUE</code> requests being actioned only.
 @code

  request(100);
  request(Long.MAX_VALUE-1);
  
@endcode
 @param n the maximum number of items you want the Observable to emit to the Subscriber at this time, or
 <code>Long.MAX_VALUE</code> if you want the Observable to emit items at its own pace
 @throws IllegalArgumentException
 if <code>n</code> is negative
 */
- (void)requestWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(RxSubscriber)

FOUNDATION_EXPORT void RxSubscriber_init(RxSubscriber *self);

FOUNDATION_EXPORT void RxSubscriber_initWithRxSubscriber_(RxSubscriber *self, RxSubscriber *subscriber);

FOUNDATION_EXPORT void RxSubscriber_initWithRxSubscriber_withBoolean_(RxSubscriber *self, RxSubscriber *subscriber, jboolean shareSubscriptions);

J2OBJC_TYPE_LITERAL_HEADER(RxSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_RxSubscriber")
