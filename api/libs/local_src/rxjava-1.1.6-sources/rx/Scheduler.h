//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/rxjava-1.1.6-sources/rx/Scheduler.java
//

/*!
 @brief Copyright 2014 Netflix, Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RxScheduler")
#ifdef RESTRICT_RxScheduler
#define INCLUDE_ALL_RxScheduler 0
#else
#define INCLUDE_ALL_RxScheduler 1
#endif
#undef RESTRICT_RxScheduler

#if !defined (RxScheduler_) && (INCLUDE_ALL_RxScheduler || defined(INCLUDE_RxScheduler))
#define RxScheduler_

@class RxScheduler_Worker;

/*!
 @brief A <code>Scheduler</code> is an object that schedules units of work.
 You can find common implementations of this
 class in <code>Schedulers</code>.
 */
@interface RxScheduler : NSObject

+ (jlong)CLOCK_DRIFT_TOLERANCE_NANOS;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Retrieves or creates a new <code>Scheduler.Worker</code> that represents serial execution of actions.
 <p>
 When work is completed it should be unsubscribed using <code>Scheduler.Worker.unsubscribe()</code>.
 <p>
 Work on a <code>Scheduler.Worker</code> is guaranteed to be sequential.
 @return a Worker representing a serial queue of actions to be executed
 */
- (RxScheduler_Worker *)createWorker;

/*!
 @brief Gets the current time, in milliseconds, according to this Scheduler.
 @return the scheduler's notion of current absolute time in milliseconds
 */
- (jlong)now;

@end

J2OBJC_STATIC_INIT(RxScheduler)

/*!
 @brief The tolerance for a clock drift in nanoseconds where the periodic scheduler will rebase.
 <p>
 The associated system parameter, <code>rx.scheduler.drift-tolerance</code>, expects its value in minutes.
 */
inline jlong RxScheduler_get_CLOCK_DRIFT_TOLERANCE_NANOS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong RxScheduler_CLOCK_DRIFT_TOLERANCE_NANOS;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(RxScheduler, CLOCK_DRIFT_TOLERANCE_NANOS, jlong)

FOUNDATION_EXPORT void RxScheduler_init(RxScheduler *self);

J2OBJC_TYPE_LITERAL_HEADER(RxScheduler)

#endif

#if !defined (RxScheduler_Worker_) && (INCLUDE_ALL_RxScheduler || defined(INCLUDE_RxScheduler_Worker))
#define RxScheduler_Worker_

#define RESTRICT_RxSubscription 1
#define INCLUDE_RxSubscription 1
#include "rx/Subscription.h"

@class JavaUtilConcurrentTimeUnit;
@protocol RxFunctionsAction0;

/*!
 @brief Sequential Scheduler for executing actions on a single thread or event loop.
 <p>
 Unsubscribing the <code>Worker</code> unschedules all outstanding work and allows resources cleanup.
 */
@interface RxScheduler_Worker : NSObject < RxSubscription >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Gets the current time, in milliseconds, according to this Scheduler.
 @return the scheduler's notion of current absolute time in milliseconds
 */
- (jlong)now;

/*!
 @brief Schedules an Action for execution.
 @param action
 Action to schedule
 @return a subscription to be able to unsubscribe the action (unschedule it if not executed)
 */
- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action;

/*!
 @brief Schedules an Action for execution at some point in the future.
 <p>
 Note to implementors: non-positive <code>delayTime</code> should be regarded as undelayed schedule, i.e.,
 as if the <code>schedule(rx.functions.Action0)</code> was called.
 @param action
 the Action to schedule
 @param delayTime
 time to wait before executing the action; non-positive values indicate an undelayed
 schedule
 @param unit
 the time unit of <code>delayTime</code>
 @return a subscription to be able to unsubscribe the action (unschedule it if not executed)
 */
- (id<RxSubscription>)scheduleWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                            withLong:(jlong)delayTime
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Schedules a cancelable action to be executed periodically.
 This default implementation schedules
 recursively and waits for actions to complete (instead of potentially executing long-running actions
 concurrently). Each scheduler that can do periodic scheduling in a better way should override this.
 <p>
 Note to implementors: non-positive <code>initialTime</code> and <code>period</code> should be regarded as
 undelayed scheduling of the first and any subsequent executions.
 @param action
 the Action to execute periodically
 @param initialDelay
 time to wait before executing the action for the first time; non-positive values indicate
 an undelayed schedule
 @param period
 the time interval to wait each time in between executing the action; non-positive values
 indicate no delay between repeated schedules
 @param unit
 the time unit of <code>period</code>
 @return a subscription to be able to unsubscribe the action (unschedule it if not executed)
 */
- (id<RxSubscription>)schedulePeriodicallyWithRxFunctionsAction0:(id<RxFunctionsAction0>)action
                                                        withLong:(jlong)initialDelay
                                                        withLong:(jlong)period
                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(RxScheduler_Worker)

FOUNDATION_EXPORT void RxScheduler_Worker_init(RxScheduler_Worker *self);

J2OBJC_TYPE_LITERAL_HEADER(RxScheduler_Worker)

#endif

#pragma pop_macro("INCLUDE_ALL_RxScheduler")
