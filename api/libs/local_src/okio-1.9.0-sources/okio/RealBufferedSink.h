//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/RealBufferedSink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioRealBufferedSink")
#ifdef RESTRICT_OkioRealBufferedSink
#define INCLUDE_ALL_OkioRealBufferedSink 0
#else
#define INCLUDE_ALL_OkioRealBufferedSink 1
#endif
#undef RESTRICT_OkioRealBufferedSink

#if !defined (OkioRealBufferedSink_) && (INCLUDE_ALL_OkioRealBufferedSink || defined(INCLUDE_OkioRealBufferedSink))
#define OkioRealBufferedSink_

#define RESTRICT_OkioBufferedSink 1
#define INCLUDE_OkioBufferedSink 1
#include "okio/BufferedSink.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@class JavaNioCharsetCharset;
@class OkioBuffer;
@class OkioByteString;
@class OkioTimeout;
@protocol OkioSink;
@protocol OkioSource;

@interface OkioRealBufferedSink : NSObject < OkioBufferedSink > {
 @public
  OkioBuffer *buffer_;
  id<OkioSink> sink_;
  jboolean closed_;
}

#pragma mark Public

- (OkioBuffer *)buffer;

- (void)close;

- (id<OkioBufferedSink>)emit;

- (id<OkioBufferedSink>)emitCompleteSegments;

- (void)flush;

- (JavaIoOutputStream *)outputStream;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (id<OkioBufferedSink>)writeWithByteArray:(IOSByteArray *)source;

- (id<OkioBufferedSink>)writeWithByteArray:(IOSByteArray *)source
                                   withInt:(jint)offset
                                   withInt:(jint)byteCount;

- (id<OkioBufferedSink>)writeWithOkioByteString:(OkioByteString *)byteString;

- (id<OkioBufferedSink>)writeWithOkioSource:(id<OkioSource>)source
                                   withLong:(jlong)byteCount;

- (jlong)writeAllWithOkioSource:(id<OkioSource>)source;

- (id<OkioBufferedSink>)writeByteWithInt:(jint)b;

- (id<OkioBufferedSink>)writeDecimalLongWithLong:(jlong)v;

- (id<OkioBufferedSink>)writeHexadecimalUnsignedLongWithLong:(jlong)v;

- (id<OkioBufferedSink>)writeIntWithInt:(jint)i;

- (id<OkioBufferedSink>)writeIntLeWithInt:(jint)i;

- (id<OkioBufferedSink>)writeLongWithLong:(jlong)v;

- (id<OkioBufferedSink>)writeLongLeWithLong:(jlong)v;

- (id<OkioBufferedSink>)writeShortWithInt:(jint)s;

- (id<OkioBufferedSink>)writeShortLeWithInt:(jint)s;

- (id<OkioBufferedSink>)writeStringWithNSString:(NSString *)string
                      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (id<OkioBufferedSink>)writeStringWithNSString:(NSString *)string
                                        withInt:(jint)beginIndex
                                        withInt:(jint)endIndex
                      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (id<OkioBufferedSink>)writeUtf8WithNSString:(NSString *)string;

- (id<OkioBufferedSink>)writeUtf8WithNSString:(NSString *)string
                                      withInt:(jint)beginIndex
                                      withInt:(jint)endIndex;

- (id<OkioBufferedSink>)writeUtf8CodePointWithInt:(jint)codePoint;

#pragma mark Package-Private

- (instancetype)initWithOkioSink:(id<OkioSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioRealBufferedSink)

J2OBJC_FIELD_SETTER(OkioRealBufferedSink, buffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(OkioRealBufferedSink, sink_, id<OkioSink>)

FOUNDATION_EXPORT void OkioRealBufferedSink_initWithOkioSink_(OkioRealBufferedSink *self, id<OkioSink> sink);

FOUNDATION_EXPORT OkioRealBufferedSink *new_OkioRealBufferedSink_initWithOkioSink_(id<OkioSink> sink) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioRealBufferedSink *create_OkioRealBufferedSink_initWithOkioSink_(id<OkioSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(OkioRealBufferedSink)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioRealBufferedSink")
