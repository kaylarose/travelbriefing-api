//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/AsyncTimeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioAsyncTimeout")
#ifdef RESTRICT_OkioAsyncTimeout
#define INCLUDE_ALL_OkioAsyncTimeout 0
#else
#define INCLUDE_ALL_OkioAsyncTimeout 1
#endif
#undef RESTRICT_OkioAsyncTimeout

#if !defined (OkioAsyncTimeout_) && (INCLUDE_ALL_OkioAsyncTimeout || defined(INCLUDE_OkioAsyncTimeout))
#define OkioAsyncTimeout_

#define RESTRICT_OkioTimeout 1
#define INCLUDE_OkioTimeout 1
#include "okio/Timeout.h"

@class JavaIoIOException;
@protocol OkioSink;
@protocol OkioSource;

/*!
 @brief This timeout uses a background thread to take action exactly when the timeout
 occurs.
 Use this to implement timeouts where they aren't supported natively,
 such as to sockets that are blocked on writing.
 <p>Subclasses should override <code>timedOut</code> to take action when a timeout
 occurs. This method will be invoked by the shared watchdog thread so it
 should not do any long-running operations. Otherwise we risk starving other
 timeouts from being triggered.
 <p>Use <code>sink</code> and <code>source</code> to apply this timeout to a stream.
 The returned value will apply the timeout to each operation on the wrapped
 stream.
 <p>Callers should call <code>enter</code> before doing work that is subject to
 timeouts, and <code>exit</code> afterwards. The return value of <code>exit</code>
 indicates whether a timeout was triggered. Note that the call to <code>timedOut</code>
  is asynchronous, and may be called after <code>exit</code>.
 */
@interface OkioAsyncTimeout : OkioTimeout

#pragma mark Public

- (instancetype)init;

- (void)enter;

/*!
 @brief Returns true if the timeout occurred.
 */
- (jboolean)exit;

/*!
 @brief Returns a new sink that delegates to <code>sink</code>, using this to implement
 timeouts.
 This works best if <code>timedOut</code> is overridden to interrupt
 <code>sink</code>'s current operation.
 */
- (id<OkioSink>)sinkWithOkioSink:(id<OkioSink>)sink;

/*!
 @brief Returns a new source that delegates to <code>source</code>, using this to
 implement timeouts.
 This works best if <code>timedOut</code> is overridden to
 interrupt <code>sink</code>'s current operation.
 */
- (id<OkioSource>)sourceWithOkioSource:(id<OkioSource>)source;

#pragma mark Protected

/*!
 @brief Returns an <code>IOException</code> to represent a timeout.
 By default this method returns
 <code>java.io.InterruptedIOException</code>. If <code>cause</code> is non-null it is set as the cause of
 the returned exception.
 */
- (JavaIoIOException *)newTimeoutExceptionWithJavaIoIOException:(JavaIoIOException *)cause OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Invoked by the watchdog thread when the time between calls to <code>enter()</code>
  and <code>exit()</code> has exceeded the timeout.
 */
- (void)timedOut;

#pragma mark Package-Private

/*!
 @brief Removes and returns the node at the head of the list, waiting for it to
 time out if necessary.
 Returns null if the situation changes while waiting:
 either a newer node is inserted at the head, or the node being waited on
 has been removed.
 */
+ (OkioAsyncTimeout *)awaitTimeout;

/*!
 @brief Throws an IOException if <code>throwOnTimeout</code> is <code>true</code> and a
 timeout occurred.
 See <code>newTimeoutException(java.io.IOException)</code>
 for the type of exception thrown.
 */
- (void)exitWithBoolean:(jboolean)throwOnTimeout;

/*!
 @brief Returns either <code>cause</code> or an IOException that's caused by
 <code>cause</code> if a timeout occurred.
 See
 <code>newTimeoutException(java.io.IOException)</code> for the type of
 exception returned.
 */
- (JavaIoIOException *)exitWithJavaIoIOException:(JavaIoIOException *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioAsyncTimeout)

FOUNDATION_EXPORT OkioAsyncTimeout *OkioAsyncTimeout_awaitTimeout();

FOUNDATION_EXPORT void OkioAsyncTimeout_init(OkioAsyncTimeout *self);

FOUNDATION_EXPORT OkioAsyncTimeout *new_OkioAsyncTimeout_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioAsyncTimeout *create_OkioAsyncTimeout_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioAsyncTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioAsyncTimeout")
