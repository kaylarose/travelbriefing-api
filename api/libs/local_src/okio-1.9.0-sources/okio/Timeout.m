//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/Timeout.java
//

#include "J2ObjC_source.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/Timeout.h"

@interface OkioTimeout () {
 @public
  /*!
   @brief True if <code>deadlineNanoTime</code> is defined.
   There is no equivalent to null
 or 0 for <code>System.nanoTime</code>.
   */
  jboolean hasDeadline_;
  jlong deadlineNanoTime_;
  jlong timeoutNanos_;
}

@end

@interface OkioTimeout_$1 : OkioTimeout

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime;

- (void)throwIfReached;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioTimeout_$1)

__attribute__((unused)) static void OkioTimeout_$1_init(OkioTimeout_$1 *self);

__attribute__((unused)) static OkioTimeout_$1 *new_OkioTimeout_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioTimeout_$1 *create_OkioTimeout_$1_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioTimeout_$1)

J2OBJC_INITIALIZED_DEFN(OkioTimeout)

OkioTimeout *OkioTimeout_NONE;

@implementation OkioTimeout

+ (OkioTimeout *)NONE {
  return OkioTimeout_NONE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioTimeout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"timeout < 0: ", timeout));
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  self->timeoutNanos_ = [unit toNanosWithLong:timeout];
  return self;
}

- (jlong)timeoutNanos {
  return timeoutNanos_;
}

- (jboolean)hasDeadline {
  return hasDeadline_;
}

- (jlong)deadlineNanoTime {
  if (!hasDeadline_) @throw new_JavaLangIllegalStateException_initWithNSString_(@"No deadline");
  return deadlineNanoTime_;
}

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime {
  self->hasDeadline_ = true;
  self->deadlineNanoTime_ = deadlineNanoTime;
  return self;
}

- (OkioTimeout *)deadlineWithLong:(jlong)duration
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (duration <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"duration <= 0: ", duration));
  if (unit == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unit == null");
  return [self deadlineNanoTimeWithLong:JavaLangSystem_nanoTime() + [unit toNanosWithLong:duration]];
}

- (OkioTimeout *)clearTimeout {
  self->timeoutNanos_ = 0;
  return self;
}

- (OkioTimeout *)clearDeadline {
  self->hasDeadline_ = false;
  return self;
}

- (void)throwIfReached {
  if (JavaLangThread_interrupted()) {
    @throw new_JavaIoInterruptedIOException_initWithNSString_(@"thread interrupted");
  }
  if (hasDeadline_ && deadlineNanoTime_ - JavaLangSystem_nanoTime() <= 0) {
    @throw new_JavaIoInterruptedIOException_initWithNSString_(@"deadline reached");
  }
}

- (void)waitUntilNotifiedWithId:(id)monitor {
  @try {
    jboolean hasDeadline = [self hasDeadline];
    jlong timeoutNanos = [self timeoutNanos];
    if (!hasDeadline && timeoutNanos == 0LL) {
      [nil_chk(monitor) wait];
      return;
    }
    jlong waitNanos;
    jlong start = JavaLangSystem_nanoTime();
    if (hasDeadline && timeoutNanos != 0) {
      jlong deadlineNanos = [self deadlineNanoTime] - start;
      waitNanos = JavaLangMath_minWithLong_withLong_(timeoutNanos, deadlineNanos);
    }
    else if (hasDeadline) {
      waitNanos = [self deadlineNanoTime] - start;
    }
    else {
      waitNanos = timeoutNanos;
    }
    jlong elapsedNanos = 0LL;
    if (waitNanos > 0LL) {
      jlong waitMillis = waitNanos / 1000000LL;
      [nil_chk(monitor) waitWithLong:waitMillis withInt:(jint) (waitNanos - waitMillis * 1000000LL)];
      elapsedNanos = JavaLangSystem_nanoTime() - start;
    }
    if (elapsedNanos >= waitNanos) {
      @throw new_JavaIoInterruptedIOException_initWithNSString_(@"timeout");
    }
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_JavaIoInterruptedIOException_initWithNSString_(@"interrupted");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { "timeoutWithLong:withJavaUtilConcurrentTimeUnit:", "LOkioTimeout;", 0x1, 0, 1, -1, -1, -1, -1 },
    { "timeoutNanos", "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { "hasDeadline", "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { "deadlineNanoTime", "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { "deadlineNanoTimeWithLong:", "LOkioTimeout;", 0x1, 2, 3, -1, -1, -1, -1 },
    { "deadlineWithLong:withJavaUtilConcurrentTimeUnit:", "LOkioTimeout;", 0x11, 4, 1, -1, -1, -1, -1 },
    { "clearTimeout", "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "clearDeadline", "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "throwIfReached", "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { "waitUntilNotifiedWithId:", "V", 0x11, 6, 7, 8, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LOkioTimeout;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "hasDeadline_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deadlineNanoTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeoutNanos_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "timeout", "JLJavaUtilConcurrentTimeUnit;", "deadlineNanoTime", "J", "deadline", "LJavaIoIOException;", "waitUntilNotified", "LNSObject;", "LJavaIoInterruptedIOException;", &OkioTimeout_NONE };
  static const J2ObjcClassInfo _OkioTimeout = { "Timeout", "okio", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_OkioTimeout;
}

+ (void)initialize {
  if (self == [OkioTimeout class]) {
    OkioTimeout_NONE = new_OkioTimeout_$1_init();
    J2OBJC_SET_INITIALIZED(OkioTimeout)
  }
}

@end

void OkioTimeout_init(OkioTimeout *self) {
  NSObject_init(self);
}

OkioTimeout *new_OkioTimeout_init() {
  J2OBJC_NEW_IMPL(OkioTimeout, init)
}

OkioTimeout *create_OkioTimeout_init() {
  J2OBJC_CREATE_IMPL(OkioTimeout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioTimeout)

@implementation OkioTimeout_$1

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return self;
}

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime {
  return self;
}

- (void)throwIfReached {
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioTimeout_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "timeoutWithLong:withJavaUtilConcurrentTimeUnit:", "LOkioTimeout;", 0x1, 0, 1, -1, -1, -1, -1 },
    { "deadlineNanoTimeWithLong:", "LOkioTimeout;", 0x1, 2, 3, -1, -1, -1, -1 },
    { "throwIfReached", "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { "init", NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "timeout", "JLJavaUtilConcurrentTimeUnit;", "deadlineNanoTime", "J", "LJavaIoIOException;", "LOkioTimeout;" };
  static const J2ObjcClassInfo _OkioTimeout_$1 = { "", "okio", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 5, -1, -1, -1, -1 };
  return &_OkioTimeout_$1;
}

@end

void OkioTimeout_$1_init(OkioTimeout_$1 *self) {
  OkioTimeout_init(self);
}

OkioTimeout_$1 *new_OkioTimeout_$1_init() {
  J2OBJC_NEW_IMPL(OkioTimeout_$1, init)
}

OkioTimeout_$1 *create_OkioTimeout_$1_init() {
  J2OBJC_CREATE_IMPL(OkioTimeout_$1, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioTimeout_$1)
