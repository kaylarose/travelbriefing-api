//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/Segment.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioSegment")
#ifdef RESTRICT_OkioSegment
#define INCLUDE_ALL_OkioSegment 0
#else
#define INCLUDE_ALL_OkioSegment 1
#endif
#undef RESTRICT_OkioSegment

#if !defined (OkioSegment_) && (INCLUDE_ALL_OkioSegment || defined(INCLUDE_OkioSegment))
#define OkioSegment_

@class IOSByteArray;

/*!
 @brief A segment of a buffer.
 <p>Each segment in a buffer is a circularly-linked list node referencing the following and
 preceding segments in the buffer.
 <p>Each segment in the pool is a singly-linked list node referencing the rest of segments in the
 pool.
 <p>The underlying byte arrays of segments may be shared between buffers and byte strings. When a
 segment's byte array is shared the segment may not be recycled, nor may its byte data be changed.
 The lone exception is that the owner segment is allowed to append to the segment, writing data at
 <code>limit</code> and beyond. There is a single owning segment for each byte array. Positions,
 limits, prev, and next references are not shared.
 */
@interface OkioSegment : NSObject {
 @public
  IOSByteArray *data_;
  /*!
   @brief The next byte of application data byte to read in this segment.
   */
  jint pos_;
  /*!
   @brief The first byte of available data ready to be written to.
   */
  jint limit_;
  /*!
   @brief True if other segments or byte strings use the same byte array.
   */
  jboolean shared_;
  /*!
   @brief True if this segment owns the byte array and can append to it, extending <code>limit</code>.
   */
  jboolean owner_;
  /*!
   @brief Next segment in a linked or circularly-linked list.
   */
  OkioSegment *next_;
  /*!
   @brief Previous segment in a circularly-linked list.
   */
  OkioSegment *prev_;
}

+ (jint)SIZE;

+ (jint)SHARE_MINIMUM;

#pragma mark Public

/*!
 @brief Call this when the tail and its predecessor may both be less than half
 full.
 This will copy data so that segments can be recycled.
 */
- (void)compact;

/*!
 @brief Removes this segment of a circularly-linked list and returns its successor.
 Returns null if the list is now empty.
 */
- (OkioSegment *)pop;

/*!
 @brief Appends <code>segment</code> after this segment in the circularly-linked list.
 Returns the pushed segment.
 */
- (OkioSegment *)pushWithOkioSegment:(OkioSegment *)segment;

/*!
 @brief Splits this head of a circularly-linked list into two segments.
 The first
 segment contains the data in <code>[pos..pos+byteCount)</code>. The second
 segment contains the data in <code>[pos+byteCount..limit)</code>. This can be
 useful when moving partial segments from one buffer to another.
 <p>Returns the new head of the circularly-linked list.
 */
- (OkioSegment *)splitWithInt:(jint)byteCount;

/*!
 @brief Moves <code>byteCount</code> bytes from this segment to <code>sink</code>.
 */
- (void)writeToWithOkioSegment:(OkioSegment *)sink
                       withInt:(jint)byteCount;

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)pos
                          withInt:(jint)limit;

- (instancetype)initWithOkioSegment:(OkioSegment *)shareFrom;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioSegment)

J2OBJC_FIELD_SETTER(OkioSegment, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OkioSegment, next_, OkioSegment *)
J2OBJC_FIELD_SETTER(OkioSegment, prev_, OkioSegment *)

/*!
 @brief The size of all segments in bytes.
 */
inline jint OkioSegment_get_SIZE();
#define OkioSegment_SIZE 8192
J2OBJC_STATIC_FIELD_CONSTANT(OkioSegment, SIZE, jint)

/*!
 @brief Segments will be shared when doing so avoids <code>arraycopy()</code> of this many bytes.
 */
inline jint OkioSegment_get_SHARE_MINIMUM();
#define OkioSegment_SHARE_MINIMUM 1024
J2OBJC_STATIC_FIELD_CONSTANT(OkioSegment, SHARE_MINIMUM, jint)

FOUNDATION_EXPORT void OkioSegment_init(OkioSegment *self);

FOUNDATION_EXPORT OkioSegment *new_OkioSegment_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioSegment *create_OkioSegment_init();

FOUNDATION_EXPORT void OkioSegment_initWithOkioSegment_(OkioSegment *self, OkioSegment *shareFrom);

FOUNDATION_EXPORT OkioSegment *new_OkioSegment_initWithOkioSegment_(OkioSegment *shareFrom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioSegment *create_OkioSegment_initWithOkioSegment_(OkioSegment *shareFrom);

FOUNDATION_EXPORT void OkioSegment_initWithByteArray_withInt_withInt_(OkioSegment *self, IOSByteArray *data, jint pos, jint limit);

FOUNDATION_EXPORT OkioSegment *new_OkioSegment_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint pos, jint limit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioSegment *create_OkioSegment_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint pos, jint limit);

J2OBJC_TYPE_LITERAL_HEADER(OkioSegment)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioSegment")
