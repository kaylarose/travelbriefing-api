//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/ByteString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioByteString")
#ifdef RESTRICT_OkioByteString
#define INCLUDE_ALL_OkioByteString 0
#else
#define INCLUDE_ALL_OkioByteString 1
#endif
#undef RESTRICT_OkioByteString

#if !defined (OkioByteString_) && (INCLUDE_ALL_OkioByteString || defined(INCLUDE_OkioByteString))
#define OkioByteString_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaNioByteBuffer;
@class OkioBuffer;

/*!
 @brief An immutable sequence of bytes.
 <p>Byte strings compare lexicographically as a sequence of <strong>unsigned</strong> bytes. That
 is, the byte string <code>ff</code> sorts after <code>00</code>. This is counter to the sort order of the
 corresponding bytes, where <code>-1</code> sorts before <code>0</code>.
 <p><strong>Full disclosure:</strong> this class provides untrusted input and output streams with
 raw access to the underlying byte array. A hostile stream implementation could keep a reference
 to the mutable byte string, violating the immutable guarantee of this class. For this reason a
 byte string's immutability guarantee cannot be relied upon for security in applets and other
 environments that run both trusted and untrusted code in the same process.
 */
@interface OkioByteString : NSObject < JavaIoSerializable, JavaLangComparable > {
 @public
  IOSByteArray *data_;
  jint hashCode_;
  NSString *utf8_;
}

+ (IOSCharArray *)HEX_DIGITS;

+ (OkioByteString *)EMPTY;

#pragma mark Public

/*!
 @brief Returns a <code>ByteBuffer</code> view of the bytes in this <code>ByteString</code>.
 */
- (JavaNioByteBuffer *)asByteBuffer;

/*!
 @brief Returns this byte string encoded as <a
 href="http://www.ietf.org/rfc/rfc2045.txt">Base64</a>.
 In violation of the
 RFC, the returned string does not wrap lines at 76 columns.
 */
- (NSString *)base64;

/*!
 @brief Returns this byte string encoded as <a href="http://www.ietf.org/rfc/rfc4648.txt">URL-safe
 Base64</a>.
 */
- (NSString *)base64Url;

- (jint)compareToWithId:(OkioByteString *)byteString;

/*!
 @brief Decodes the Base64-encoded bytes and returns their value as a byte string.
 Returns null if <code>base64</code> is not a Base64-encoded sequence of bytes.
 */
+ (OkioByteString *)decodeBase64WithNSString:(NSString *)base64;

/*!
 @brief Decodes the hex-encoded bytes and returns their value a byte string.
 */
+ (OkioByteString *)decodeHexWithNSString:(NSString *)hex;

/*!
 @brief Returns a new byte string containing the <code>UTF-8</code> bytes of <code>s</code>.
 */
+ (OkioByteString *)encodeUtf8WithNSString:(NSString *)s;

- (jboolean)endsWithWithByteArray:(IOSByteArray *)prefix;

- (jboolean)endsWithWithOkioByteString:(OkioByteString *)prefix;

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the byte at <code>pos</code>.
 */
- (jbyte)getByteWithInt:(jint)pos;

- (NSUInteger)hash;

/*!
 @brief Returns this byte string encoded in hexadecimal.
 */
- (NSString *)hex;

- (jint)indexOfWithByteArray:(IOSByteArray *)other;

- (jint)indexOfWithByteArray:(IOSByteArray *)other
                     withInt:(jint)fromIndex;

- (jint)indexOfWithOkioByteString:(OkioByteString *)other;

- (jint)indexOfWithOkioByteString:(OkioByteString *)other
                          withInt:(jint)fromIndex;

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other;

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other
                         withInt:(jint)fromIndex;

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other;

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other
                              withInt:(jint)fromIndex;

/*!
 @brief Returns the MD5 hash of this byte string.
 */
- (OkioByteString *)md5;

/*!
 @brief Returns a new byte string containing a clone of the bytes of <code>data</code>.
 */
+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data;

/*!
 @brief Returns a new byte string containing a copy of <code>byteCount</code> bytes of <code>data</code> starting
 at <code>offset</code>.
 */
+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data
                            withInt:(jint)offset
                            withInt:(jint)byteCount;

/*!
 @brief Returns true if the bytes of this in <code>[offset..offset+byteCount)</code> equal the bytes of
 <code>other</code> in <code>[otherOffset..otherOffset+byteCount)</code>.
 Returns false if either range is
 out of bounds.
 */
- (jboolean)rangeEqualsWithInt:(jint)offset
                 withByteArray:(IOSByteArray *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

/*!
 @brief Returns true if the bytes of this in <code>[offset..offset+byteCount)</code> equal the bytes of
 <code>other</code> in <code>[otherOffset..otherOffset+byteCount)</code>.
 Returns false if either range is
 out of bounds.
 */
- (jboolean)rangeEqualsWithInt:(jint)offset
            withOkioByteString:(OkioByteString *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

/*!
 @brief Reads <code>count</code> bytes from <code>in</code> and returns the result.
 @throws java.io.EOFException if <code>in</code> has fewer than <code>count</code>
 bytes to read.
 */
+ (OkioByteString *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                      withInt:(jint)byteCount;

/*!
 @brief Returns the SHA-1 hash of this byte string.
 */
- (OkioByteString *)sha1;

/*!
 @brief Returns the SHA-256 hash of this byte string.
 */
- (OkioByteString *)sha256;

/*!
 @brief Returns the number of bytes in this ByteString.
 */
- (jint)size;

- (jboolean)startsWithWithByteArray:(IOSByteArray *)prefix;

- (jboolean)startsWithWithOkioByteString:(OkioByteString *)prefix;

/*!
 @brief Returns a byte string that is a substring of this byte string, beginning at the specified
 index until the end of this string.
 Returns this byte string if <code>beginIndex</code> is 0.
 */
- (OkioByteString *)substringWithInt:(jint)beginIndex;

/*!
 @brief Returns a byte string that is a substring of this byte string, beginning at the specified
 <code>beginIndex</code> and ends at the specified <code>endIndex</code>.
 Returns this byte string if
 <code>beginIndex</code> is 0 and <code>endIndex</code> is the length of this byte string.
 */
- (OkioByteString *)substringWithInt:(jint)beginIndex
                             withInt:(jint)endIndex;

/*!
 @brief Returns a byte string equal to this byte string, but with the bytes 'A'
 through 'Z' replaced with the corresponding byte in 'a' through 'z'.
 Returns this byte string if it contains no bytes in 'A' through 'Z'.
 */
- (OkioByteString *)toAsciiLowercase;

/*!
 @brief Returns a byte string equal to this byte string, but with the bytes 'a'
 through 'z' replaced with the corresponding byte in 'A' through 'Z'.
 Returns this byte string if it contains no bytes in 'a' through 'z'.
 */
- (OkioByteString *)toAsciiUppercase;

/*!
 @brief Returns a byte array containing a copy of the bytes in this <code>ByteString</code>.
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief Returns a human-readable string that describes the contents of this byte string.
 Typically this
 is a string like <code>[text=Hello]</code> or <code>[hex=0000ffff]</code>.
 */
- (NSString *)description;

/*!
 @brief Constructs a new <code>String</code> by decoding the bytes as <code>UTF-8</code>.
 */
- (NSString *)utf8;

/*!
 @brief Writes the contents of this byte string to <code>out</code>.
 */
- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)data;

+ (jint)codePointIndexToCharIndexWithNSString:(NSString *)s
                                      withInt:(jint)codePointCount;

/*!
 @brief Returns the bytes of this string without a defensive copy.
 Do not mutate! 
 */
- (IOSByteArray *)internalArray;

/*!
 @brief Writes the contents of this byte string to <code>buffer</code>.
 */
- (void)writeWithOkioBuffer:(OkioBuffer *)buffer;

@end

J2OBJC_STATIC_INIT(OkioByteString)

J2OBJC_FIELD_SETTER(OkioByteString, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OkioByteString, utf8_, NSString *)

inline IOSCharArray *OkioByteString_get_HEX_DIGITS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *OkioByteString_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioByteString, HEX_DIGITS, IOSCharArray *)

/*!
 @brief A singleton empty <code>ByteString</code>.
 */
inline OkioByteString *OkioByteString_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *OkioByteString_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioByteString, EMPTY, OkioByteString *)

FOUNDATION_EXPORT void OkioByteString_initWithByteArray_(OkioByteString *self, IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *new_OkioByteString_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioByteString *create_OkioByteString_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint byteCount);

FOUNDATION_EXPORT OkioByteString *OkioByteString_encodeUtf8WithNSString_(NSString *s);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeBase64WithNSString_(NSString *base64);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeHexWithNSString_(NSString *hex);

FOUNDATION_EXPORT OkioByteString *OkioByteString_readWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint byteCount);

FOUNDATION_EXPORT jint OkioByteString_codePointIndexToCharIndexWithNSString_withInt_(NSString *s, jint codePointCount);

J2OBJC_TYPE_LITERAL_HEADER(OkioByteString)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioByteString")
