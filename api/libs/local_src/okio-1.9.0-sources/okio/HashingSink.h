//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/HashingSink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioHashingSink")
#ifdef RESTRICT_OkioHashingSink
#define INCLUDE_ALL_OkioHashingSink 0
#else
#define INCLUDE_ALL_OkioHashingSink 1
#endif
#undef RESTRICT_OkioHashingSink

#if !defined (OkioHashingSink_) && (INCLUDE_ALL_OkioHashingSink || defined(INCLUDE_OkioHashingSink))
#define OkioHashingSink_

#define RESTRICT_OkioForwardingSink 1
#define INCLUDE_OkioForwardingSink 1
#include "okio/ForwardingSink.h"

@class OkioBuffer;
@class OkioByteString;
@protocol OkioSink;

/*!
 @brief A sink that computes a hash of the full stream of bytes it has accepted.
 To use, create an
 instance with your preferred hash algorithm. Write all of the data to the sink and then call
 <code>hash()</code> to compute the final hash value.
 <p>In this example we use <code>HashingSink</code> with a <code>BufferedSink</code> to make writing to the
 sink easier. 
@code
     HashingSink hashingSink = HashingSink.sha256(s);
   BufferedSink bufferedSink = Okio.buffer(hashingSink);
   ... // Write to bufferedSink and either flush or close it.
   ByteString hash = hashingSink.hash();
 
@endcode
 */
@interface OkioHashingSink : OkioForwardingSink

#pragma mark Public

/*!
 @brief Returns the hash of the bytes accepted thus far and resets the internal state of this sink.
 <p><strong>Warning:</strong> This method is not idempotent. Each time this method is called its
 internal state is cleared. This starts a new hash with zero bytes accepted.
 */
- (OkioByteString *)hash__;

/*!
 @brief Returns a sink that uses the obsolete MD5 hash algorithm.
 */
+ (OkioHashingSink *)md5WithOkioSink:(id<OkioSink>)sink;

/*!
 @brief Returns a sink that uses the obsolete SHA-1 hash algorithm.
 */
+ (OkioHashingSink *)sha1WithOkioSink:(id<OkioSink>)sink;

/*!
 @brief Returns a sink that uses the SHA-256 hash algorithm.
 */
+ (OkioHashingSink *)sha256WithOkioSink:(id<OkioSink>)sink;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioHashingSink)

FOUNDATION_EXPORT OkioHashingSink *OkioHashingSink_md5WithOkioSink_(id<OkioSink> sink);

FOUNDATION_EXPORT OkioHashingSink *OkioHashingSink_sha1WithOkioSink_(id<OkioSink> sink);

FOUNDATION_EXPORT OkioHashingSink *OkioHashingSink_sha256WithOkioSink_(id<OkioSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(OkioHashingSink)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioHashingSink")
