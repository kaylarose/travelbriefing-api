//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/SegmentPool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"

@interface OkioSegmentPool ()

- (instancetype)init;

@end

__attribute__((unused)) static void OkioSegmentPool_init(OkioSegmentPool *self);

__attribute__((unused)) static OkioSegmentPool *new_OkioSegmentPool_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioSegmentPool *create_OkioSegmentPool_init();

OkioSegment *OkioSegmentPool_next;
jlong OkioSegmentPool_byteCount;

@implementation OkioSegmentPool

+ (jlong)MAX_SIZE {
  return OkioSegmentPool_MAX_SIZE;
}

+ (OkioSegment *)next {
  return OkioSegmentPool_next;
}

+ (void)setNext:(OkioSegment *)value {
  OkioSegmentPool_next = value;
}

+ (jlong)byteCount {
  return OkioSegmentPool_byteCount;
}

+ (void)setByteCount:(jlong)value {
  OkioSegmentPool_byteCount = value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioSegmentPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OkioSegment *)take {
  return OkioSegmentPool_take();
}

+ (void)recycleWithOkioSegment:(OkioSegment *)segment {
  OkioSegmentPool_recycleWithOkioSegment_(segment);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { "take", "LOkioSegment;", 0x8, -1, -1, -1, -1, -1, -1 },
    { "recycleWithOkioSegment:", "V", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SIZE", "J", .constantValue.asLong = OkioSegmentPool_MAX_SIZE, 0x18, -1, -1, -1, -1 },
    { "next", "LOkioSegment;", .constantValue.asLong = 0, 0x8, -1, 2, -1, -1 },
    { "byteCount", "J", .constantValue.asLong = 0, 0x8, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "recycle", "LOkioSegment;", &OkioSegmentPool_next, &OkioSegmentPool_byteCount };
  static const J2ObjcClassInfo _OkioSegmentPool = { "SegmentPool", "okio", ptrTable, methods, fields, 7, 0x10, 3, 3, -1, -1, -1, -1, -1 };
  return &_OkioSegmentPool;
}

@end

void OkioSegmentPool_init(OkioSegmentPool *self) {
  NSObject_init(self);
}

OkioSegmentPool *new_OkioSegmentPool_init() {
  J2OBJC_NEW_IMPL(OkioSegmentPool, init)
}

OkioSegmentPool *create_OkioSegmentPool_init() {
  J2OBJC_CREATE_IMPL(OkioSegmentPool, init)
}

OkioSegment *OkioSegmentPool_take() {
  OkioSegmentPool_initialize();
  @synchronized(OkioSegmentPool_class_()) {
    if (OkioSegmentPool_next != nil) {
      OkioSegment *result = OkioSegmentPool_next;
      OkioSegmentPool_next = result->next_;
      result->next_ = nil;
      OkioSegmentPool_byteCount -= OkioSegment_SIZE;
      return result;
    }
  }
  return new_OkioSegment_init();
}

void OkioSegmentPool_recycleWithOkioSegment_(OkioSegment *segment) {
  OkioSegmentPool_initialize();
  if (((OkioSegment *) nil_chk(segment))->next_ != nil || segment->prev_ != nil) @throw new_JavaLangIllegalArgumentException_init();
  if (segment->shared_) return;
  @synchronized(OkioSegmentPool_class_()) {
    if (OkioSegmentPool_byteCount + OkioSegment_SIZE > OkioSegmentPool_MAX_SIZE) return;
    OkioSegmentPool_byteCount += OkioSegment_SIZE;
    segment->next_ = OkioSegmentPool_next;
    segment->pos_ = segment->limit_ = 0;
    OkioSegmentPool_next = segment;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioSegmentPool)
