//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/ForwardingTimeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioForwardingTimeout")
#ifdef RESTRICT_OkioForwardingTimeout
#define INCLUDE_ALL_OkioForwardingTimeout 0
#else
#define INCLUDE_ALL_OkioForwardingTimeout 1
#endif
#undef RESTRICT_OkioForwardingTimeout

#if !defined (OkioForwardingTimeout_) && (INCLUDE_ALL_OkioForwardingTimeout || defined(INCLUDE_OkioForwardingTimeout))
#define OkioForwardingTimeout_

#define RESTRICT_OkioTimeout 1
#define INCLUDE_OkioTimeout 1
#include "okio/Timeout.h"

@class JavaUtilConcurrentTimeUnit;

/*!
 @brief A <code>Timeout</code> which forwards calls to another.
 Useful for subclassing. 
 */
@interface OkioForwardingTimeout : OkioTimeout

#pragma mark Public

- (instancetype)initWithOkioTimeout:(OkioTimeout *)delegate;

- (OkioTimeout *)clearDeadline;

- (OkioTimeout *)clearTimeout;

- (jlong)deadlineNanoTime;

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime;

/*!
 @brief <code>Timeout</code> instance to which this instance is currently delegating.
 */
- (OkioTimeout *)delegate;

- (jboolean)hasDeadline;

- (OkioForwardingTimeout *)setDelegateWithOkioTimeout:(OkioTimeout *)delegate;

- (void)throwIfReached;

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jlong)timeoutNanos;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioForwardingTimeout)

FOUNDATION_EXPORT void OkioForwardingTimeout_initWithOkioTimeout_(OkioForwardingTimeout *self, OkioTimeout *delegate);

FOUNDATION_EXPORT OkioForwardingTimeout *new_OkioForwardingTimeout_initWithOkioTimeout_(OkioTimeout *delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioForwardingTimeout *create_OkioForwardingTimeout_initWithOkioTimeout_(OkioTimeout *delegate);

J2OBJC_TYPE_LITERAL_HEADER(OkioForwardingTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioForwardingTimeout")
