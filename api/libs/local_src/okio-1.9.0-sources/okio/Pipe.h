//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/Pipe.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioPipe")
#ifdef RESTRICT_OkioPipe
#define INCLUDE_ALL_OkioPipe 0
#else
#define INCLUDE_ALL_OkioPipe 1
#endif
#undef RESTRICT_OkioPipe

#if !defined (OkioPipe_) && (INCLUDE_ALL_OkioPipe || defined(INCLUDE_OkioPipe))
#define OkioPipe_

@class OkioBuffer;
@protocol OkioSink;
@protocol OkioSource;

/*!
 @brief A source and a sink that are attached.
 The sink's output is the source's input. Typically each
 is accessed by its own thread: a producer thread writes data to the sink and a consumer thread
 reads data from the source.
 <p>This class uses a buffer to decouple source and sink. This buffer has a user-specified maximum
 size. When a producer thread outruns its consumer the buffer fills up and eventually writes to
 the sink will block until the consumer has caught up. Symmetrically, if a consumer outruns its
 producer reads block until there is data to be read. Limits on the amount of time spent waiting
 for the other party can be configured with timeouts on the source and the
 sink.
 <p>When the sink is closed, source reads will continue to complete normally until the buffer has
 been exhausted. At that point reads will return -1, indicating the end of the stream. But if the
 source is closed first, writes to the sink will immediately fail with an <code>IOException</code>.
 */
@interface OkioPipe : NSObject {
 @public
  jlong maxBufferSize_;
  OkioBuffer *buffer_;
  jboolean sinkClosed_;
  jboolean sourceClosed_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)maxBufferSize;

- (id<OkioSink>)sink;

- (id<OkioSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioPipe)

J2OBJC_FIELD_SETTER(OkioPipe, buffer_, OkioBuffer *)

FOUNDATION_EXPORT void OkioPipe_initWithLong_(OkioPipe *self, jlong maxBufferSize);

FOUNDATION_EXPORT OkioPipe *new_OkioPipe_initWithLong_(jlong maxBufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioPipe *create_OkioPipe_initWithLong_(jlong maxBufferSize);

J2OBJC_TYPE_LITERAL_HEADER(OkioPipe)

#endif

#if !defined (OkioPipe_PipeSink_) && (INCLUDE_ALL_OkioPipe || defined(INCLUDE_OkioPipe_PipeSink))
#define OkioPipe_PipeSink_

#define RESTRICT_OkioSink 1
#define INCLUDE_OkioSink 1
#include "okio/Sink.h"

@class OkioBuffer;
@class OkioPipe;
@class OkioTimeout;

@interface OkioPipe_PipeSink : NSObject < OkioSink > {
 @public
  OkioTimeout *timeout_;
}

#pragma mark Public

- (void)close;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

#pragma mark Package-Private

- (instancetype)initWithOkioPipe:(OkioPipe *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioPipe_PipeSink)

J2OBJC_FIELD_SETTER(OkioPipe_PipeSink, timeout_, OkioTimeout *)

FOUNDATION_EXPORT void OkioPipe_PipeSink_initWithOkioPipe_(OkioPipe_PipeSink *self, OkioPipe *outer$);

FOUNDATION_EXPORT OkioPipe_PipeSink *new_OkioPipe_PipeSink_initWithOkioPipe_(OkioPipe *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioPipe_PipeSink *create_OkioPipe_PipeSink_initWithOkioPipe_(OkioPipe *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OkioPipe_PipeSink)

#endif

#if !defined (OkioPipe_PipeSource_) && (INCLUDE_ALL_OkioPipe || defined(INCLUDE_OkioPipe_PipeSource))
#define OkioPipe_PipeSource_

#define RESTRICT_OkioSource 1
#define INCLUDE_OkioSource 1
#include "okio/Source.h"

@class OkioBuffer;
@class OkioPipe;
@class OkioTimeout;

@interface OkioPipe_PipeSource : NSObject < OkioSource > {
 @public
  OkioTimeout *timeout_;
}

#pragma mark Public

- (void)close;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

#pragma mark Package-Private

- (instancetype)initWithOkioPipe:(OkioPipe *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioPipe_PipeSource)

J2OBJC_FIELD_SETTER(OkioPipe_PipeSource, timeout_, OkioTimeout *)

FOUNDATION_EXPORT void OkioPipe_PipeSource_initWithOkioPipe_(OkioPipe_PipeSource *self, OkioPipe *outer$);

FOUNDATION_EXPORT OkioPipe_PipeSource *new_OkioPipe_PipeSource_initWithOkioPipe_(OkioPipe *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioPipe_PipeSource *create_OkioPipe_PipeSource_initWithOkioPipe_(OkioPipe *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OkioPipe_PipeSource)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioPipe")
