//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/DeflaterSink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioDeflaterSink")
#ifdef RESTRICT_OkioDeflaterSink
#define INCLUDE_ALL_OkioDeflaterSink 0
#else
#define INCLUDE_ALL_OkioDeflaterSink 1
#endif
#undef RESTRICT_OkioDeflaterSink

#if !defined (OkioDeflaterSink_) && (INCLUDE_ALL_OkioDeflaterSink || defined(INCLUDE_OkioDeflaterSink))
#define OkioDeflaterSink_

#define RESTRICT_OkioSink 1
#define INCLUDE_OkioSink 1
#include "okio/Sink.h"

@class JavaUtilZipDeflater;
@class OkioBuffer;
@class OkioTimeout;
@protocol OkioBufferedSink;

/*!
 @brief A sink that uses <a href="http://tools.ietf.org/html/rfc1951">DEFLATE</a> to
 compress data written to another source.
 <h3>Sync flush</h3>
 Aggressive flushing of this stream may result in reduced compression. Each
 call to <code>flush</code> immediately compresses all currently-buffered data;
 this early compression may be less effective than compression performed
 without flushing.
 <p>This is equivalent to using <code>Deflater</code> with the sync flush option.
 This class does not offer any partial flush mechanism. For best performance,
 only call <code>flush</code> when application behavior requires it.
 */
@interface OkioDeflaterSink : NSObject < OkioSink >

#pragma mark Public

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
         withJavaUtilZipDeflater:(JavaUtilZipDeflater *)deflater;

- (void)close;

- (void)flush;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

#pragma mark Package-Private

/*!
 @brief This package-private constructor shares a buffer with its trusted caller.
 In general we can't share a BufferedSource because the deflater holds input
 bytes until they are inflated.
 */
- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                 withJavaUtilZipDeflater:(JavaUtilZipDeflater *)deflater;

- (void)finishDeflate;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioDeflaterSink)

FOUNDATION_EXPORT void OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(OkioDeflaterSink *self, id<OkioSink> sink, JavaUtilZipDeflater *deflater);

FOUNDATION_EXPORT OkioDeflaterSink *new_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(id<OkioSink> sink, JavaUtilZipDeflater *deflater) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioDeflaterSink *create_OkioDeflaterSink_initWithOkioSink_withJavaUtilZipDeflater_(id<OkioSink> sink, JavaUtilZipDeflater *deflater);

FOUNDATION_EXPORT void OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(OkioDeflaterSink *self, id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater);

FOUNDATION_EXPORT OkioDeflaterSink *new_OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioDeflaterSink *create_OkioDeflaterSink_initWithOkioBufferedSink_withJavaUtilZipDeflater_(id<OkioBufferedSink> sink, JavaUtilZipDeflater *deflater);

J2OBJC_TYPE_LITERAL_HEADER(OkioDeflaterSink)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioDeflaterSink")
