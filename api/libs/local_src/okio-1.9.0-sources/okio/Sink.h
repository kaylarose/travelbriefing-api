//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/Sink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioSink")
#ifdef RESTRICT_OkioSink
#define INCLUDE_ALL_OkioSink 0
#else
#define INCLUDE_ALL_OkioSink 1
#endif
#undef RESTRICT_OkioSink

#if !defined (OkioSink_) && (INCLUDE_ALL_OkioSink || defined(INCLUDE_OkioSink))
#define OkioSink_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

#define RESTRICT_JavaIoFlushable 1
#define INCLUDE_JavaIoFlushable 1
#include "java/io/Flushable.h"

@class OkioBuffer;
@class OkioTimeout;

/*!
 @brief Receives a stream of bytes.
 Use this interface to write data wherever it's
 needed: to the network, storage, or a buffer in memory. Sinks may be layered
 to transform received data, such as to compress, encrypt, throttle, or add
 protocol framing.
 <p>Most application code shouldn't operate on a sink directly, but rather on a
 <code>BufferedSink</code> which is both more efficient and more convenient. Use
 <code>Okio.buffer(Sink)</code> to wrap any sink with a buffer.
 <p>Sinks are easy to test: just use a <code>Buffer</code> in your tests, and
 read from it to confirm it received the data that was expected.
 <h3>Comparison with OutputStream</h3>
 This interface is functionally equivalent to <code>java.io.OutputStream</code>.
 <p><code>OutputStream</code> requires multiple layers when emitted data is
 heterogeneous: a <code>DataOutputStream</code> for primitive values, a <code>BufferedOutputStream</code>
  for buffering, and <code>OutputStreamWriter</code> for
 charset encoding. This class uses <code>BufferedSink</code> for all of the above.
 <p>Sink is also easier to layer: there is no single-byte write
  method that is awkward to
 implement efficiently.
 <h3>Interop with OutputStream</h3>
 Use <code>Okio.sink</code> to adapt an <code>OutputStream</code> to a sink. Use <code>BufferedSink.outputStream</code>
  to adapt a sink to an <code>OutputStream</code>.
 */
@protocol OkioSink < JavaIoCloseable, JavaIoFlushable, JavaObject >

/*!
 @brief Removes <code>byteCount</code> bytes from <code>source</code> and appends them to this.
 */
- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

/*!
 @brief Pushes all buffered bytes to their final destination.
 */
- (void)flush;

/*!
 @brief Returns the timeout for this sink.
 */
- (OkioTimeout *)timeout;

/*!
 @brief Pushes all buffered bytes to their final destination and releases the
 resources held by this sink.
 It is an error to write a closed sink. It is
 safe to close a sink more than once.
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioSink)

J2OBJC_TYPE_LITERAL_HEADER(OkioSink)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioSink")
