//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/ByteString.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Field.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/Arrays.h"
#include "okio/Base64.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/Util.h"

@interface OkioByteString ()

- (OkioByteString *)digestWithNSString:(NSString *)algorithm;

+ (jint)decodeHexDigitWithChar:(jchar)c;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

inline jlong OkioByteString_get_serialVersionUID();
#define OkioByteString_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OkioByteString, serialVersionUID, jlong)

__attribute__((unused)) static OkioByteString *OkioByteString_digestWithNSString_(OkioByteString *self, NSString *algorithm);

__attribute__((unused)) static jint OkioByteString_decodeHexDigitWithChar_(jchar c);

J2OBJC_INITIALIZED_DEFN(OkioByteString)

IOSCharArray *OkioByteString_HEX_DIGITS;
OkioByteString *OkioByteString_EMPTY;

@implementation OkioByteString

+ (IOSCharArray *)HEX_DIGITS {
  return OkioByteString_HEX_DIGITS;
}

+ (OkioByteString *)EMPTY {
  return OkioByteString_EMPTY;
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  OkioByteString_initWithByteArray_(self, data);
  return self;
}

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data {
  return OkioByteString_ofWithByteArray_(data);
}

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data
                            withInt:(jint)offset
                            withInt:(jint)byteCount {
  return OkioByteString_ofWithByteArray_withInt_withInt_(data, offset, byteCount);
}

+ (OkioByteString *)encodeUtf8WithNSString:(NSString *)s {
  return OkioByteString_encodeUtf8WithNSString_(s);
}

- (NSString *)utf8 {
  NSString *result = utf8_;
  return result != nil ? result : (utf8_ = [NSString stringWithBytes:data_ charset:JreLoadStatic(OkioUtil, UTF_8)]);
}

- (NSString *)base64 {
  return OkioBase64_encodeWithByteArray_(data_);
}

- (OkioByteString *)md5 {
  return OkioByteString_digestWithNSString_(self, @"MD5");
}

- (OkioByteString *)sha1 {
  return OkioByteString_digestWithNSString_(self, @"SHA-1");
}

- (OkioByteString *)sha256 {
  return OkioByteString_digestWithNSString_(self, @"SHA-256");
}

- (OkioByteString *)digestWithNSString:(NSString *)algorithm {
  return OkioByteString_digestWithNSString_(self, algorithm);
}

- (NSString *)base64Url {
  return OkioBase64_encodeUrlWithByteArray_(data_);
}

+ (OkioByteString *)decodeBase64WithNSString:(NSString *)base64 {
  return OkioByteString_decodeBase64WithNSString_(base64);
}

- (NSString *)hex {
  IOSCharArray *result = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(data_))->size_ * 2];
  jint c = 0;
  {
    IOSByteArray *a__ = data_;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      *IOSCharArray_GetRef(result, c++) = IOSCharArray_Get(nil_chk(OkioByteString_HEX_DIGITS), (JreRShift32(b, 4)) & (jint) 0xf);
      *IOSCharArray_GetRef(result, c++) = IOSCharArray_Get(OkioByteString_HEX_DIGITS, b & (jint) 0xf);
    }
  }
  return [NSString stringWithCharacters:result];
}

+ (OkioByteString *)decodeHexWithNSString:(NSString *)hex {
  return OkioByteString_decodeHexWithNSString_(hex);
}

+ (jint)decodeHexDigitWithChar:(jchar)c {
  return OkioByteString_decodeHexDigitWithChar_(c);
}

+ (OkioByteString *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                      withInt:(jint)byteCount {
  return OkioByteString_readWithJavaIoInputStream_withInt_(inArg, byteCount);
}

- (OkioByteString *)toAsciiLowercase {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data_))->size_; i++) {
    jbyte c = IOSByteArray_Get(data_, i);
    if (c < 'A' || c > 'Z') continue;
    IOSByteArray *lowercase = [data_ clone];
    *IOSByteArray_GetRef(nil_chk(lowercase), i++) = (jbyte) (c - ('A' - 'a'));
    for (; i < lowercase->size_; i++) {
      c = IOSByteArray_Get(lowercase, i);
      if (c < 'A' || c > 'Z') continue;
      *IOSByteArray_GetRef(lowercase, i) = (jbyte) (c - ('A' - 'a'));
    }
    return new_OkioByteString_initWithByteArray_(lowercase);
  }
  return self;
}

- (OkioByteString *)toAsciiUppercase {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data_))->size_; i++) {
    jbyte c = IOSByteArray_Get(data_, i);
    if (c < 'a' || c > 'z') continue;
    IOSByteArray *lowercase = [data_ clone];
    *IOSByteArray_GetRef(nil_chk(lowercase), i++) = (jbyte) (c - ('a' - 'A'));
    for (; i < lowercase->size_; i++) {
      c = IOSByteArray_Get(lowercase, i);
      if (c < 'a' || c > 'z') continue;
      *IOSByteArray_GetRef(lowercase, i) = (jbyte) (c - ('a' - 'A'));
    }
    return new_OkioByteString_initWithByteArray_(lowercase);
  }
  return self;
}

- (OkioByteString *)substringWithInt:(jint)beginIndex {
  return [self substringWithInt:beginIndex withInt:((IOSByteArray *) nil_chk(data_))->size_];
}

- (OkioByteString *)substringWithInt:(jint)beginIndex
                             withInt:(jint)endIndex {
  if (beginIndex < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"beginIndex < 0");
  if (endIndex > ((IOSByteArray *) nil_chk(data_))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"endIndex > length(", data_->size_, ')'));
  }
  jint subLen = endIndex - beginIndex;
  if (subLen < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"endIndex < beginIndex");
  if ((beginIndex == 0) && (endIndex == data_->size_)) {
    return self;
  }
  IOSByteArray *copy_ = [IOSByteArray newArrayWithLength:subLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, beginIndex, copy_, 0, subLen);
  return new_OkioByteString_initWithByteArray_(copy_);
}

- (jbyte)getByteWithInt:(jint)pos {
  return IOSByteArray_Get(nil_chk(data_), pos);
}

- (jint)size {
  return ((IOSByteArray *) nil_chk(data_))->size_;
}

- (IOSByteArray *)toByteArray {
  return [((IOSByteArray *) nil_chk(data_)) clone];
}

- (IOSByteArray *)internalArray {
  return data_;
}

- (JavaNioByteBuffer *)asByteBuffer {
  return [((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_(data_))) asReadOnlyBuffer];
}

- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (outArg == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"out == null");
  [outArg writeWithByteArray:data_];
}

- (void)writeWithOkioBuffer:(OkioBuffer *)buffer {
  (void) [((OkioBuffer *) nil_chk(buffer)) writeWithByteArray:data_ withInt:0 withInt:((IOSByteArray *) nil_chk(data_))->size_];
}

- (jboolean)rangeEqualsWithInt:(jint)offset
            withOkioByteString:(OkioByteString *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount {
  return [((OkioByteString *) nil_chk(other)) rangeEqualsWithInt:otherOffset withByteArray:self->data_ withInt:offset withInt:byteCount];
}

- (jboolean)rangeEqualsWithInt:(jint)offset
                 withByteArray:(IOSByteArray *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount {
  return offset >= 0 && offset <= ((IOSByteArray *) nil_chk(data_))->size_ - byteCount && otherOffset >= 0 && otherOffset <= ((IOSByteArray *) nil_chk(other))->size_ - byteCount && OkioUtil_arrayRangeEqualsWithByteArray_withInt_withByteArray_withInt_withInt_(data_, offset, other, otherOffset, byteCount);
}

- (jboolean)startsWithWithOkioByteString:(OkioByteString *)prefix {
  return [self rangeEqualsWithInt:0 withOkioByteString:prefix withInt:0 withInt:[((OkioByteString *) nil_chk(prefix)) size]];
}

- (jboolean)startsWithWithByteArray:(IOSByteArray *)prefix {
  return [self rangeEqualsWithInt:0 withByteArray:prefix withInt:0 withInt:((IOSByteArray *) nil_chk(prefix))->size_];
}

- (jboolean)endsWithWithOkioByteString:(OkioByteString *)prefix {
  return [self rangeEqualsWithInt:[self size] - [((OkioByteString *) nil_chk(prefix)) size] withOkioByteString:prefix withInt:0 withInt:[prefix size]];
}

- (jboolean)endsWithWithByteArray:(IOSByteArray *)prefix {
  return [self rangeEqualsWithInt:[self size] - ((IOSByteArray *) nil_chk(prefix))->size_ withByteArray:prefix withInt:0 withInt:prefix->size_];
}

- (jint)indexOfWithOkioByteString:(OkioByteString *)other {
  return [self indexOfWithByteArray:[((OkioByteString *) nil_chk(other)) internalArray] withInt:0];
}

- (jint)indexOfWithOkioByteString:(OkioByteString *)other
                          withInt:(jint)fromIndex {
  return [self indexOfWithByteArray:[((OkioByteString *) nil_chk(other)) internalArray] withInt:fromIndex];
}

- (jint)indexOfWithByteArray:(IOSByteArray *)other {
  return [self indexOfWithByteArray:other withInt:0];
}

- (jint)indexOfWithByteArray:(IOSByteArray *)other
                     withInt:(jint)fromIndex {
  fromIndex = JavaLangMath_maxWithInt_withInt_(fromIndex, 0);
  for (jint i = fromIndex, limit = ((IOSByteArray *) nil_chk(data_))->size_ - ((IOSByteArray *) nil_chk(other))->size_; i <= limit; i++) {
    if (OkioUtil_arrayRangeEqualsWithByteArray_withInt_withByteArray_withInt_withInt_(data_, i, other, 0, other->size_)) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other {
  return [self lastIndexOfWithByteArray:[((OkioByteString *) nil_chk(other)) internalArray] withInt:[self size]];
}

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other
                              withInt:(jint)fromIndex {
  return [self lastIndexOfWithByteArray:[((OkioByteString *) nil_chk(other)) internalArray] withInt:fromIndex];
}

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other {
  return [self lastIndexOfWithByteArray:other withInt:[self size]];
}

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other
                         withInt:(jint)fromIndex {
  fromIndex = JavaLangMath_minWithInt_withInt_(fromIndex, ((IOSByteArray *) nil_chk(data_))->size_ - ((IOSByteArray *) nil_chk(other))->size_);
  for (jint i = fromIndex; i >= 0; i--) {
    if (OkioUtil_arrayRangeEqualsWithByteArray_withInt_withByteArray_withInt_withInt_(data_, i, other, 0, other->size_)) {
      return i;
    }
  }
  return -1;
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  return [o isKindOfClass:[OkioByteString class]] && [((OkioByteString *) nil_chk(((OkioByteString *) cast_chk(o, [OkioByteString class])))) size] == ((IOSByteArray *) nil_chk(data_))->size_ && [((OkioByteString *) nil_chk(((OkioByteString *) cast_chk(o, [OkioByteString class])))) rangeEqualsWithInt:0 withByteArray:data_ withInt:0 withInt:data_->size_];
}

- (NSUInteger)hash {
  jint result = hashCode_;
  return result != 0 ? result : (hashCode_ = JavaUtilArrays_hashCodeWithByteArray_(data_));
}

- (jint)compareToWithId:(OkioByteString *)byteString {
  (void) cast_chk(byteString, [OkioByteString class]);
  jint sizeA = [self size];
  jint sizeB = [((OkioByteString *) nil_chk(byteString)) size];
  for (jint i = 0, size = JavaLangMath_minWithInt_withInt_(sizeA, sizeB); i < size; i++) {
    jint byteA = [self getByteWithInt:i] & (jint) 0xff;
    jint byteB = [byteString getByteWithInt:i] & (jint) 0xff;
    if (byteA == byteB) continue;
    return byteA < byteB ? -1 : 1;
  }
  if (sizeA == sizeB) return 0;
  return sizeA < sizeB ? -1 : 1;
}

- (NSString *)description {
  if (((IOSByteArray *) nil_chk(data_))->size_ == 0) {
    return @"[size=0]";
  }
  NSString *text = [self utf8];
  jint i = OkioByteString_codePointIndexToCharIndexWithNSString_withInt_(text, 64);
  if (i == -1) {
    return data_->size_ <= 64 ? JreStrcat("$$C", @"[hex=", [self hex], ']') : JreStrcat("$I$$$", @"[size=", data_->size_, @" hex=", [((OkioByteString *) nil_chk([self substringWithInt:0 withInt:64])) hex], @"\u2026]");
  }
  NSString *safeText = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(text)) substring:0 endIndex:i])) replace:@"\\" withSequence:@"\\\\"])) replace:@"\n" withSequence:@"\\n"])) replace:@"\x0d" withSequence:@"\\r"];
  return i < ((jint) [text length]) ? JreStrcat("$I$$$", @"[size=", data_->size_, @" text=", safeText, @"\u2026]") : JreStrcat("$$C", @"[text=", safeText, ']');
}

+ (jint)codePointIndexToCharIndexWithNSString:(NSString *)s
                                      withInt:(jint)codePointCount {
  return OkioByteString_codePointIndexToCharIndexWithNSString_withInt_(s, codePointCount);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  jint dataLength = [((JavaIoObjectInputStream *) nil_chk(inArg)) readInt];
  OkioByteString *byteString = OkioByteString_readWithJavaIoInputStream_withInt_(inArg, dataLength);
  @try {
    JavaLangReflectField *field = [OkioByteString_class_() getDeclaredField:@"data"];
    [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
    [field setWithId:self withId:((OkioByteString *) nil_chk(byteString))->data_];
  }
  @catch (JavaLangNoSuchFieldException *e) {
    @throw new_JavaLangAssertionError_init();
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangAssertionError_init();
  }
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeIntWithInt:((IOSByteArray *) nil_chk(data_))->size_];
  [outArg writeWithByteArray:data_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:", NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { "ofWithByteArray:", "LOkioByteString;", 0x89, 1, 0, -1, -1, -1, -1 },
    { "ofWithByteArray:withInt:withInt:", "LOkioByteString;", 0x9, 1, 2, -1, -1, -1, -1 },
    { "encodeUtf8WithNSString:", "LOkioByteString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { "utf8", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "base64", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "md5", "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "sha1", "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "sha256", "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "digestWithNSString:", "LOkioByteString;", 0x2, 5, 4, -1, -1, -1, -1 },
    { "base64Url", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "decodeBase64WithNSString:", "LOkioByteString;", 0x9, 6, 4, -1, -1, -1, -1 },
    { "hex", "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "decodeHexWithNSString:", "LOkioByteString;", 0x9, 7, 4, -1, -1, -1, -1 },
    { "decodeHexDigitWithChar:", "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { "readWithJavaIoInputStream:withInt:", "LOkioByteString;", 0x9, 10, 11, 12, -1, -1, -1 },
    { "toAsciiLowercase", "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "toAsciiUppercase", "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "substringWithInt:", "LOkioByteString;", 0x1, 13, 14, -1, -1, -1, -1 },
    { "substringWithInt:withInt:", "LOkioByteString;", 0x1, 13, 15, -1, -1, -1, -1 },
    { "getByteWithInt:", "B", 0x1, 16, 14, -1, -1, -1, -1 },
    { "size", "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { "toByteArray", "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { "internalArray", "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { "asByteBuffer", "LJavaNioByteBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { "writeWithJavaIoOutputStream:", "V", 0x1, 17, 18, 12, -1, -1, -1 },
    { "writeWithOkioBuffer:", "V", 0x0, 17, 19, -1, -1, -1, -1 },
    { "rangeEqualsWithInt:withOkioByteString:withInt:withInt:", "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { "rangeEqualsWithInt:withByteArray:withInt:withInt:", "Z", 0x1, 20, 22, -1, -1, -1, -1 },
    { "startsWithWithOkioByteString:", "Z", 0x11, 23, 24, -1, -1, -1, -1 },
    { "startsWithWithByteArray:", "Z", 0x11, 23, 0, -1, -1, -1, -1 },
    { "endsWithWithOkioByteString:", "Z", 0x11, 25, 24, -1, -1, -1, -1 },
    { "endsWithWithByteArray:", "Z", 0x11, 25, 0, -1, -1, -1, -1 },
    { "indexOfWithOkioByteString:", "I", 0x11, 26, 24, -1, -1, -1, -1 },
    { "indexOfWithOkioByteString:withInt:", "I", 0x11, 26, 27, -1, -1, -1, -1 },
    { "indexOfWithByteArray:", "I", 0x11, 26, 0, -1, -1, -1, -1 },
    { "indexOfWithByteArray:withInt:", "I", 0x1, 26, 28, -1, -1, -1, -1 },
    { "lastIndexOfWithOkioByteString:", "I", 0x11, 29, 24, -1, -1, -1, -1 },
    { "lastIndexOfWithOkioByteString:withInt:", "I", 0x11, 29, 27, -1, -1, -1, -1 },
    { "lastIndexOfWithByteArray:", "I", 0x11, 29, 0, -1, -1, -1, -1 },
    { "lastIndexOfWithByteArray:withInt:", "I", 0x1, 29, 28, -1, -1, -1, -1 },
    { "isEqual:", "Z", 0x1, 30, 31, -1, -1, -1, -1 },
    { "hash", "I", 0x1, 32, -1, -1, -1, -1, -1 },
    { "compareToWithId:", "I", 0x1, 33, 24, -1, -1, -1, -1 },
    { "description", "LNSString;", 0x1, 34, -1, -1, -1, -1, -1 },
    { "codePointIndexToCharIndexWithNSString:withInt:", "I", 0x8, 35, 36, -1, -1, -1, -1 },
    { "readObjectWithJavaIoObjectInputStream:", "V", 0x2, 37, 38, 12, -1, -1, -1 },
    { "writeObjectWithJavaIoObjectOutputStream:", "V", 0x2, 39, 40, 12, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x18, -1, 41, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OkioByteString_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "utf8_", "LNSString;", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "of", "[BII", "encodeUtf8", "LNSString;", "digest", "decodeBase64", "decodeHex", "decodeHexDigit", "C", "read", "LJavaIoInputStream;I", "LJavaIoIOException;", "substring", "I", "II", "getByte", "write", "LJavaIoOutputStream;", "LOkioBuffer;", "rangeEquals", "ILOkioByteString;II", "I[BII", "startsWith", "LOkioByteString;", "endsWith", "indexOf", "LOkioByteString;I", "[BI", "lastIndexOf", "equals", "LNSObject;", "hashCode", "compareTo", "toString", "codePointIndexToCharIndex", "LNSString;I", "readObject", "LJavaIoObjectInputStream;", "writeObject", "LJavaIoObjectOutputStream;", &OkioByteString_HEX_DIGITS, &OkioByteString_EMPTY, "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Lokio/ByteString;>;" };
  static const J2ObjcClassInfo _OkioByteString = { "ByteString", "okio", ptrTable, methods, fields, 7, 0x1, 48, 6, -1, -1, -1, 43, -1 };
  return &_OkioByteString;
}

+ (void)initialize {
  if (self == [OkioByteString class]) {
    OkioByteString_HEX_DIGITS = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    OkioByteString_EMPTY = OkioByteString_ofWithByteArray_([IOSByteArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(OkioByteString)
  }
}

@end

void OkioByteString_initWithByteArray_(OkioByteString *self, IOSByteArray *data) {
  NSObject_init(self);
  self->data_ = data;
}

OkioByteString *new_OkioByteString_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(OkioByteString, initWithByteArray_, data)
}

OkioByteString *create_OkioByteString_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(OkioByteString, initWithByteArray_, data)
}

OkioByteString *OkioByteString_ofWithByteArray_(IOSByteArray *data) {
  OkioByteString_initialize();
  if (data == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"data == null");
  return new_OkioByteString_initWithByteArray_([data clone]);
}

OkioByteString *OkioByteString_ofWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint byteCount) {
  OkioByteString_initialize();
  if (data == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"data == null");
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(data->size_, offset, byteCount);
  IOSByteArray *copy_ = [IOSByteArray newArrayWithLength:byteCount];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, offset, copy_, 0, byteCount);
  return new_OkioByteString_initWithByteArray_(copy_);
}

OkioByteString *OkioByteString_encodeUtf8WithNSString_(NSString *s) {
  OkioByteString_initialize();
  if (s == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"s == null");
  OkioByteString *byteString = new_OkioByteString_initWithByteArray_([s getBytesWithCharset:JreLoadStatic(OkioUtil, UTF_8)]);
  byteString->utf8_ = s;
  return byteString;
}

OkioByteString *OkioByteString_digestWithNSString_(OkioByteString *self, NSString *algorithm) {
  @try {
    return OkioByteString_ofWithByteArray_([((JavaSecurityMessageDigest *) nil_chk(JavaSecurityMessageDigest_getInstanceWithNSString_(algorithm))) digestWithByteArray:self->data_]);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

OkioByteString *OkioByteString_decodeBase64WithNSString_(NSString *base64) {
  OkioByteString_initialize();
  if (base64 == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"base64 == null");
  IOSByteArray *decoded = OkioBase64_decodeWithNSString_(base64);
  return decoded != nil ? new_OkioByteString_initWithByteArray_(decoded) : nil;
}

OkioByteString *OkioByteString_decodeHexWithNSString_(NSString *hex) {
  OkioByteString_initialize();
  if (hex == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"hex == null");
  if (((jint) [hex length]) % 2 != 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unexpected hex string: ", hex));
  IOSByteArray *result = [IOSByteArray newArrayWithLength:((jint) [hex length]) / 2];
  for (jint i = 0; i < result->size_; i++) {
    jint d1 = JreLShift32(OkioByteString_decodeHexDigitWithChar_([hex charAtWithInt:i * 2]), 4);
    jint d2 = OkioByteString_decodeHexDigitWithChar_([hex charAtWithInt:i * 2 + 1]);
    *IOSByteArray_GetRef(result, i) = (jbyte) (d1 + d2);
  }
  return OkioByteString_ofWithByteArray_(result);
}

jint OkioByteString_decodeHexDigitWithChar_(jchar c) {
  OkioByteString_initialize();
  if (c >= '0' && c <= '9') return c - '0';
  if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Unexpected hex digit: ", c));
}

OkioByteString *OkioByteString_readWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint byteCount) {
  OkioByteString_initialize();
  if (inArg == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"in == null");
  if (byteCount < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"byteCount < 0: ", byteCount));
  IOSByteArray *result = [IOSByteArray newArrayWithLength:byteCount];
  for (jint offset = 0, read; offset < byteCount; offset += read) {
    read = [inArg readWithByteArray:result withInt:offset withInt:byteCount - offset];
    if (read == -1) @throw new_JavaIoEOFException_init();
  }
  return new_OkioByteString_initWithByteArray_(result);
}

jint OkioByteString_codePointIndexToCharIndexWithNSString_withInt_(NSString *s, jint codePointCount) {
  OkioByteString_initialize();
  for (jint i = 0, j = 0, length = ((jint) [((NSString *) nil_chk(s)) length]), c; i < length; i += JavaLangCharacter_charCountWithInt_(c)) {
    if (j == codePointCount) {
      return i;
    }
    c = [s codePointAt:i];
    if ((JavaLangCharacter_isISOControlWithInt_(c) && c != 0x000a && c != 0x000d) || c == OkioBuffer_REPLACEMENT_CHARACTER) {
      return -1;
    }
    j++;
  }
  return ((jint) [s length]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioByteString)
