//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/HashingSource.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSource.h"
#include "okio/HashingSource.h"
#include "okio/Segment.h"
#include "okio/Source.h"

@interface OkioHashingSource () {
 @public
  JavaSecurityMessageDigest *messageDigest_;
}

- (instancetype)initWithOkioSource:(id<OkioSource>)source
                      withNSString:(NSString *)algorithm;

@end

J2OBJC_FIELD_SETTER(OkioHashingSource, messageDigest_, JavaSecurityMessageDigest *)

__attribute__((unused)) static void OkioHashingSource_initWithOkioSource_withNSString_(OkioHashingSource *self, id<OkioSource> source, NSString *algorithm);

__attribute__((unused)) static OkioHashingSource *new_OkioHashingSource_initWithOkioSource_withNSString_(id<OkioSource> source, NSString *algorithm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioHashingSource *create_OkioHashingSource_initWithOkioSource_withNSString_(id<OkioSource> source, NSString *algorithm);

@implementation OkioHashingSource

+ (OkioHashingSource *)md5WithOkioSource:(id<OkioSource>)source {
  return OkioHashingSource_md5WithOkioSource_(source);
}

+ (OkioHashingSource *)sha1WithOkioSource:(id<OkioSource>)source {
  return OkioHashingSource_sha1WithOkioSource_(source);
}

+ (OkioHashingSource *)sha256WithOkioSource:(id<OkioSource>)source {
  return OkioHashingSource_sha256WithOkioSource_(source);
}

- (instancetype)initWithOkioSource:(id<OkioSource>)source
                      withNSString:(NSString *)algorithm {
  OkioHashingSource_initWithOkioSource_withNSString_(self, source, algorithm);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  jlong result = [super readWithOkioBuffer:sink withLong:byteCount];
  if (result != -1LL) {
    jlong start = ((OkioBuffer *) nil_chk(sink))->size_ - result;
    jlong offset = sink->size_;
    OkioSegment *s = sink->head_;
    while (offset > start) {
      s = ((OkioSegment *) nil_chk(s))->prev_;
      offset -= (((OkioSegment *) nil_chk(s))->limit_ - s->pos_);
    }
    while (offset < sink->size_) {
      jint pos = (jint) (((OkioSegment *) nil_chk(s))->pos_ + start - offset);
      [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) updateWithByteArray:s->data_ withInt:pos withInt:s->limit_ - pos];
      offset += (s->limit_ - s->pos_);
      start = offset;
      s = s->next_;
    }
  }
  return result;
}

- (OkioByteString *)hash__ {
  IOSByteArray *result = [((JavaSecurityMessageDigest *) nil_chk(messageDigest_)) digest];
  return OkioByteString_ofWithByteArray_(result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "md5WithOkioSource:", "LOkioHashingSource;", 0x9, 0, 1, -1, -1, -1, -1 },
    { "sha1WithOkioSource:", "LOkioHashingSource;", 0x9, 2, 1, -1, -1, -1, -1 },
    { "sha256WithOkioSource:", "LOkioHashingSource;", 0x9, 3, 1, -1, -1, -1, -1 },
    { "initWithOkioSource:withNSString:", NULL, 0x2, -1, 4, -1, -1, -1, -1 },
    { "readWithOkioBuffer:withLong:", "J", 0x1, 5, 6, 7, -1, -1, -1 },
    { "hash__", "LOkioByteString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "messageDigest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "md5", "LOkioSource;", "sha1", "sha256", "LOkioSource;LNSString;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "hash" };
  static const J2ObjcClassInfo _OkioHashingSource = { "HashingSource", "okio", ptrTable, methods, fields, 7, 0x11, 6, 1, -1, -1, -1, -1, -1 };
  return &_OkioHashingSource;
}

@end

OkioHashingSource *OkioHashingSource_md5WithOkioSource_(id<OkioSource> source) {
  OkioHashingSource_initialize();
  return new_OkioHashingSource_initWithOkioSource_withNSString_(source, @"MD5");
}

OkioHashingSource *OkioHashingSource_sha1WithOkioSource_(id<OkioSource> source) {
  OkioHashingSource_initialize();
  return new_OkioHashingSource_initWithOkioSource_withNSString_(source, @"SHA-1");
}

OkioHashingSource *OkioHashingSource_sha256WithOkioSource_(id<OkioSource> source) {
  OkioHashingSource_initialize();
  return new_OkioHashingSource_initWithOkioSource_withNSString_(source, @"SHA-256");
}

void OkioHashingSource_initWithOkioSource_withNSString_(OkioHashingSource *self, id<OkioSource> source, NSString *algorithm) {
  OkioForwardingSource_initWithOkioSource_(self, source);
  @try {
    self->messageDigest_ = JavaSecurityMessageDigest_getInstanceWithNSString_(algorithm);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangAssertionError_init();
  }
}

OkioHashingSource *new_OkioHashingSource_initWithOkioSource_withNSString_(id<OkioSource> source, NSString *algorithm) {
  J2OBJC_NEW_IMPL(OkioHashingSource, initWithOkioSource_withNSString_, source, algorithm)
}

OkioHashingSource *create_OkioHashingSource_initWithOkioSource_withNSString_(id<OkioSource> source, NSString *algorithm) {
  J2OBJC_CREATE_IMPL(OkioHashingSource, initWithOkioSource_withNSString_, source, algorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioHashingSource)
