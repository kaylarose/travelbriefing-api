//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/HashingSource.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioHashingSource")
#ifdef RESTRICT_OkioHashingSource
#define INCLUDE_ALL_OkioHashingSource 0
#else
#define INCLUDE_ALL_OkioHashingSource 1
#endif
#undef RESTRICT_OkioHashingSource

#if !defined (OkioHashingSource_) && (INCLUDE_ALL_OkioHashingSource || defined(INCLUDE_OkioHashingSource))
#define OkioHashingSource_

#define RESTRICT_OkioForwardingSource 1
#define INCLUDE_OkioForwardingSource 1
#include "okio/ForwardingSource.h"

@class OkioBuffer;
@class OkioByteString;
@protocol OkioSource;

/*!
 @brief A source that computes a hash of the full stream of bytes it has supplied.
 To use, create an
 instance with your preferred hash algorithm. Exhaust the source by reading all of its bytes and
 then call <code>hash()</code> to compute the final hash value.
 <p>In this example we use <code>HashingSource</code> with a <code>BufferedSource</code> to make reading
 from the source easier. 
@code
     HashingSource hashingSource = HashingSource.sha256(rawSource);
   BufferedSource bufferedSource = Okio.buffer(hashingSource);
   ... // Read all of bufferedSource.
   ByteString hash = hashingSource.hash();
 
@endcode
 */
@interface OkioHashingSource : OkioForwardingSource

#pragma mark Public

/*!
 @brief Returns the hash of the bytes supplied thus far and resets the internal state of this source.
 <p><strong>Warning:</strong> This method is not idempotent. Each time this method is called its
 internal state is cleared. This starts a new hash with zero bytes supplied.
 */
- (OkioByteString *)hash__;

/*!
 @brief Returns a sink that uses the obsolete MD5 hash algorithm.
 */
+ (OkioHashingSource *)md5WithOkioSource:(id<OkioSource>)source;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

/*!
 @brief Returns a sink that uses the obsolete SHA-1 hash algorithm.
 */
+ (OkioHashingSource *)sha1WithOkioSource:(id<OkioSource>)source;

/*!
 @brief Returns a sink that uses the SHA-256 hash algorithm.
 */
+ (OkioHashingSource *)sha256WithOkioSource:(id<OkioSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioHashingSource)

FOUNDATION_EXPORT OkioHashingSource *OkioHashingSource_md5WithOkioSource_(id<OkioSource> source);

FOUNDATION_EXPORT OkioHashingSource *OkioHashingSource_sha1WithOkioSource_(id<OkioSource> source);

FOUNDATION_EXPORT OkioHashingSource *OkioHashingSource_sha256WithOkioSource_(id<OkioSource> source);

J2OBJC_TYPE_LITERAL_HEADER(OkioHashingSource)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioHashingSource")
