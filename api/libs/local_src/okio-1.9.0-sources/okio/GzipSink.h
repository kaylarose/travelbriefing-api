//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/GzipSink.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioGzipSink")
#ifdef RESTRICT_OkioGzipSink
#define INCLUDE_ALL_OkioGzipSink 0
#else
#define INCLUDE_ALL_OkioGzipSink 1
#endif
#undef RESTRICT_OkioGzipSink

#if !defined (OkioGzipSink_) && (INCLUDE_ALL_OkioGzipSink || defined(INCLUDE_OkioGzipSink))
#define OkioGzipSink_

#define RESTRICT_OkioSink 1
#define INCLUDE_OkioSink 1
#include "okio/Sink.h"

@class OkioBuffer;
@class OkioTimeout;

/*!
 @brief A sink that uses <a href="http://www.ietf.org/rfc/rfc1952.txt">GZIP</a> to
 compress written data to another sink.
 <h3>Sync flush</h3>
 Aggressive flushing of this stream may result in reduced compression. Each
 call to <code>flush</code> immediately compresses all currently-buffered data;
 this early compression may be less effective than compression performed
 without flushing.
 <p>This is equivalent to using <code>Deflater</code> with the sync flush option.
 This class does not offer any partial flush mechanism. For best performance,
 only call <code>flush</code> when application behavior requires it.
 */
@interface OkioGzipSink : NSObject < OkioSink >

#pragma mark Public

- (instancetype)initWithOkioSink:(id<OkioSink>)sink;

- (void)close;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioGzipSink)

FOUNDATION_EXPORT void OkioGzipSink_initWithOkioSink_(OkioGzipSink *self, id<OkioSink> sink);

FOUNDATION_EXPORT OkioGzipSink *new_OkioGzipSink_initWithOkioSink_(id<OkioSink> sink) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioGzipSink *create_OkioGzipSink_initWithOkioSink_(id<OkioSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(OkioGzipSink)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioGzipSink")
