//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/okio-1.9.0-sources/okio/Timeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioTimeout")
#ifdef RESTRICT_OkioTimeout
#define INCLUDE_ALL_OkioTimeout 0
#else
#define INCLUDE_ALL_OkioTimeout 1
#endif
#undef RESTRICT_OkioTimeout

#if !defined (OkioTimeout_) && (INCLUDE_ALL_OkioTimeout || defined(INCLUDE_OkioTimeout))
#define OkioTimeout_

@class JavaUtilConcurrentTimeUnit;

/*!
 @brief A policy on how much time to spend on a task before giving up.
 When a task
 times out, it is left in an unspecified state and should be abandoned. For
 example, if reading from a source times out, that source should be closed and
 the read should be retried later. If writing to a sink times out, the same
 rules apply: close the sink and retry later.
 <h3>Timeouts and Deadlines</h3>
 This class offers two complementary controls to define a timeout policy.
 <p><strong>Timeouts</strong> specify the maximum time to wait for a single
 operation to complete. Timeouts are typically used to detect problems like
 network partitions. For example, if a remote peer doesn't return <i>any</i>
 data for ten seconds, we may assume that the peer is unavailable.
 <p><strong>Deadlines</strong> specify the maximum time to spend on a job,
 composed of one or more operations. Use deadlines to set an upper bound on
 the time invested on a job. For example, a battery-conscious app may limit
 how much time it spends pre-loading content.
 */
@interface OkioTimeout : NSObject

+ (OkioTimeout *)NONE;

#pragma mark Public

- (instancetype)init;

/*!
 @brief Clears the deadline.
 */
- (OkioTimeout *)clearDeadline;

/*!
 @brief Clears the timeout.
 Operating system timeouts may still apply. 
 */
- (OkioTimeout *)clearTimeout;

/*!
 @brief Set a deadline of now plus <code>duration</code> time.
 */
- (OkioTimeout *)deadlineWithLong:(jlong)duration
   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns the nano time when the deadline will
 be reached.
 @throws IllegalStateException if no deadline is set.
 */
- (jlong)deadlineNanoTime;

/*!
 @brief Sets the nano time when the deadline will be
 reached.
 All operations must complete before this time. Use a deadline to
 set a maximum bound on the time spent on a sequence of operations.
 */
- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime;

/*!
 @brief Returns true if a deadline is enabled.
 */
- (jboolean)hasDeadline;

/*!
 @brief Throws an <code>InterruptedIOException</code> if the deadline has been reached or if the current
 thread has been interrupted.
 This method doesn't detect timeouts; that should be implemented to
 asynchronously abort an in-progress operation.
 */
- (void)throwIfReached;

/*!
 @brief Wait at most <code>timeout</code> time before aborting an operation.
 Using a
 per-operation timeout means that as long as forward progress is being made,
 no sequence of operations will fail.
 <p>If <code>timeout == 0</code>, operations will run indefinitely. (Operating
 system timeouts may still apply.)
 */
- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Returns the timeout in nanoseconds, or <code>0</code> for no timeout.
 */
- (jlong)timeoutNanos;

/*!
 @brief Waits on <code>monitor</code> until it is notified.
 Throws <code>InterruptedIOException</code> if either
 the thread is interrupted or if this timeout elapses before <code>monitor</code> is notified. The
 caller must be synchronized on <code>monitor</code>.
 <p>Here's a sample class that uses <code>waitUntilNotified()</code> to await a specific state. Note
 that the call is made within a loop to avoid unnecessary waiting and to mitigate spurious
 notifications. 
@code

   class Dice 
     Random random = new Random();
     int latestTotal;
     public synchronized void roll() {
       latestTotal = 2 + random.nextInt(6) + random.nextInt(6);
       System.out.println("Rolled " + latestTotal);
       notifyAll();
     }
     public void rollAtFixedRate(int period, TimeUnit timeUnit) {
       Executors.newScheduledThreadPool(0).scheduleAtFixedRate(new Runnable() {
         public void run() {
           roll();
          }
       }, 0, period, timeUnit);
     }
     public synchronized void awaitTotal(Timeout timeout, int total)
         throws InterruptedIOException {
       while (latestTotal != total) {
         timeout.waitUntilNotified(this);
       }
     }
   }
  
@endcode
 */
- (void)waitUntilNotifiedWithId:(id)monitor;

@end

J2OBJC_STATIC_INIT(OkioTimeout)

/*!
 @brief An empty timeout that neither tracks nor detects timeouts.
 Use this when
 timeouts aren't necessary, such as in implementations whose operations
 do not block.
 */
inline OkioTimeout *OkioTimeout_get_NONE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioTimeout *OkioTimeout_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioTimeout, NONE, OkioTimeout *)

FOUNDATION_EXPORT void OkioTimeout_init(OkioTimeout *self);

FOUNDATION_EXPORT OkioTimeout *new_OkioTimeout_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioTimeout *create_OkioTimeout_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioTimeout")
