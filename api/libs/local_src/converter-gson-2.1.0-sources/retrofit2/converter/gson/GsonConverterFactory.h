//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/libs_raw/converter-gson-2.1.0-sources/retrofit2/converter/gson/GsonConverterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2ConverterGsonGsonConverterFactory")
#ifdef RESTRICT_Retrofit2ConverterGsonGsonConverterFactory
#define INCLUDE_ALL_Retrofit2ConverterGsonGsonConverterFactory 0
#else
#define INCLUDE_ALL_Retrofit2ConverterGsonGsonConverterFactory 1
#endif
#undef RESTRICT_Retrofit2ConverterGsonGsonConverterFactory

#if !defined (Retrofit2ConverterGsonGsonConverterFactory_) && (INCLUDE_ALL_Retrofit2ConverterGsonGsonConverterFactory || defined(INCLUDE_Retrofit2ConverterGsonGsonConverterFactory))
#define Retrofit2ConverterGsonGsonConverterFactory_

#define RESTRICT_Retrofit2Converter 1
#define INCLUDE_Retrofit2Converter_Factory 1
#include "retrofit2/Converter.h"

@class ComGoogleGsonGson;
@class IOSObjectArray;
@class Retrofit2Retrofit;
@protocol JavaLangReflectType;
@protocol Retrofit2Converter;

/*!
 @brief A converter which uses Gson for JSON.
 <p>
 Because Gson is so flexible in the types it supports, this converter assumes that it can handle
 all types. If you are mixing JSON serialization with something else (such as protocol buffers),
 you must add this instance
 last to allow the other converters a chance to see their types.
 */
@interface Retrofit2ConverterGsonGsonConverterFactory : Retrofit2Converter_Factory

#pragma mark Public

/*!
 @brief Create an instance using a default <code>Gson</code> instance for conversion.
 Encoding to JSON and
 decoding from JSON (when no charset is specified by a header) will use UTF-8.
 */
+ (Retrofit2ConverterGsonGsonConverterFactory *)create;

/*!
 @brief Create an instance using <code>gson</code> for conversion.
 Encoding to JSON and
 decoding from JSON (when no charset is specified by a header) will use UTF-8.
 */
+ (Retrofit2ConverterGsonGsonConverterFactory *)createWithComGoogleGsonGson:(ComGoogleGsonGson *)gson;

- (id<Retrofit2Converter>)requestBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)parameterAnnotations
                                withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)methodAnnotations
                                                withRetrofit2Retrofit:(Retrofit2Retrofit *)retrofit;

- (id<Retrofit2Converter>)responseBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                 withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations
                                                 withRetrofit2Retrofit:(Retrofit2Retrofit *)retrofit;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2ConverterGsonGsonConverterFactory)

FOUNDATION_EXPORT Retrofit2ConverterGsonGsonConverterFactory *Retrofit2ConverterGsonGsonConverterFactory_create();

FOUNDATION_EXPORT Retrofit2ConverterGsonGsonConverterFactory *Retrofit2ConverterGsonGsonConverterFactory_createWithComGoogleGsonGson_(ComGoogleGsonGson *gson);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2ConverterGsonGsonConverterFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_Retrofit2ConverterGsonGsonConverterFactory")
